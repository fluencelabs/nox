"use strict";
// Copyright 2015-2019 Parity Technologies (UK) Ltd.
// This file is part of Parity.
//
// SPDX-License-Identifier: MIT
Object.defineProperty(exports, "__esModule", { value: true });
var signature_1 = require("./signature");
var paramType_1 = require("../spec/paramType");
describe('util/signature', function () {
    describe('eventSignature', function () {
        it('encodes signature baz() correctly', function () {
            expect(signature_1.eventSignature('baz', [])).toEqual({
                id: 'baz()',
                name: 'baz',
                signature: 'a7916fac4f538170f7cd12c148552e2cba9fcd72329a2dd5b07a6fa906488ddf'
            });
        });
        it('encodes signature baz(uint32) correctly', function () {
            expect(signature_1.eventSignature('baz', [new paramType_1.default('uint', undefined, 32)])).toEqual({
                id: 'baz(uint32)',
                name: 'baz',
                signature: '7d68785e8fc871be024b75964bd86d093511d4bc2dc7cf7bea32c48a0efaecb1'
            });
        });
        it('encodes signature baz(uint32, bool) correctly', function () {
            expect(signature_1.eventSignature('baz', [
                new paramType_1.default('uint', undefined, 32),
                new paramType_1.default('bool')
            ])).toEqual({
                id: 'baz(uint32,bool)',
                name: 'baz',
                signature: 'cdcd77c0992ec5bbfc459984220f8c45084cc24d9b6efed1fae540db8de801d2'
            });
        });
        it('encodes no-name signature correctly as ()', function () {
            expect(signature_1.eventSignature(undefined, [])).toEqual({
                id: '()',
                name: undefined,
                signature: ''
            });
        });
        it('encodes no-params signature correctly as ()', function () {
            expect(signature_1.eventSignature(undefined, undefined)).toEqual({
                id: '()',
                name: undefined,
                signature: ''
            });
        });
    });
    describe('methodSignature', function () {
        it('encodes signature baz() correctly', function () {
            expect(signature_1.methodSignature('baz', [])).toEqual({
                id: 'baz()',
                name: 'baz',
                signature: 'a7916fac'
            });
        });
        it('encodes signature baz(uint32) correctly', function () {
            expect(signature_1.methodSignature('baz', [new paramType_1.default('uint', undefined, 32)])).toEqual({
                id: 'baz(uint32)',
                name: 'baz',
                signature: '7d68785e'
            });
        });
        it('encodes signature baz(uint32, bool) correctly', function () {
            expect(signature_1.methodSignature('baz', [
                new paramType_1.default('uint', undefined, 32),
                new paramType_1.default('bool')
            ])).toEqual({
                id: 'baz(uint32,bool)',
                name: 'baz',
                signature: 'cdcd77c0'
            });
        });
        it('encodes signature in name correctly', function () {
            expect(signature_1.methodSignature('baz(uint32,bool)', [
                new paramType_1.default('uint', undefined, 32),
                new paramType_1.default('bool')
            ])).toEqual({
                id: 'baz(uint32,bool)',
                name: 'baz',
                signature: 'cdcd77c0'
            });
        });
        it('encodes no-name signature correctly as ()', function () {
            expect(signature_1.methodSignature(undefined, [])).toEqual({
                id: '()',
                name: undefined,
                signature: ''
            });
        });
        it('encodes no-params signature correctly as ()', function () {
            expect(signature_1.methodSignature(undefined, undefined)).toEqual({
                id: '()',
                name: undefined,
                signature: ''
            });
        });
    });
});
