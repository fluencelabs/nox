"use strict";
// Copyright 2015-2019 Parity Technologies (UK) Ltd.
// This file is part of Parity.
//
// SPDX-License-Identifier: MIT
Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_js_1 = require("bignumber.js");
var pad_1 = require("./pad");
describe('util/pad', function () {
    var SHORT15 = '1234567890abcdef';
    var BYTES15 = [0x12, 0x34, 0x56, 0x78, 0x90, 0xab, 0xcd, 0xef];
    var LONG15 = SHORT15 + "000000000000000000000000000000000000000000000000";
    var PAD123 = '0000000000000000000000000000000000000000000000000000000000000123';
    describe('padAddress', function () {
        it('pads to 64 characters', function () {
            expect(pad_1.padAddress('123')).toEqual(PAD123);
        });
        it('strips leading 0x when passed in', function () {
            expect(pad_1.padAddress("0x" + PAD123)).toEqual(PAD123);
        });
    });
    describe('padBool', function () {
        var TRUE = '0000000000000000000000000000000000000000000000000000000000000001';
        var FALSE = '0000000000000000000000000000000000000000000000000000000000000000';
        it('pads true to 64 characters', function () {
            expect(pad_1.padBool(true)).toEqual(TRUE);
        });
        it('pads false to 64 characters', function () {
            expect(pad_1.padBool(false)).toEqual(FALSE);
        });
    });
    describe('padU32', function () {
        it('left pads length < 64 bytes to 64 bytes', function () {
            expect(pad_1.padU32(1)).toEqual('0000000000000000000000000000000000000000000000000000000000000001');
        });
        it('pads hex representation', function () {
            expect(pad_1.padU32(0x123)).toEqual(PAD123);
        });
        it('pads decimal representation', function () {
            expect(pad_1.padU32(291)).toEqual(PAD123);
        });
        it('pads string representation', function () {
            expect(pad_1.padU32('0x123')).toEqual(PAD123);
        });
        it('pads BigNumber representation', function () {
            expect(pad_1.padU32(new bignumber_js_1.default(0x123))).toEqual(PAD123);
        });
        it('converts negative numbers to 2s complement', function () {
            expect(pad_1.padU32(-123)).toEqual('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85');
        });
    });
    describe('padFixedBytes', function () {
        it('right pads length < 64 bytes to 64 bytes (string)', function () {
            expect(pad_1.padFixedBytes("0x" + SHORT15)).toEqual(LONG15);
        });
        it('right pads length < 64 bytes to 64 bytes (array)', function () {
            expect(pad_1.padFixedBytes(BYTES15)).toEqual(LONG15);
        });
        it('right pads length > 64 bytes (64 byte multiples)', function () {
            expect(pad_1.padFixedBytes("0x" + LONG15 + SHORT15)).toEqual("" + LONG15 + LONG15);
        });
        it('strips leading 0x when passed in', function () {
            expect(pad_1.padFixedBytes("0x" + SHORT15)).toEqual(LONG15);
        });
        it('encodes empty value when 0x is paased', function () {
            expect(pad_1.padFixedBytes('0x')).toEqual('');
        });
    });
    describe('padBytes', function () {
        it('right pads length < 64, adding the length (string)', function () {
            var result = pad_1.padBytes("0x" + SHORT15);
            expect(result.length).toEqual(128);
            expect(result).toEqual("" + pad_1.padU32(8) + LONG15);
        });
        it('right pads length < 64, adding the length (array)', function () {
            var result = pad_1.padBytes(BYTES15);
            expect(result.length).toEqual(128);
            expect(result).toEqual("" + pad_1.padU32(8) + LONG15);
        });
        it('right pads length > 64, adding the length', function () {
            var result = pad_1.padBytes("0x" + LONG15 + SHORT15);
            expect(result.length).toEqual(192);
            expect(result).toEqual("" + pad_1.padU32(0x28) + LONG15 + LONG15);
        });
    });
    describe('padString', function () {
        it('correctly converts & pads strings', function () {
            var result = pad_1.padString('gavofyork');
            expect(result.length).toEqual(128);
            expect(result).toEqual(pad_1.padBytes('0x6761766f66796f726b'));
        });
    });
});
