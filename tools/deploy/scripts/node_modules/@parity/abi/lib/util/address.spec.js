"use strict";
// Copyright 2015-2019 Parity Technologies (UK) Ltd.
// This file is part of Parity.
//
// SPDX-License-Identifier: MIT
Object.defineProperty(exports, "__esModule", { value: true });
var address_1 = require("./address");
describe('util/address', function () {
    var value = '63Cf90D3f0410092FC0fca41846f596223979195';
    var address = "0x" + value;
    var lowercase = "0x" + value.toLowerCase();
    var uppercase = "0x" + value.toUpperCase();
    var invalid = '0x' +
        value
            .split('')
            .map(function (char) {
            if (char >= 'a' && char <= 'f') {
                return char.toUpperCase();
            }
            else if (char >= 'A' && char <= 'F') {
                return char.toLowerCase();
            }
            return char;
        })
            .join('');
    var invalidhex = '0x01234567890123456789012345678901234567gh';
    /**
     * @test {isChecksumValid}
     */
    describe('isChecksumValid', function () {
        it('returns false when fully lowercase', function () {
            expect(address_1.isChecksumValid(lowercase)).toBe(false);
        });
        it('returns false when fully uppercase', function () {
            expect(address_1.isChecksumValid(uppercase)).toBe(false);
        });
        it('returns false on a mixed-case address', function () {
            expect(address_1.isChecksumValid(invalid)).toBe(false);
        });
        it('returns true on a checksummed address', function () {
            expect(address_1.isChecksumValid(address)).toBe(true);
        });
    });
    /**
     * @test {isAddress}
     */
    describe('isAddress', function () {
        it('returns true when fully lowercase', function () {
            expect(address_1.isAddress(lowercase)).toBe(true);
        });
        it('returns true when fully uppercase', function () {
            expect(address_1.isAddress(uppercase)).toBe(true);
        });
        it('returns true when checksummed', function () {
            expect(address_1.isAddress(address)).toBe(true);
        });
        it('returns false when invalid checksum', function () {
            expect(address_1.isAddress(invalid)).toBe(false);
        });
        it('returns false on valid length, non-hex', function () {
            expect(address_1.isAddress(invalidhex)).toBe(false);
        });
    });
    /**
     * @test {toChecksumAddress}
     */
    describe('toChecksumAddress', function () {
        it('returns empty when no address specified', function () {
            expect(address_1.toChecksumAddress(undefined)).toEqual('');
        });
        it('returns empty when null address specified', function () {
            expect(address_1.toChecksumAddress(null)).toEqual('');
        });
        it('returns empty on invalid address structure', function () {
            expect(address_1.toChecksumAddress('0xnotaddress')).toEqual('');
        });
        it('returns formatted address on checksum input', function () {
            expect(address_1.toChecksumAddress(address)).toEqual(address);
        });
        it('returns formatted address on lowercase input', function () {
            expect(address_1.toChecksumAddress(lowercase)).toEqual(address);
        });
        it('returns formatted address on uppercase input', function () {
            expect(address_1.toChecksumAddress(uppercase)).toEqual(address);
        });
        it('returns formatted address on mixed input', function () {
            expect(address_1.toChecksumAddress(invalid)).toEqual(address);
        });
    });
});
