"use strict";
// Copyright 2015-2019 Parity Technologies (UK) Ltd.
// This file is part of Parity.
//
// SPDX-License-Identifier: MIT
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("./types");
var token_1 = require("../token");
describe('util/types', function () {
    describe('isArray', function () {
        it('correctly identifies null as false', function () {
            expect(types_1.isArray(null)).toBe(false);
        });
        it('correctly identifies empty arrays as Array', function () {
            expect(types_1.isArray([])).toBe(true);
        });
        it('correctly identifies non-empty arrays as Array', function () {
            expect(types_1.isArray([1, 2, 3])).toBe(true);
        });
        it('correctly identifies strings as non-Array', function () {
            expect(types_1.isArray('not an array')).toBe(false);
        });
        it('correctly identifies objects as non-Array', function () {
            expect(types_1.isArray({})).toBe(false);
        });
    });
    describe('isString', function () {
        it('correctly identifies empty string as string', function () {
            expect(types_1.isString('')).toBe(true);
        });
        it('correctly identifies string as string', function () {
            expect(types_1.isString('123')).toBe(true);
        });
    });
    describe('isInstanceOf', function () {
        it('correctly identifies build-in instanceof', function () {
            expect(types_1.isInstanceOf(new String('123'), String)).toBe(true);
        });
        it('correctly identifies own instanceof', function () {
            expect(types_1.isInstanceOf(new token_1.default('int', 123), token_1.default)).toBe(true);
        });
        it('correctly reports false for own', function () {
            expect(types_1.isInstanceOf({ type: 'int' }, token_1.default)).toBe(false);
        });
    });
    describe('isError', function () {
        it('correctly identifies null as false', function () {
            expect(types_1.isError(null)).toBe(false);
        });
        it('correctly identifies Error as true', function () {
            expect(types_1.isError(new Error('an error'))).toBe(true);
        });
    });
    describe('isFunction', function () {
        it('correctly identifies null as false', function () {
            expect(types_1.isFunction(null)).toBe(false);
        });
        it('correctly identifies function as true', function () {
            expect(types_1.isFunction(jest.fn())).toBe(true);
        });
    });
    describe('isHex', function () {
        it('correctly identifies hex by leading 0x', function () {
            expect(types_1.isHex('0x123')).toBe(true);
        });
        it('correctly identifies hex without leading 0x', function () {
            expect(types_1.isHex('123')).toBe(true);
        });
        it('correctly identifies non-hex values', function () {
            expect(types_1.isHex('123j')).toBe(false);
        });
        it('correctly indentifies non-string values', function () {
            expect(types_1.isHex(false)).toBe(false);
            expect(types_1.isHex(undefined)).toBe(false);
            expect(types_1.isHex([1, 2, 3])).toBe(false);
        });
    });
    describe('isObject', function () {
        it('correctly identifies empty object as object', function () {
            expect(types_1.isObject({})).toBe(true);
        });
        it('correctly identifies non-empty object as object', function () {
            expect(types_1.isObject({ data: '123' })).toBe(true);
        });
        it('correctly identifies Arrays as non-objects', function () {
            expect(types_1.isObject([1, 2, 3])).toBe(false);
        });
        it('correctly identifies Strings as non-objects', function () {
            expect(types_1.isObject('123')).toBe(false);
        });
    });
});
