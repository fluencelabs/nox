"use strict";
// Copyright 2015-2019 Parity Technologies (UK) Ltd.
// This file is part of Parity.
//
// SPDX-License-Identifier: MIT
Object.defineProperty(exports, "__esModule", { value: true });
var constructor_1 = require("./constructor");
var event_1 = require("./event/event");
var function_1 = require("./function");
var token_1 = require("../token");
var Interface = /** @class */ (function () {
    function Interface(abi) {
        this._interface = Interface.parseABI(abi);
    }
    Interface.encodeTokens = function (paramTypes, values) {
        var createToken = function (paramType, value) {
            if (paramType.subtype) {
                return new token_1.default(paramType.type, value.map(function (entry) {
                    return createToken(paramType.subtype, entry);
                }));
            }
            return new token_1.default(paramType.type, value);
        };
        return paramTypes.map(function (paramType, index) {
            return createToken(paramType, values[index]);
        });
    };
    Interface.parseABI = function (abi) {
        return abi.map(function (item) {
            switch (item.type) {
                case 'constructor':
                    return new constructor_1.default(item);
                case 'event':
                    return new event_1.default(item);
                case 'function':
                case 'fallback':
                    return new function_1.default(item);
                default:
                    throw new Error("Unknown ABI type " + item.type);
            }
        });
    };
    Object.defineProperty(Interface.prototype, "interface", {
        get: function () {
            return this._interface;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Interface.prototype, "constructors", {
        get: function () {
            return this._interface.filter(function (item) { return item instanceof constructor_1.default; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Interface.prototype, "events", {
        get: function () {
            return this._interface.filter(function (item) { return item instanceof event_1.default; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Interface.prototype, "functions", {
        get: function () {
            return this._interface.filter(function (item) { return item instanceof function_1.default; });
        },
        enumerable: true,
        configurable: true
    });
    Interface.prototype.encodeTokens = function (paramTypes, values) {
        return Interface.encodeTokens(paramTypes, values);
    };
    return Interface;
}());
exports.default = Interface;
