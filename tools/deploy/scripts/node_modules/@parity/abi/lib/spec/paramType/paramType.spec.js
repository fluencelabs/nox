"use strict";
// Copyright 2015-2019 Parity Technologies (UK) Ltd.
// This file is part of Parity.
//
// SPDX-License-Identifier: MIT
Object.defineProperty(exports, "__esModule", { value: true });
var paramType_1 = require("./paramType");
describe('spec/paramType/ParamType', function () {
    describe('validateType', function () {
        it('validates address', function () {
            expect(paramType_1.default.validateType('address')).toBe(true);
        });
        it('validates fixedArray', function () {
            expect(paramType_1.default.validateType('fixedArray')).toBe(true);
        });
        it('validates array', function () {
            expect(paramType_1.default.validateType('array')).toBe(true);
        });
        it('validates fixedBytes', function () {
            expect(paramType_1.default.validateType('fixedBytes')).toBe(true);
        });
        it('validates bytes', function () {
            expect(paramType_1.default.validateType('bytes')).toBe(true);
        });
        it('validates bool', function () {
            expect(paramType_1.default.validateType('bool')).toBe(true);
        });
        it('validates int', function () {
            expect(paramType_1.default.validateType('int')).toBe(true);
        });
        it('validates uint', function () {
            expect(paramType_1.default.validateType('uint')).toBe(true);
        });
        it('validates string', function () {
            expect(paramType_1.default.validateType('string')).toBe(true);
        });
        it('throws an error on invalid types', function () {
            expect(function () { return paramType_1.default.validateType('noMatch'); }).toThrow(/noMatch/);
        });
    });
    describe('constructor', function () {
        it('throws an error on invalid types', function () {
            expect(function () { return new paramType_1.default('noMatch'); }).toThrow(/noMatch/);
        });
        it('sets the type of the object', function () {
            expect(new paramType_1.default('bool', undefined, 1).type).toEqual('bool');
        });
        it('sets the subtype of the object', function () {
            expect(new paramType_1.default('array', new paramType_1.default('bool'), 1).subtype).toEqual({
                _indexed: false,
                _length: 0,
                _subtype: undefined,
                _type: 'bool'
            });
        });
        it('sets the length of the object', function () {
            expect(new paramType_1.default('array', new paramType_1.default('bool'), 1).length).toEqual(1);
        });
        it('sets the index of the object', function () {
            expect(new paramType_1.default('array', new paramType_1.default('bool'), 1, true).indexed).toBe(true);
        });
        it('sets default values where none supplied', function () {
            expect(Object.values(new paramType_1.default('string'))).toEqual([
                'string',
                undefined,
                0,
                false
            ]);
        });
    });
});
