"use strict";
// Copyright 2015-2019 Parity Technologies (UK) Ltd.
// This file is part of Parity.
//
// SPDX-License-Identifier: MIT
Object.defineProperty(exports, "__esModule", { value: true });
var paramType_1 = require("./paramType");
/**
 * Convert a string to a ParamType.
 *
 * @param type - Type to convert.
 * @param indexed - Whether the ParamType is indexed or not.
 */
exports.toParamType = function (type, indexed) {
    if (type[type.length - 1] === ']') {
        var last = type.lastIndexOf('[');
        var length_1 = type.substr(last + 1, type.length - last - 2);
        var subtype = exports.toParamType(type.substr(0, last));
        if (length_1.length === 0) {
            return new paramType_1.default('array', subtype, 0, indexed);
        }
        return new paramType_1.default('fixedArray', subtype, parseInt(length_1, 10), indexed);
    }
    switch (type) {
        case 'address':
        case 'bool':
        case 'bytes':
        case 'string':
            return new paramType_1.default(type, undefined, 0, indexed);
        case 'int':
        case 'uint':
            return new paramType_1.default(type, undefined, 256, indexed);
        default:
            if (type.indexOf('uint') === 0) {
                return new paramType_1.default('uint', undefined, parseInt(type.substr(4), 10), indexed);
            }
            else if (type.indexOf('int') === 0) {
                return new paramType_1.default('int', undefined, parseInt(type.substr(3), 10), indexed);
            }
            else if (type.indexOf('bytes') === 0) {
                return new paramType_1.default('fixedBytes', undefined, parseInt(type.substr(5), 10), indexed);
            }
            throw new Error("Cannot convert " + type + " to valid ParamType");
    }
};
/**
 * Convert a ParamType to its string representation.
 *
 * @param paramType - ParamType instance to convert
 */
exports.fromParamType = function (paramType) {
    switch (paramType.type) {
        case 'address':
        case 'bool':
        case 'bytes':
        case 'string':
            return paramType.type;
        case 'int':
        case 'uint':
            return "" + paramType.type + paramType.length;
        case 'fixedBytes':
            return "bytes" + paramType.length;
        case 'fixedArray': {
            if (!paramType.subtype) {
                throw new Error("decodeParam: param of type '" + paramType.type + "' must have a subtype");
            }
            return exports.fromParamType(paramType.subtype) + "[" + paramType.length + "]";
        }
        case 'array': {
            if (!paramType.subtype) {
                throw new Error("decodeParam: param of type '" + paramType.type + "' must have a subtype");
            }
            return exports.fromParamType(paramType.subtype) + "[]";
        }
        default:
            throw new Error("Cannot convert from ParamType " + paramType.type);
    }
};
module.exports = {
    fromParamType: exports.fromParamType,
    toParamType: exports.toParamType
};
