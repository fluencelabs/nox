"use strict";
// Copyright 2015-2019 Parity Technologies (UK) Ltd.
// This file is part of Parity.
//
// SPDX-License-Identifier: MIT
Object.defineProperty(exports, "__esModule", { value: true });
var interface_1 = require("./interface");
var paramType_1 = require("./paramType");
var token_1 = require("../token");
describe('spec/Interface', function () {
    var construct = {
        type: 'constructor',
        inputs: []
    };
    var event = {
        type: 'event',
        name: 'Event2',
        anonymous: false,
        inputs: [
            { name: 'a', type: 'uint256', indexed: true },
            { name: 'b', type: 'bytes32', indexed: false }
        ]
    };
    var func = {
        type: 'function',
        name: 'foo',
        inputs: [{ name: 'a', type: 'uint256' }],
        outputs: []
    };
    describe('parseABI', function () {
        it('throws on invalid types', function () {
            expect(function () {
                return interface_1.default.parseABI([{ inputs: [], type: 'noMatch' }]);
            }).toThrow(/noMatch/);
        });
        it('creates constructors', function () {
            expect(interface_1.default.parseABI([construct])).toEqual([{ _inputs: [] }]);
        });
        it('creates events', function () {
            var parsed = interface_1.default.parseABI([event])[0];
            expect(parsed.name).toEqual('Event2');
        });
        it('creates functions', function () {
            var parsed = interface_1.default.parseABI([func])[0];
            expect(parsed.name).toEqual('foo');
        });
        it('parse complex interfaces', function () {
            expect(interface_1.default.parseABI([construct, event, func]).length).toEqual(3);
        });
    });
    describe('constructor', function () {
        var int = new interface_1.default([construct, event, func]);
        it('contains the full interface', function () {
            expect(int.interface.length).toEqual(3);
        });
        it('contains the constructors', function () {
            expect(int.constructors.length).toEqual(1);
        });
        it('contains the events', function () {
            expect(int.events.length).toEqual(1);
        });
        it('contains the functions', function () {
            expect(int.functions.length).toEqual(1);
        });
    });
    describe('encodeTokens', function () {
        var int = new interface_1.default([construct, event, func]);
        it('encodes simple types', function () {
            expect(int.encodeTokens([
                new paramType_1.default('bool'),
                new paramType_1.default('string'),
                new paramType_1.default('int'),
                new paramType_1.default('uint')
            ], [true, 'gavofyork', -123, 123])).toEqual([
                new token_1.default('bool', true),
                new token_1.default('string', 'gavofyork'),
                new token_1.default('int', -123),
                new token_1.default('uint', 123)
            ]);
        });
        it('encodes array', function () {
            expect(int.encodeTokens([new paramType_1.default('array', new paramType_1.default('bool'))], [[true, false, true]])).toEqual([
                new token_1.default('array', [
                    new token_1.default('bool', true),
                    new token_1.default('bool', false),
                    new token_1.default('bool', true)
                ])
            ]);
        });
        it('encodes simple with array of array', function () {
            expect(int.encodeTokens([
                new paramType_1.default('bool'),
                new paramType_1.default('fixedArray', new paramType_1.default('array', new paramType_1.default('uint')), 2)
            ], [true, [[0, 1], [2, 3]]])).toEqual([
                new token_1.default('bool', true),
                new token_1.default('fixedArray', [
                    new token_1.default('array', [new token_1.default('uint', 0), new token_1.default('uint', 1)]),
                    new token_1.default('array', [new token_1.default('uint', 2), new token_1.default('uint', 3)])
                ])
            ]);
        });
    });
});
