"use strict";
// Copyright 2015-2019 Parity Technologies (UK) Ltd.
// This file is part of Parity.
//
// SPDX-License-Identifier: MIT
Object.defineProperty(exports, "__esModule", { value: true });
var sliceAs_1 = require("../../util/sliceAs");
var decoder_1 = require("../../decoder/decoder");
var decodedLog_1 = require("./decodedLog");
var decodedLogParam_1 = require("./decodedLogParam");
var eventParam_1 = require("./eventParam");
var signature_1 = require("../../util/signature");
var Event = /** @class */ (function () {
    function Event(abi) {
        this._inputs = eventParam_1.default.toEventParams(abi.inputs || []);
        this._anonymous = !!abi.anonymous;
        var _a = signature_1.eventSignature(abi.name, this.inputParamTypes()), id = _a.id, name = _a.name, signature = _a.signature;
        this._id = id;
        this._name = name;
        this._signature = signature;
    }
    Object.defineProperty(Event.prototype, "anonymous", {
        get: function () {
            return this._anonymous;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Event.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Event.prototype, "inputs", {
        get: function () {
            return this._inputs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Event.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Event.prototype, "signature", {
        get: function () {
            return this._signature;
        },
        enumerable: true,
        configurable: true
    });
    Event.prototype.inputParamTypes = function () {
        return this._inputs.map(function (input) { return input.kind; });
    };
    Event.prototype.inputParamNames = function () {
        return this._inputs.map(function (input) { return input.name; });
    };
    Event.prototype.indexedParams = function (indexed) {
        return this._inputs.filter(function (input) { return input.indexed === indexed; });
    };
    Event.prototype.decodeLog = function (topics, data) {
        var topicParams = this.indexedParams(true);
        var dataParams = this.indexedParams(false);
        var address = '';
        var toSkip;
        if (!this.anonymous) {
            address = sliceAs_1.asAddress(topics[0]);
            toSkip = 1;
        }
        else {
            toSkip = 0;
        }
        var topicTypes = topicParams.map(function (param) { return param.kind; });
        var flatTopics = topics
            .filter(function (topic, index) { return index >= toSkip; })
            .map(function (topic) {
            return topic.substr(0, 2) === '0x' ? topic.substr(2) : topic;
        })
            .join('');
        var topicTokens = decoder_1.default.decode(topicTypes, flatTopics);
        if (topicTokens.length !== topics.length - toSkip) {
            throw new Error('Invalid topic data');
        }
        var dataTypes = dataParams.map(function (param) { return param.kind; });
        var dataTokens = decoder_1.default.decode(dataTypes, data);
        var namedTokens = {};
        topicParams.forEach(function (param, index) {
            namedTokens[param.name || index] = topicTokens[index];
        });
        dataParams.forEach(function (param, index) {
            namedTokens[param.name || index] = dataTokens[index];
        });
        var inputParamTypes = this.inputParamTypes();
        var decodedParams = this.inputParamNames().map(function (name, index) {
            return new decodedLogParam_1.default(name, inputParamTypes[index], namedTokens[name || index]);
        });
        return new decodedLog_1.default(decodedParams, address);
    };
    return Event;
}());
exports.default = Event;
