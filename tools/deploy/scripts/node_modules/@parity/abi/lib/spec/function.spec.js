"use strict";
// Copyright 2015-2019 Parity Technologies (UK) Ltd.
// This file is part of Parity.
//
// SPDX-License-Identifier: MIT
Object.defineProperty(exports, "__esModule", { value: true });
var function_1 = require("./function");
var param_1 = require("./param");
var token_1 = require("../token");
describe('spec/Function', function () {
    var inputsArr = [
        { name: 'boolin', type: 'bool' },
        { name: 'stringin', type: 'string' }
    ];
    var outputsArr = [{ name: 'output', type: 'uint' }];
    var uint = new param_1.default('output', 'uint');
    var bool = new param_1.default('boolin', 'bool');
    var baseString = new param_1.default('stringin', 'string');
    var inputs = [bool, baseString];
    var outputs = [uint];
    var func = new function_1.default({
        name: 'test',
        inputs: inputsArr,
        outputs: outputsArr
    });
    describe('constructor', function () {
        it('returns signature correctly if name already contains it', function () {
            var func = new function_1.default({
                name: 'test(bool,string)',
                inputs: inputsArr,
                outputs: outputsArr
            });
            expect(func.name).toEqual('test');
            expect(func.id).toEqual('test(bool,string)');
            expect(func.signature).toEqual('02356205');
        });
        it('stores the parameters as received', function () {
            expect(func.name).toEqual('test');
            expect(func.constant).toBe(false);
            expect(func.inputs).toEqual(inputs);
            expect(func.outputs).toEqual(outputs);
        });
        it('matches empty inputs with []', function () {
            expect(new function_1.default({ name: 'test', outputs: outputsArr }).inputs).toEqual([]);
        });
        it('matches empty outputs with []', function () {
            expect(new function_1.default({ name: 'test', inputs: inputsArr }).outputs).toEqual([]);
        });
        it('sets the method signature', function () {
            expect(new function_1.default({ name: 'baz' }).signature).toEqual('a7916fac');
        });
        it('allows constant functions', function () {
            expect(new function_1.default({ name: 'baz', constant: true }).constant).toBe(true);
        });
    });
    describe('getters', function () {
        var abi = {
            name: 'test(bool,string)',
            inputs: inputsArr,
            outputs: outputsArr,
            type: 'function'
        };
        var func = new function_1.default(abi);
        it('returns the abi', function () {
            expect(func.abi).toEqual(abi);
        });
        it('returns the constant flag', function () {
            expect(func.constant).toBe(false);
        });
        it('returns the id', function () {
            expect(func.id).toEqual('test(bool,string)');
        });
        it('returns the inputs', function () {
            expect(func.inputs).toEqual(param_1.default.toParams(inputsArr));
        });
        it('returns the outputs', function () {
            expect(func.outputs).toEqual(param_1.default.toParams(outputsArr));
        });
        it('returns the payable flag', function () {
            expect(func.payable).toBe(false);
        });
    });
    describe('inputParamTypes', function () {
        it('retrieves the input types as received', function () {
            expect(func.inputParamTypes()).toEqual([bool.kind, baseString.kind]);
        });
    });
    describe('outputParamTypes', function () {
        it('retrieves the output types as received', function () {
            expect(func.outputParamTypes()).toEqual([uint.kind]);
        });
    });
    describe('decodeInput', function () {
        it('decodes the inputs correctly', function () {
            expect(func.decodeInput('0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000066a61636f67720000000000000000000000000000000000000000000000000000')).toEqual([
                {
                    _type: 'bool',
                    _value: true
                },
                {
                    _type: 'string',
                    _value: 'jacogr'
                }
            ]);
        });
    });
    describe('decodeOutput', function () {
        it('decodes the result correctly', function () {
            var result = func.decodeOutput('1111111111111111111111111111111111111111111111111111111111111111');
            // @ts-ignore toString doesn't take any args
            expect(result[0].value.toString(16)).toEqual('1111111111111111111111111111111111111111111111111111111111111111');
        });
    });
    describe('encodeCall', function () {
        it('encodes the call correctly', function () {
            var result = func.encodeCall([
                new token_1.default('bool', true),
                new token_1.default('string', 'jacogr')
            ]);
            expect(result).toEqual('023562050000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000066a61636f67720000000000000000000000000000000000000000000000000000');
        });
    });
});
