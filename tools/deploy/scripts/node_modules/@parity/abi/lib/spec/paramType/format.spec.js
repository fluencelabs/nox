"use strict";
// Copyright 2015-2019 Parity Technologies (UK) Ltd.
// This file is part of Parity.
//
// SPDX-License-Identifier: MIT
Object.defineProperty(exports, "__esModule", { value: true });
var format_1 = require("./format");
var paramType_1 = require("./paramType");
describe('spec/paramType/format', function () {
    describe('fromParamType', function () {
        it('errors on invalid types', function () {
            expect(function () {
                return format_1.fromParamType({
                    type: 'noMatch'
                });
            }).toThrow(/noMatch/);
        });
        describe('simple types', function () {
            it('converts address to address', function () {
                var pt = new paramType_1.default('address');
                expect(format_1.fromParamType(pt)).toEqual('address');
            });
            it('converts bool to bool', function () {
                var pt = new paramType_1.default('bool');
                expect(format_1.fromParamType(pt)).toEqual('bool');
            });
            it('converts bytes to bytes', function () {
                var pt = new paramType_1.default('bytes');
                expect(format_1.fromParamType(pt)).toEqual('bytes');
            });
            it('converts string to string', function () {
                var pt = new paramType_1.default('string');
                expect(format_1.fromParamType(pt)).toEqual('string');
            });
        });
        describe('length types', function () {
            it('converts int32 to int32', function () {
                var pt = new paramType_1.default('int', undefined, 32);
                expect(format_1.fromParamType(pt)).toEqual('int32');
            });
            it('converts uint64 to int64', function () {
                var pt = new paramType_1.default('uint', undefined, 64);
                expect(format_1.fromParamType(pt)).toEqual('uint64');
            });
            it('converts fixedBytes8 to bytes8', function () {
                var pt = new paramType_1.default('fixedBytes', undefined, 8);
                expect(format_1.fromParamType(pt)).toEqual('bytes8');
            });
        });
        describe('arrays', function () {
            it('converts string[2] to string[2]', function () {
                var pt = new paramType_1.default('fixedArray', new paramType_1.default('string'), 2);
                expect(format_1.fromParamType(pt)).toEqual('string[2]');
            });
            it('converts bool[] to bool[]', function () {
                var pt = new paramType_1.default('array', new paramType_1.default('bool'));
                expect(format_1.fromParamType(pt)).toEqual('bool[]');
            });
            it('converts bool[][2] to bool[][2]', function () {
                var pt = new paramType_1.default('fixedArray', new paramType_1.default('array', new paramType_1.default('bool')), 2);
                expect(format_1.fromParamType(pt)).toEqual('bool[][2]');
            });
            it('converts bool[2][] to bool[2][]', function () {
                var pt = new paramType_1.default('array', new paramType_1.default('fixedArray', new paramType_1.default('bool'), 2));
                expect(format_1.fromParamType(pt)).toEqual('bool[2][]');
            });
        });
    });
    describe('toParamType', function () {
        it('errors on invalid types', function () {
            expect(function () { return format_1.toParamType('noMatch'); }).toThrow(/noMatch/);
        });
        describe('simple mapping', function () {
            it('converts address to address', function () {
                var pt = format_1.toParamType('address');
                expect(pt.type).toEqual('address');
            });
            it('converts bool to bool', function () {
                var pt = format_1.toParamType('bool');
                expect(pt.type).toEqual('bool');
            });
            it('converts bytes to bytes', function () {
                var pt = format_1.toParamType('bytes');
                expect(pt.type).toEqual('bytes');
            });
            it('converts string to string', function () {
                var pt = format_1.toParamType('string');
                expect(pt.type).toEqual('string');
            });
        });
        describe('number', function () {
            it('converts int to int256', function () {
                var pt = format_1.toParamType('int');
                expect(pt.type).toEqual('int');
                expect(pt.length).toEqual(256);
            });
            it('converts uint to uint256', function () {
                var pt = format_1.toParamType('uint');
                expect(pt.type).toEqual('uint');
                expect(pt.length).toEqual(256);
            });
        });
        describe('sized types', function () {
            it('converts int32 to int32', function () {
                var pt = format_1.toParamType('int32');
                expect(pt.type).toEqual('int');
                expect(pt.length).toEqual(32);
            });
            it('converts uint16 to uint16', function () {
                var pt = format_1.toParamType('uint32');
                expect(pt.type).toEqual('uint');
                expect(pt.length).toEqual(32);
            });
            it('converts bytes8 to fixedBytes8', function () {
                var pt = format_1.toParamType('bytes8');
                expect(pt.type).toEqual('fixedBytes');
                expect(pt.length).toEqual(8);
            });
        });
        describe('arrays', function () {
            describe('fixed arrays', function () {
                it('creates fixed array', function () {
                    var pt = format_1.toParamType('bytes[8]');
                    if (!pt.subtype) {
                        throw new Error('No subtype.');
                    }
                    expect(pt.type).toEqual('fixedArray');
                    expect(pt.subtype.type).toEqual('bytes');
                    expect(pt.length).toEqual(8);
                });
                it('creates fixed arrays of fixed arrays', function () {
                    var pt = format_1.toParamType('bytes[45][3]');
                    if (!pt.subtype) {
                        throw new Error('No subtype.');
                    }
                    expect(pt.type).toEqual('fixedArray');
                    expect(pt.length).toEqual(3);
                    expect(pt.subtype.type).toEqual('fixedArray');
                    expect(pt.subtype.length).toEqual(45);
                    if (!pt.subtype.subtype) {
                        throw new Error('No subtype.');
                    }
                    expect(pt.subtype.subtype.type).toEqual('bytes');
                });
            });
            describe('dynamic arrays', function () {
                it('creates a dynamic array', function () {
                    var pt = format_1.toParamType('bytes[]');
                    if (!pt.subtype) {
                        throw new Error('No subtype.');
                    }
                    expect(pt.type).toEqual('array');
                    expect(pt.subtype.type).toEqual('bytes');
                });
                it('creates a dynamic array of dynamic arrays', function () {
                    var pt = format_1.toParamType('bool[][]');
                    if (!pt.subtype) {
                        throw new Error('No subtype.');
                    }
                    expect(pt.type).toEqual('array');
                    expect(pt.subtype.type).toEqual('array');
                    if (!pt.subtype.subtype) {
                        throw new Error('No subtype.');
                    }
                    expect(pt.subtype.subtype.type).toEqual('bool');
                });
            });
            describe('mixed arrays', function () {
                it('creates a fixed dynamic array', function () {
                    var pt = format_1.toParamType('bool[][3]');
                    if (!pt.subtype) {
                        throw new Error('No subtype.');
                    }
                    expect(pt.type).toEqual('fixedArray');
                    expect(pt.length).toEqual(3);
                    expect(pt.subtype.type).toEqual('array');
                    if (!pt.subtype.subtype) {
                        throw new Error('No subtype.');
                    }
                    expect(pt.subtype.subtype.type).toEqual('bool');
                });
                it('creates a dynamic fixed array', function () {
                    var pt = format_1.toParamType('bool[3][]');
                    if (!pt.subtype) {
                        throw new Error('No subtype.');
                    }
                    expect(pt.type).toEqual('array');
                    expect(pt.subtype.type).toEqual('fixedArray');
                    expect(pt.subtype.length).toEqual(3);
                    if (!pt.subtype.subtype) {
                        throw new Error('No subtype.');
                    }
                    expect(pt.subtype.subtype.type).toEqual('bool');
                });
            });
        });
    });
});
