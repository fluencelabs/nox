import { AbiObject, TokenValue } from '../types';
import Constructor from './constructor';
import Event from './event/event';
import Func from './function';
import ParamType from './paramType';
import Token from '../token';
declare class Interface {
    private _interface;
    constructor(abi: AbiObject);
    static encodeTokens(paramTypes: ParamType[], values: TokenValue[]): Token[];
    static parseABI(abi: AbiObject): (Constructor | Event | Func)[];
    readonly interface: (Constructor | Event | Func)[];
    readonly constructors: (Constructor | Event | Func)[];
    readonly events: (Constructor | Event | Func)[];
    readonly functions: (Constructor | Event | Func)[];
    encodeTokens(paramTypes: ParamType[], values: TokenValue[]): Token[];
}
export default Interface;
