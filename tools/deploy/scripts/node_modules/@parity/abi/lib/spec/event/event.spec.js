"use strict";
// Copyright 2015-2019 Parity Technologies (UK) Ltd.
// This file is part of Parity.
//
// SPDX-License-Identifier: MIT
Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_js_1 = require("bignumber.js");
var event_1 = require("./event");
var eventParam_1 = require("./eventParam");
var decodedLogParam_1 = require("./decodedLogParam");
var paramType_1 = require("../paramType");
var token_1 = require("../../token");
describe('spec/event/Event', function () {
    var inputArr = [
        { name: 'a', type: 'bool' },
        { name: 'b', type: 'uint', indexed: true }
    ];
    var inputs = [
        new eventParam_1.default('a', 'bool', false),
        new eventParam_1.default('b', 'uint', true)
    ];
    var event = new event_1.default({
        name: 'test',
        inputs: inputArr,
        anonymous: true,
        type: 'event'
    });
    describe('constructor', function () {
        it('stores the parameters as received', function () {
            expect(event.name).toEqual('test');
            expect(event.inputs).toEqual(inputs);
            expect(event.anonymous).toBe(true);
        });
        it('matches empty inputs with []', function () {
            expect(new event_1.default({ name: 'test' }).inputs).toEqual([]);
        });
        it('sets the event signature', function () {
            expect(new event_1.default({ name: 'baz' }).signature).toEqual('a7916fac4f538170f7cd12c148552e2cba9fcd72329a2dd5b07a6fa906488ddf');
        });
    });
    describe('inputParamTypes', function () {
        it('returns all the types', function () {
            expect(event.inputParamTypes()).toEqual([
                new paramType_1.default('bool'),
                new paramType_1.default('uint', undefined, 256, true)
            ]);
        });
    });
    describe('inputParamNames', function () {
        it('returns all the names', function () {
            expect(event.inputParamNames()).toEqual(['a', 'b']);
        });
    });
    describe('indexedParams', function () {
        it('returns all indexed parameters (indexed)', function () {
            expect(event.indexedParams(true)).toEqual([inputs[1]]);
        });
        it('returns all indexed parameters (non-indexed)', function () {
            expect(event.indexedParams(false)).toEqual([inputs[0]]);
        });
    });
    describe('decodeLog', function () {
        it('decodes an event', function () {
            var event = new event_1.default({
                name: 'foo',
                inputs: [
                    { name: 'a', type: 'int' },
                    { name: 'b', type: 'int', indexed: true },
                    { name: 'c', type: 'address' },
                    { name: 'd', type: 'address', indexed: true }
                ]
            });
            var decoded = event.decodeLog([
                '0000000000000000000000004444444444444444444444444444444444444444',
                '0000000000000000000000000000000000000000000000000000000000000002',
                '0000000000000000000000001111111111111111111111111111111111111111'
            ], '00000000000000000000000000000000000000000000000000000000000000030000000000000000000000002222222222222222222222222222222222222222');
            expect(decoded.address).toEqual('0x4444444444444444444444444444444444444444');
            expect(decoded.params).toEqual([
                new decodedLogParam_1.default('a', new paramType_1.default('int', undefined, 256), new token_1.default('int', new bignumber_js_1.default(3))),
                new decodedLogParam_1.default('b', new paramType_1.default('int', undefined, 256, true), new token_1.default('int', new bignumber_js_1.default(2))),
                new decodedLogParam_1.default('c', new paramType_1.default('address'), new token_1.default('address', '0x2222222222222222222222222222222222222222')),
                new decodedLogParam_1.default('d', new paramType_1.default('address', undefined, 0, true), new token_1.default('address', '0x1111111111111111111111111111111111111111'))
            ]);
        });
        it('decodes an anonymous event', function () {
            var event = new event_1.default({
                name: 'foo',
                inputs: [{ name: 'a', type: 'int' }],
                anonymous: true
            });
            var decoded = event.decodeLog([], '0000000000000000000000000000000000000000000000000000000000000003');
            expect(decoded.address).toBeFalsy();
            expect(decoded.params).toEqual([
                new decodedLogParam_1.default('a', new paramType_1.default('int', undefined, 256), new token_1.default('int', new bignumber_js_1.default(3)))
            ]);
        });
        it('throws on invalid topics', function () {
            var event = new event_1.default({
                name: 'foo',
                inputs: [{ name: 'a', type: 'int' }],
                anonymous: true
            });
            expect(function () {
                return event.decodeLog(['0000000000000000000000004444444444444444444444444444444444444444'], '0000000000000000000000000000000000000000000000000000000000000003');
            }).toThrow(/Invalid/);
        });
    });
    describe('getters', function () {
        it('has the anonymous flag', function () {
            expect(event.anonymous).toBe(true);
        });
        it('has the id', function () {
            expect(event.id).toEqual('test(bool,uint256)');
        });
        it('has the inputs', function () {
            expect(event.inputs).toEqual(eventParam_1.default.toEventParams(inputArr));
        });
        it('has the name', function () {
            expect(event.name).toEqual('test');
        });
        it('has the signature', function () {
            expect(event.signature).toEqual('c6a64c1fca84a416d1cb4ffc520e996e959fdf982da96a0e5449b17c9532ed4e');
        });
    });
});
