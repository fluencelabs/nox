import BigNumber from 'bignumber.js';
import Token from './token';
export interface AbiInput {
    indexed?: boolean;
    name?: string;
    type: TokenTypeEnum;
}
export declare type AbiItemType = 'function' | 'event' | 'constructor' | 'fallback';
export declare type MediateType = 'raw' | 'prefixed' | 'fixedArray' | 'array';
export declare type Slices = string[] | null | undefined;
export declare type TokenTypeEnum = 'address' | 'bool' | 'bytes' | 'bytes1' | 'bytes2' | 'bytes3' | 'bytes4' | 'bytes5' | 'bytes6' | 'bytes7' | 'bytes8' | 'bytes9' | 'bytes10' | 'bytes11' | 'bytes12' | 'bytes13' | 'bytes14' | 'bytes15' | 'bytes16' | 'bytes17' | 'bytes18' | 'bytes19' | 'bytes20' | 'bytes21' | 'bytes22' | 'bytes23' | 'bytes24' | 'bytes25' | 'bytes26' | 'bytes27' | 'bytes28' | 'bytes29' | 'bytes30' | 'bytes31' | 'bytes32' | 'string' | 'int' | 'int8' | 'int16' | 'int32' | 'int64' | 'int128' | 'int256' | 'uint' | 'uint8' | 'uint16' | 'uint32' | 'uint64' | 'uint128' | 'uint256' | 'fixedBytes' | 'fixedArray' | 'array';
export declare type AddressValue = string;
export declare type BoolValue = boolean | string;
export declare type BytesValue = string | number[];
export declare type StringValue = string;
export declare type IntValue = number | string | BigNumber;
export declare type UintValue = IntValue;
export declare type FixedBytesValue = BytesValue;
export declare type FixedArrayValue = (boolean | string | number | BigNumber | Token)[];
export declare type ArrayValue = FixedArrayValue[];
export declare type TokenValue = AddressValue | Boolean | BytesValue | StringValue | IntValue | UintValue | FixedBytesValue | FixedArrayValue | ArrayValue;
export interface AbiItem {
    anonymous?: boolean;
    constant?: boolean;
    inputs?: AbiInput[];
    name?: string;
    payable?: boolean;
    outputs?: AbiInput[];
    type?: AbiItemType;
}
export declare type AbiObject = AbiItem[];
