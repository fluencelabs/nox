"use strict";
// Copyright 2015-2019 Parity Technologies (UK) Ltd.
// This file is part of Parity.
//
// SPDX-License-Identifier: MIT
Object.defineProperty(exports, "__esModule", { value: true });
var pad_1 = require("../util/pad");
var TYPES = ['raw', 'prefixed', 'fixedArray', 'array'];
var Mediate = /** @class */ (function () {
    function Mediate(type, value) {
        Mediate.validateType(type);
        this._type = type;
        this._value = value;
    }
    Mediate.offsetFor = function (mediates, position) {
        if (position < 0 || position >= mediates.length) {
            throw new Error("Invalid position " + position + " specified for Mediate.offsetFor");
        }
        var initLength = mediates.reduce(function (total, mediate) {
            return total + mediate.initLength();
        }, 0);
        return mediates.slice(0, position).reduce(function (total, mediate) {
            return total + mediate.closingLength();
        }, initLength);
    };
    Mediate.validateType = function (type) {
        if (TYPES.filter(function (_type) { return type === _type; }).length) {
            return true;
        }
        throw new Error("Invalid type " + type + " received for Mediate.validateType");
    };
    Mediate.prototype.initLength = function () {
        switch (this._type) {
            case 'raw':
                return this._value.length / 2;
            case 'array':
            case 'prefixed':
                return 32;
            case 'fixedArray':
                return this._value.reduce(function (total, mediate) {
                    return total + mediate.initLength();
                }, 0);
        }
    };
    Mediate.prototype.closingLength = function () {
        switch (this._type) {
            case 'raw':
                return 0;
            case 'prefixed':
                return this._value.length / 2;
            case 'array':
                return this._value.reduce(function (total, mediate) {
                    return total + mediate.initLength();
                }, 32);
            case 'fixedArray':
                return this._value.reduce(function (total, mediate) {
                    return total + mediate.initLength() + mediate.closingLength();
                }, 0);
        }
    };
    Mediate.prototype.init = function (suffixOffset) {
        var _this = this;
        switch (this._type) {
            case 'raw':
                return this._value;
            case 'fixedArray':
                return this._value
                    .map(function (mediate, index) {
                    // @ts-ignore toString doesn't take any args
                    return mediate
                        .init(Mediate.offsetFor(_this._value, index))
                        .toString(16);
                })
                    .join('');
            case 'prefixed':
            case 'array':
                return pad_1.padU32(suffixOffset);
        }
    };
    Mediate.prototype.closing = function (offset) {
        var _this = this;
        switch (this._type) {
            case 'raw':
                return '';
            case 'prefixed':
                return this._value;
            case 'fixedArray':
                return this._value
                    .map(function (mediate, index) {
                    // @ts-ignore toString doesn't take any args
                    return mediate
                        .closing(Mediate.offsetFor(_this._value, index))
                        .toString(16);
                })
                    .join('');
            case 'array':
                var prefix = pad_1.padU32(this._value.length);
                var inits = this._value
                    .map(function (mediate, index) {
                    // @ts-ignore toString doesn't take any args
                    return mediate
                        .init(offset + Mediate.offsetFor(_this._value, index) + 32)
                        .toString(16);
                })
                    .join('');
                var closings = this._value
                    .map(function (mediate, index) {
                    // @ts-ignore toString doesn't take any args
                    return mediate
                        .closing(offset + Mediate.offsetFor(_this._value, index))
                        .toString(16);
                })
                    .join('');
                return "" + prefix + inits + closings;
        }
    };
    Object.defineProperty(Mediate.prototype, "type", {
        get: function () {
            return this._type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Mediate.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    return Mediate;
}());
exports.default = Mediate;
