"use strict";
// Copyright 2015-2019 Parity Technologies (UK) Ltd.
// This file is part of Parity.
//
// SPDX-License-Identifier: MIT
Object.defineProperty(exports, "__esModule", { value: true });
var mediate_1 = require("./mediate");
describe('encoder/Mediate', function () {
    var LONG15 = '1234567890abcdef000000000000000000000000000000000000000000000000';
    var DOUBLE15 = "" + LONG15 + LONG15;
    var ARRAY = [new mediate_1.default('raw', DOUBLE15), new mediate_1.default('raw', LONG15)];
    describe('validateType', function () {
        it('validates raw', function () {
            expect(mediate_1.default.validateType('raw')).toBe(true);
        });
        it('validates prefixed', function () {
            expect(mediate_1.default.validateType('prefixed')).toBe(true);
        });
        it('validates fixedArray', function () {
            expect(mediate_1.default.validateType('fixedArray')).toBe(true);
        });
        it('validates array', function () {
            expect(mediate_1.default.validateType('array')).toBe(true);
        });
        it('throws an error on invalid types', function () {
            expect(function () { return mediate_1.default.validateType('noMatch'); }).toThrow(/noMatch/);
        });
    });
    describe('offsetFor', function () {
        it('thows an error when offset < 0', function () {
            expect(function () { return mediate_1.default.offsetFor([new mediate_1.default('raw', 1)], -1); }).toThrow(/Invalid position/);
        });
        it('throws an error when offset >= length', function () {
            expect(function () { return mediate_1.default.offsetFor([new mediate_1.default('raw', 1)], 1); }).toThrow(/Invalid position/);
        });
    });
    describe('constructor', function () {
        it('throws an error on invalid types', function () {
            expect(function () { return new mediate_1.default('noMatch', '1'); }).toThrow(/noMatch/);
        });
        it('sets the type of the object', function () {
            expect(new mediate_1.default('raw', '1').type).toEqual('raw');
        });
        it('sets the value of the object', function () {
            expect(new mediate_1.default('raw', '1').value).toEqual('1');
        });
    });
    describe('initLength', function () {
        it('returns correct variable byte length for raw', function () {
            expect(new mediate_1.default('raw', DOUBLE15).initLength()).toEqual(64);
        });
        it('returns correct fixed byte length for array', function () {
            expect(new mediate_1.default('array', [1, 2, 3, 4]).initLength()).toEqual(32);
        });
        it('returns correct fixed byte length for prefixed', function () {
            expect(new mediate_1.default('prefixed', 0).initLength()).toEqual(32);
        });
        it('returns correct variable byte length for fixedArray', function () {
            expect(new mediate_1.default('fixedArray', ARRAY).initLength()).toEqual(96);
        });
    });
    describe('closingLength', function () {
        it('returns 0 byte length for raw', function () {
            expect(new mediate_1.default('raw', DOUBLE15).closingLength()).toEqual(0);
        });
        it('returns prefix + size for prefixed', function () {
            expect(new mediate_1.default('prefixed', DOUBLE15).closingLength()).toEqual(64);
        });
        it('returns prefix + size for array', function () {
            expect(new mediate_1.default('array', ARRAY).closingLength()).toEqual(128);
        });
        it('returns total length for fixedArray', function () {
            expect(new mediate_1.default('fixedArray', ARRAY).closingLength()).toEqual(96);
        });
    });
});
