"use strict";
// Copyright 2015-2018 Parity Technologies (UK) Ltd.
// This file is part of Parity.
// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.
/* eslint-disable no-unused-expressions */
var createHttpApi = require('../../test/e2e/ethapi').createHttpApi;
var _a = require('../../test/types'), isAddress = _a.isAddress, isBoolean = _a.isBoolean;
describe.skip('ethapi.personal', function () {
    var ethapi = createHttpApi();
    var password = 'P@55word';
    var address;
    describe('newAccount', function () {
        it('creates a new account', function () {
            return ethapi.personal.newAccount(password).then(function (_address) {
                address = _address;
                expect(isAddress(address)).to.be.ok;
            });
        });
    });
    describe('listAccounts', function () {
        it('has the newly-created account', function () {
            return ethapi.personal.listAccounts(password).then(function (accounts) {
                expect(accounts.filter(function (_address) { return _address === address; })).to.deep.equal([address]);
                accounts.forEach(function (account) {
                    expect(isAddress(account)).to.be.true;
                });
            });
        });
    });
    describe('unlockAccount', function () {
        it('unlocks the newly-created account', function () {
            return ethapi.personal.unlockAccount(address, password).then(function (result) {
                expect(isBoolean(result)).to.be.true;
                expect(result).to.be.true;
            });
        });
    });
});
