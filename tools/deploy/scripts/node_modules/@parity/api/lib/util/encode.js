"use strict";
// Copyright 2015-2018 Parity Technologies (UK) Ltd.
// This file is part of Parity.
//
// SPDX-License-Identifier: MIT
Object.defineProperty(exports, "__esModule", { value: true });
var abi_1 = require("@parity/abi");
var function_1 = require("@parity/abi/lib/spec/function");
var decode_1 = require("./decode");
var format_1 = require("./format");
var sha3_1 = require("./sha3");
/**
 * Encode a method call.
 *
 * @param methodAbi - The method's ABI.
 * @param values - The values that are passed to this method.
 */
exports.encodeMethodCallAbi = function (methodAbi, values) {
    if (values === void 0) { values = []; }
    var func = new function_1.default(methodAbi);
    var tokens = abi_1.default.encodeTokens(func.inputParamTypes(), values);
    var call = func.encodeCall(tokens);
    return "0x" + call;
};
/**
 * Formats correctly a method call to be passed to {@link encodeMethodCallAbi}.
 *
 * @param methodName - The method name to encode.
 * @param inputTypes - The method's inputs types.
 * @param data - The data that is passed to this method.
 */
exports.abiEncode = function (methodName, inputTypes, data) {
    var result = exports.encodeMethodCallAbi({
        name: methodName || '',
        type: 'function',
        inputs: inputTypes.map(function (type) {
            return { type: type };
        })
    }, data);
    return result;
};
/**
 * Unencode a method.
 *
 * @param abi - The Abi to unencode.
 * @param data - The data passed to this method.
 */
exports.abiUnencode = function (abi, data) {
    var callsig = data.substr(2, 8);
    var op = abi.find(function (field) {
        return (field.type === 'function' &&
            !!field.inputs &&
            exports.abiSignature(field.name, field.inputs.map(function (input) { return input.type; })).substr(2, 8) === callsig);
    });
    if (!op || !op.inputs) {
        console.warn("Unknown function ID: " + callsig);
        return null;
    }
    var argsByIndex = decode_1.abiDecode(op.inputs.map(function (field) { return field.type; }), '0x' + data.substr(10)).map(function (value, index) {
        return format_1.cleanupValue(value, op.inputs[index].type);
    } // TODO Remove `as any` here
    );
    var argsByName = op.inputs.reduce(function (result, field, index) {
        if (!field.name) {
            throw new Error("abiUnencode: input at index " + index + " with type " + field.type + " doesn't have a name.");
        }
        result[field.name] = argsByIndex[index];
        return result;
    }, {});
    return [op.name, argsByName, argsByIndex];
};
/**
 * Get the signature of an Abi method.
 *
 * @param name - The name of the method.
 * @param inputs - The inputs' types of this method.
 */
exports.abiSignature = function (name, inputs) {
    return sha3_1.sha3(name + "(" + inputs.join() + ")");
};
