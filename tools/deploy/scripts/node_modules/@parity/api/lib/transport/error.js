"use strict";
// Copyright 2015-2018 Parity Technologies (UK) Ltd.
// This file is part of Parity.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.
var ExtendableError = require('es6-error');
var ERROR_CODES = {
    UNSUPPORTED_REQUEST: -32000,
    NO_WORK: -32001,
    NO_AUTHOR: -32002,
    NO_NEW_WORK: -32003,
    NO_WORK_REQUIRED: -32004,
    NOT_ENOUGH_DATA: -32006,
    UNKNOWN_ERROR: -32009,
    TRANSACTION_ERROR: -32010,
    EXECUTION_ERROR: -32015,
    EXCEPTION_ERROR: -32016,
    ACCOUNT_LOCKED: -32020,
    PASSWORD_INVALID: -32021,
    ACCOUNT_ERROR: -32023,
    SIGNER_DISABLED: -32030,
    DAPPS_DISABLED: -32031,
    NETWORK_DISABLED: -32035,
    REQUEST_REJECTED: -32040,
    REQUEST_REJECTED_LIMIT: -32041,
    REQUEST_NOT_FOUND: -32042,
    COMPILATION_ERROR: -32050,
    ENCRYPTION_ERROR: -32055,
    FETCH_ERROR: -32060,
    INVALID_PARAMS: -32602
};
var TransportError = /** @class */ (function (_super) {
    __extends(TransportError, _super);
    function TransportError(method, code, message) {
        var _this = this;
        var m = method + ": " + code + ": " + message;
        _this = _super.call(this, m) || this;
        _this.code = code;
        _this.type = Object
            .keys(ERROR_CODES)
            .find(function (key) { return ERROR_CODES[key] === code; }) || '';
        _this.method = method;
        _this.text = message;
        return _this;
    }
    return TransportError;
}(ExtendableError));
TransportError.ERROR_CODES = ERROR_CODES;
TransportError.requestRejected = function (method) {
    if (method === void 0) { method = null; }
    return new TransportError(method, ERROR_CODES.REQUEST_REJECTED, 'Request has been rejected.');
};
module.exports = TransportError;
