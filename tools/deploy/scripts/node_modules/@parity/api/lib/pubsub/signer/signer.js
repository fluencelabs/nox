"use strict";
// Copyright 2015-2018 Parity Technologies (UK) Ltd.
// This file is part of Parity.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.
var PubsubBase = require('../pubsubBase');
var outSignerRequest = require('../../format/output').outSignerRequest;
var Signer = /** @class */ (function (_super) {
    __extends(Signer, _super);
    function Signer(provider) {
        var _this = _super.call(this, provider) || this;
        _this._api = {
            subscribe: 'signer_subscribePending',
            unsubscribe: 'signer_unsubscribePending',
            subscription: 'signer_pending'
        };
        return _this;
    }
    Signer.prototype.pendingRequests = function (callback) {
        return this.addListener(this._api, null, function (error, data) {
            error
                ? callback(error)
                : callback(null, data.map(outSignerRequest));
        });
    };
    Signer.prototype.requestsToConfirm = function (callback) {
        return this.pendingRequests(callback);
    };
    return Signer;
}(PubsubBase));
module.exports = Signer;
