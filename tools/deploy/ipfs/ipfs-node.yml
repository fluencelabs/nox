version: '3.4'

services:
  ipfs:
    container_name: ipfs
    image: ipfs/go-ipfs:release
    ports:
          - "4101:4001" # ipfs swarm
#         - "5101:5001" # expose if needed/wanted
#         - "8180:8080" # exposes if needed/wanted
    volumes:
      - ./.ipfs-cluster/ipfs:/data/ipfs

  # cluster1 bootstraps to cluster0 if not bootstrapped before
  cluster-node:
    container_name: cluster-node
    image: ipfs/ipfs-cluster:latest
    depends_on:
      - ipfs
    environment:
      CLUSTER_SECRET: ${CLUSTER_SECRET} # From shell variable
      IPFS_API: /dns4/ipfs/tcp/5001
    ports:
          - "9194:9094" # API
          - "9196:9096" # Cluster IPFS Proxy endpoint
          - "9195:9095" 
    volumes:
      - ./.ipfs-cluster/cluster:/data/ipfs-cluster
    entrypoint:
      - "/sbin/tini"
      - "--"
    # Translation: if state folder does not exist, find $IPFS_BOOTSTRAPPER_ADDR id and bootstrap
    # to it.
    command: >-
      sh -c '
        cmd="daemon --upgrade"
        bootstrapper="/dns4/$IPFS_BOOTSTRAPPER_ADDR"
        if [ ! -d /data/ipfs-cluster/raft ]; then
          while ! ipfs-cluster-ctl --host $$bootstrapper/tcp/9094 id; do
            sleep 1
          done
          pid=`ipfs-cluster-ctl --host $$bootstrapper/tcp/9094 id | grep -o -E "^(\w+)"`
          sleep 10
          cmd="daemon --bootstrap $$bootstrapper/tcp/9096/ipfs/$$pid"
        fi
        exec /usr/local/bin/entrypoint.sh $$cmd
      '

# For adding more peers, copy PEER 1 and rename things to ipfs2, cluster2.
# Keep bootstrapping to cluster0.