[workspace]
resolver = "2"
members = [
    "crates/libp2p",
    "crates/control-macro",
    "crates/waiting-queues",
    "crates/local-vm",
    "crates/uuid-utils",
    "crates/test-utils",
    "crates/fs-utils",
    "crates/log-utils",
    "crates/config-utils",
    "crates/service-modules",
    "crates/ivalue-utils",
    "crates/particle-args",
    "crates/json-utils",
    "crates/server-config",
    "crates/cid-utils",
    "crates/kademlia",
    "crates/async-unlock",
    "crates/now-millis",
    "crates/toml-utils",
    "crates/air-interpreter-fs",
    "crates/created-swarm",
    "crates/toy-vms",
    "crates/connected-client",
    "crates/test-constants",
    "crates/peer-metrics",
    "crates/spell-event-bus",
    "crates/spell-service-api",
    "crates/workers",
    "crates/health",
    "sorcerer",
    "crates/nox-tests",
    "crates/subnet-resolver",
    "nox",
    "aquamarine",
    "particle-protocol",
    "particle-services",
    "particle-builtins",
    "particle-modules",
    "connection-pool",
    "spell-storage",
    "particle-execution",
    "crates/system-services",
    "crates/chain-listener",
    "crates/hex-utils",
    "crates/chain-data"
]
exclude = [
    "nox/tests/tetraplets",
]

[workspace.dependencies]
fluence-libp2p = { path = "crates/libp2p" }
control-macro = { path = "crates/control-macro" }
waiting-queues = { path = "crates/waiting-queues" }
local-vm = { path = "crates/local-vm" }
uuid-utils = { path = "crates/uuid-utils" }
test-utils = { path = "crates/test-utils" }
fs-utils = { path = "crates/fs-utils" }
log-utils = { path = "crates/log-utils" }
config-utils = { path = "crates/config-utils" }
service-modules = { path = "crates/service-modules" }
ivalue-utils = { path = "crates/ivalue-utils" }
particle-args = { path = "crates/particle-args" }
json-utils = { path = "crates/json-utils" }
server-config = { path = "crates/server-config" }
kademlia = { path = "crates/kademlia" }
async-unlock = { path = "crates/async-unlock" }
now-millis = { path = "crates/now-millis" }
toml-utils = { path = "crates/toml-utils" }
air-interpreter-fs = { path = "crates/air-interpreter-fs" }
created-swarm = { path = "crates/created-swarm" }
toy-vms = { path = "crates/toy-vms" }
connected-client = { path = "crates/connected-client" }
test-constants = { path = "crates/test-constants" }
peer-metrics = { path = "crates/peer-metrics" }
spell-event-bus = { path = "crates/spell-event-bus" }
spell-service-api = { path = "crates/spell-service-api" }
workers = { path = "crates/workers" }
cid-utils = { path = "crates/cid-utils" }
sorcerer = { path = "sorcerer" }
nox = { path = "nox" }
aquamarine = { path = "aquamarine" }
particle-protocol = { path = "particle-protocol" }
particle-services = { path = "particle-services" }
particle-builtins = { path = "particle-builtins" }
particle-modules = { path = "particle-modules" }
connection-pool = { path = "connection-pool" }
spell-storage = { path = "spell-storage" }
particle-execution = { path = "particle-execution" }
system-services = { path = "crates/system-services" }
health = { path = "crates/health" }
subnet-resolver = { path = "crates/subnet-resolver" }
hex-utils = { path = "crates/hex-utils"}
chain-data = { path = "crates/chain-data"}
chain-listener = { path = "crates/chain-listener"}

# spell
fluence-spell-dtos = "=0.6.9"
fluence-spell-distro = "=0.6.9"

# marine
fluence-app-service = { version = "0.31.1" }
marine-utils = "0.5.0"
marine-it-parser = "0.15.1"

# avm
avm-server = { version = "=0.55.1-feat-intermediate-marine-update-f3e4695-4194-1.0", registry = "fluence" }
air-interpreter-wasm = { version = "=0.55.1-feat-intermediate-marine-update-f3e4695-4194-1.0", registry = "fluence" }

# libp2p
libp2p = { version = "0.53.2", features = ["noise", "tcp", "dns", "websocket", "yamux", "tokio", "kad", "ping", "identify", "macros"] }
libp2p-core = { version = "0.41.2", default-features = false, features = ["secp256k1"] }
libp2p-metrics = "0.14.1"
libp2p-noise = "0.44.0"
libp2p-mplex = "0.41.0"
libp2p-swarm = "0.44.1"
libp2p-identity = "0.2.8"
libp2p-connection-limits = "0.3.1"
libp2p-kad = "0.45.3"
multihash = "0.19.1"
prometheus-client = "0.22.0"

eyre = "0.6.11"
base64 = "0.21.7"
bs58 = "0.5.0"
fluence-keypair = "0.10.4"
parking_lot = "0.12.1"
tokio = "1.35.0"
tokio-stream = "0.1.14"
tokio-util = "0.7.10"
uuid = { version = "1.7.0", features = ["v4"] }
derivative = "2.2.0"
serde_json = { version = "1.0.111", features = ["preserve_order"] }
fstrings = "0.2.3"
maplit = "1.0.2"
log = "0.4.20"
tracing = { version = "0.1.40", default-features = false, features = ["log"] }
tracing-subscriber = "0.3.18"
console-subscriber = "0.2.0"
futures = "0.3.30"
thiserror = "1.0.56"
serde = "1.0.195"
toml = "0.5.10"
itertools = "0.12.0"
humantime-serde = "1.1.1"
cid = "0.11.0"
libipld = "0.16.0"
axum = "0.7.4"
reqwest = "0.11.22"
once_cell = "1.19.0"
tempfile = "3.9.0"
hex = "0.4.3"
ethabi = "18.0.0"
jsonrpsee = "0.21.0"
blake3 = "1.5.0"
rand = "0.8.5"

# Enable a small amount of optimization in debug mode
[profile.dev]
opt-level = 1

# Enable high optimizations for dependencies, but not for our code:
[profile.dev.package."*"]
opt-level = 3
codegen-units = 256

[profile.dev.package.clap]
debug-assertions = false

[profile.release]
strip = true
lto = false
codegen-units = 1 # Reduce number of codegen units to increase optimizations

[profile.profiling]
inherits = "release"
debug = true
strip = false
lto = false
