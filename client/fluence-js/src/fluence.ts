/*
 * Copyright 2020 Fluence Labs Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import * as PeerId from "peer-id";
import Multiaddr from "multiaddr"
import {FluenceClient} from "./fluenceClient";
import * as log from "loglevel";
import {LogLevelDesc} from "loglevel";
import {build} from "./particle";
import {registerService} from "./globalState";
import {Service} from "./service";

log.setLevel('info')

export default class Fluence {

    static setLogLevel(level: LogLevelDesc): void {
        log.setLevel(level);
    }

    /**
     * Generates new peer id with Ed25519 private key.
     */
    static async generatePeerId(): Promise<PeerId> {
        return await PeerId.create({keyType: "Ed25519"});
    }

    /**
     * Connect to Fluence node.
     *
     * @param multiaddr must contain host peer id
     * @param peerId your peer id. Should be with a private key. Could be generated by `generatePeerId()` function
     */
    static async connect(multiaddr: string | Multiaddr, peerId: PeerId): Promise<FluenceClient> {
        let client = new FluenceClient(peerId);

        await client.connect(multiaddr);

        return client;
    }
}

declare global {
    interface Window {
        Fluence: Fluence;
        test: any
    }
}

async function test() {
    let pid = await Fluence.generatePeerId()
    let cl = await Fluence.connect("/ip4/138.197.177.2/tcp/9001/ws/p2p/12D3KooWEXNUbCXooUwHrHBbrmjsrpHXoEphPwbjQXEGyzbqKnE9", pid)

    let service = new Service("test")
    service.registerFunction("test", (args: any[]) => {
        console.log("called: " + args)
        return {}
    })
    registerService(service);

    let script = `(call ( "${pid.toB58String()}" ("test" "test") (a b c d) result))`

    let data: Map<string, any> = new Map();
    data.set("a", "some a")
    data.set("b", "some b")
    data.set("c", "some c")
    data.set("d", "some d")

    let particle = await build(pid, script, data, 30000)
    await cl.sendParticle(particle)
}

window.Fluence = Fluence;
window.test = test;
