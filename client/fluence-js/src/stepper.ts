/*
 * Copyright 2020 Fluence Labs Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {toByteArray} from "base64-js";
import * as aqua from "./aqua"

import {service} from "./service";
import {getInt32Memory0, getStringFromWasm0, passStringToWasm0, WASM_VECTOR_LEN} from "./aqua";
import PeerId from "peer-id";
import log from "loglevel";
import {wasmBs64} from "@fluencelabs/aquamarine-stepper";

export type Stepper = (init_user_id: string, script: string, prev_data: string, data: string) => string

export async function instantiateStepper(pid: PeerId): Promise<Stepper> {
    // Fetch our Wasm File
    const arr = toByteArray(wasmBs64)

    let wasm: any = undefined;

    const importObject = {
        // __wbg_callserviceimpl_c0ca292e3c8c0c97 this is a function generated by bindgen. Could be changed.
        // If so, an error with a new name will be occurred after wasm initialization.
        "./aquamarine_client_bg.js": { __wbg_callserviceimpl_7d3cf77a2722659e: (arg0: any, arg1: any, arg2: any, arg3: any, arg4: any, arg5: any, arg6: any) => {
                try {
                    let serviceId = getStringFromWasm0(wasm, arg1, arg2)
                    let fnName = getStringFromWasm0(wasm, arg3, arg4)
                    let args = getStringFromWasm0(wasm, arg5, arg6);
                    var ret = service(serviceId, fnName, args);
                    let retStr = JSON.stringify(ret)
                    var ptr0 = passStringToWasm0(wasm, retStr, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
                    var len0 = WASM_VECTOR_LEN;
                    getInt32Memory0(wasm)[arg0 / 4 + 1] = len0;
                    getInt32Memory0(wasm)[arg0 / 4 + 0] = ptr0;
                } finally {
                    wasm.__wbindgen_free(arg1, arg2);
                    wasm.__wbindgen_free(arg3, arg4);
                    wasm.__wbindgen_free(arg5, arg6);
                }
            },
            __wbg_getcurrentpeeridimpl_154ce1848a306ff5: (arg0: any) => {
                var ret = pid.toB58String();
                var ptr0 = passStringToWasm0(wasm, ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
                var len0 = WASM_VECTOR_LEN;
                getInt32Memory0(wasm)[arg0 / 4 + 1] = len0;
                getInt32Memory0(wasm)[arg0 / 4 + 0] = ptr0;
            }
            },
        "host": { log_utf8_string: (level: any, target: any, offset: any, size: any) => {
                try {
                    let str = getStringFromWasm0(wasm, offset, size)

                    switch (level) {
                        case 1:
                            log.error(str)
                            break;
                        case 2:
                            log.warn(str)
                            break;
                        case 3:
                            log.info(str)
                            break;
                        case 4:
                            log.debug(str)
                            break;
                        case 5:
                            // we don't want a trace in trace logs
                            log.debug(str)
                            break;
                    }
                } finally {
                }
            }
        }
    };

    let module1 = await WebAssembly.compile(arr);
    let webAssemblyInstantiatedSource = await WebAssembly.instantiate(module1, {
        ...importObject
    });

    wasm = webAssemblyInstantiatedSource.exports

    wasm.main();

    let func = (init_user_id: string, script: string, prev_data: string, data: string) => {
        return aqua.invoke(wasm, init_user_id, script, prev_data, data)
    }

    return func
}
