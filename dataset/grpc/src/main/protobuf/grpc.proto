syntax = "proto3";

package fluence.dataset;

message DatasetInfo {
    // dataset id - acctually kademlia key of the contract
    bytes id = 1;
    // expected dataset version
    int64 version = 2;
}

// BtreeCallback
message AskNextChildIndex {
    repeated bytes keys = 1;
    repeated bytes childsChecksums = 2;
}

message ReplyNextChildIndex {
    int32 index = 1;
}

// SearchCallback extends BtreeCallback
message AskSubmitLeaf {
    repeated bytes keys = 1;
    repeated bytes valuesChecksums = 2;
}

message ReplySubmitLeaf {
    oneof searchResult {
        int32 found = 1;
        int32 insertionPoint = 2;
    }
}

message GetValue {
    bytes value = 1;
}

message Error {
    string msg = 1;
}

// GET: Client replies
message GetCallbackReply {
    oneof reply {
        // sends dataset info (id and version)
        DatasetInfo datasetInfo = 1;

        // sends index of search key in branch
        ReplyNextChildIndex nextChildIndex = 10;
        // sends index of search key in leaf
        ReplySubmitLeaf submitLeaf = 11;

        // sends client error to server
        Error clientError = 20;
    }

}

// GET: Server requests
message GetCallback {
    oneof callback {
        // sends found value to client
        GetValue value = 1;

        // ask index of search key in branch
        AskNextChildIndex nextChildIndex = 10;
        // ask index of search key in leaf
        AskSubmitLeaf submitLeaf = 11;

        // sends server error to client
        Error serverError = 20;
    }
}

message RangeValue {
    bytes key = 1;
    bytes value = 2;
}

// RANGE: Client replies
message RangeCallbackReply {
    oneof reply {
        // sends dataset info (id and version)
        DatasetInfo datasetInfo = 1;

        // sends index of search key in branch
        ReplyNextChildIndex nextChildIndex = 10;
        // sends index of search key in leaf
        ReplySubmitLeaf submitLeaf = 11;

        // sends client error to server
        Error clientError = 20;
    }

}

// RANGE: Server requests
message RangeCallback {
    oneof callback {
        // sends key-value pair to client (multiple times)
        RangeValue value = 1;

        // ask index of search key in branch
        AskNextChildIndex nextChildIndex = 10;
        // ask index of search key in leaf
        AskSubmitLeaf submitLeaf = 11;

        // sends server error to client
        Error serverError = 20;
    }
}

// PutCallbacks extends SearchCallback
message AskPutDetails {
    repeated bytes keys = 1;
    repeated bytes valuesChecksums = 2;
}

message ReplyPutDetails {
    bytes key = 1;
    bytes checksum = 2;

    oneof searchResult {
        int32 found = 3;
        int32 insertionPoint = 4;
    }
}

message AskVerifyChanges {
    bytes serverMerkleRoot = 1;
    bool splitted = 2;
}

message ReplyVerifyChanges {
    // Signature for concatenation of version and serverMerkleRoot
    bytes signature = 1;
}

message AskChangesStored {}
message ReplyChangesStored {}

message PreviousValue {
    bytes value = 1;
}

message PutValue {
    bytes value = 1;
}

// PUT: Client replies
message PutCallbackReply {
    oneof reply {
        // sends dataset info (id and version)
        DatasetInfo datasetInfo = 1;
        // sends value for puttig
        PutValue value = 2;

        // sends index of search key in branch
        ReplyNextChildIndex nextChildIndex = 10;

        // sends index of search key in leaf and other details for putting
        ReplyPutDetails putDetails = 20;
        // confirms made changes
        ReplyVerifyChanges verifyChanges = 21;
        // confirms server confirmation
        ReplyChangesStored changesStored = 22;

        // sends client error to server
        Error clientError = 30;
    }
}

// PUT: Server requests
message PutCallback {
    oneof callback {
        // sends previos stored value to client
        PreviousValue value = 1;

        // asks index of search key in branch
        AskNextChildIndex nextChildIndex = 10;

        // asks index of search key in leaf and other details for putting
        AskPutDetails putDetails = 20;
        // asks verify made changes
        AskVerifyChanges verifyChanges = 21;
        // confirms that all changes was persisted
        AskChangesStored changesStored = 22;

        // sends server error to client
        Error serverError = 30;
    }
}

service DatasetStorageRpc {
    rpc get(stream GetCallbackReply) returns (stream GetCallback);

    rpc range(stream RangeCallbackReply) returns (stream RangeCallback);

    rpc put(stream PutCallbackReply) returns (stream PutCallback);
}

