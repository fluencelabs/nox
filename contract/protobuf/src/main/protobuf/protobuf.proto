syntax = "proto3";

package fluence.contract;

message FindRequest {
    bytes id = 1;
}

message CacheResponse {
    bool cached = 1;
}

message Participant {
    bytes id = 1;
    bytes publicKey = 2;
    bytes signature = 3;
}

message BasicContractOffer {
    int32 participantsRequired = 1;
}

message BasicContract {
    // Kademlia key of the contract
    bytes id = 1;

    // Public key of contract's creator
    bytes publicKey = 2;

    // Nonce, so that hash(nonce + publicKey) == id,
    // and hash(hash(nonce + publicKey)) solves some puzzle (for non-empty nonce)
    // nonce allows the same client create several different contracts
    bytes nonce = 3;

    // Contract conditions
    BasicContractOffer offer = 10;

    // Client's signature for an offer that proves its immutability
    bytes offerSeal = 20;

    // List of participant nodes: theirs Kademlia keys, Public keys, and offer signatures
    repeated Participant participants = 30;

    // Client's signature for a list of participants that proves its immutability,
    // as well as the fact that Client have chosen concrete participants for this contract,
    // and it's launched.
    bytes participantsSeal = 31;

    // Mutable parts of contract-related information comes here.
    // Version is used to compare two contracts and find a newer one.
    int64 version = 40;
    // Merkle root is updated by server, validated and sealed by client.
    bytes merkleRoot = 41;
    // Client signs concatenation of version and merkle root.
    // When there's more then sole client, public key for last signer should be added as well.
    bytes executionSeal = 50;
}