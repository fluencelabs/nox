/*
 * Copyright 2018 Fluence Labs Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package fluence.effects.ethclient;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes24;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class Network extends Contract {
    private static final String BINARY = "6080604052600160075560008054600160a060020a031916331790556128448061002a6000396000f3006080604052600436106100e55763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631e7fe46d81146100ea578063243dcbf21461010457806324f3a51b1461013c578063299cf8cd1461022457806329a7e871146102535780633b5aa5421461027d57806350c946fe146102e25780636df693d3146103955780637f7dcdbf146103ad578063a48dd357146103d6578063acb952c2146103ee578063ae1a793314610406578063ae6229e71461041e578063bb8d6b4414610436578063eed2a4d41461044b578063f12a796b146104fc575b600080fd5b3480156100f657600080fd5b50610102600435610514565b005b34801561011057600080fd5b5061010260043567ffffffffffffffff196024351661ffff60443581169060643516608435151561068f565b34801561014857600080fd5b506101546004356109d2565b60408051888152602080820189905260ff881692820192909252600160a060020a038616606082015260a0810184905260e06080820181815286519183019190915285519192909160c0840191610100850191888201910280838360005b838110156101ca5781810151838201526020016101b2565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156102095781810151838201526020016101f1565b50505050905001995050505050505050505060405180910390f35b34801561023057600080fd5b506101026004803590602480359160ff6044351691606435908101910135610b9c565b34801561025f57600080fd5b5061026b600435611135565b60408051918252519081900360200190f35b34801561028957600080fd5b50610292611154565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102ce5781810151838201526020016102b6565b505050509050019250505060405180910390f35b3480156102ee57600080fd5b506102fa6004356111ae565b6040805167ffffffffffffffff198816815261ffff80881660208084019190915290871692820192909252600160a060020a0385166060820152831515608082015260c060a0820181815284519183019190915283519192909160e0840191858101910280838360005b8381101561037c578181015183820152602001610364565b5050505090500197505050505050505060405180910390f35b3480156103a157600080fd5b506101026004356112dd565b3480156103b957600080fd5b506103c2611521565b604080519115158252519081900360200190f35b3480156103e257600080fd5b5061026b600435611532565b3480156103fa57600080fd5b5061026b600435611540565b34801561041257600080fd5b5061029260043561154e565b34801561042a57600080fd5b5061026b6004356115b3565b34801561044257600080fd5b506102926115c1565b34801561045757600080fd5b50610463600435611618565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156104a757818101518382015260200161048f565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156104e65781810151838201526020016104ce565b5050505090500194505050505060405180910390f35b34801561050857600080fd5b5061010260043561191d565b6000610521826006611bae565b60065490915081106105a3576040805160e560020a62461bcd02815260206004820152602160248201527f6572726f722064656c6574696e67206170703a20617070206e6f7420666f756e60448201527f6400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000828152600460205260409020600301546101009004600160a060020a03163314806105d357506105d3611521565b151561064f576040805160e560020a62461bcd02815260206004820152603560248201527f6572726f722064656c6574696e67206170703a20796f75206d757374206f776e60448201527f207468652061707020746f2064656c6574652069740000000000000000000000606482015290519081900360840190fd5b61065881611bef565b6040805183815290517f52e59ec0ae9cddda87c0b5cbf03b7638b63854fb7019d3f4826d4e7f7e9a7bd59181900360200190a15050565b600085815260026020526040812054819081908190156106f9576040805160e560020a62461bcd02815260206004820152601f60248201527f54686973206e6f646520697320616c7265616479207265676973746572656400604482015290519081900360640190fd5b6040805160e0810182528a815267ffffffffffffffff198a1660208083019190915261ffff808b16838501528916606083015233608083015287151560a083015282516000808252918101909352909160c083019150905260008a815260026020818152604092839020845181558482015160018201805495870151606088015177ffffffffffffffffffffffffffffffffffffffffffffffff19909716680100000000000000009093049290921779ffff000000000000000000000000000000000000000000000000191660c060020a61ffff93841602177bffff0000000000000000000000000000000000000000000000000000191660d060020a9290961691909102949094179093556080840151918301805460a086015173ffffffffffffffffffffffffffffffffffffffff19909116600160a060020a039094169390931774ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000931515939093029290921790915560c0830151805161088f9260038501920190612693565b5050600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b018a905550841515610903576001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018990555b604080518a815290517fb0cd47a7093fb93a9ce97304d3afb8df43e02e48502e47fd5fbb6c4020d935b59181900360200190a1600093505b6006548410156109c757600680548590811061095357fe5b9060005260206000200154925060046000848152602001908152602001600020915061097e82611bfd565b156109bb5761098c84611bef565b506000888152600260205260409020600181015460d060020a900461ffff1615156109b6576109c7565b6109c2565b6001909301925b61093b565b505050505050505050565b6000806000806060600060606109e66126de565b600089815260046020818152604092839020835160e08101855281548152600182015481840152600282015481860152600382015460ff811660608301526101009004600160a060020a0316608082015292810180548551818502810185019096528086529394919360a0860193830182828015610a8457602002820191906000526020600020905b81548152600190910190602001808311610a6f575b50505050508152602001600582016040805190810160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015610af757602002820191906000526020600020905b81548152600190910190602001808311610ae2575b505050919092525050509052508051909150600010610b60576040805160e560020a62461bcd02815260206004820152601460248201527f7468657265206973206e6f207375636820617070000000000000000000000000604482015290519081900360640190fd5b60208181015160408301516060840151608085015160a086015160c0909601518051950151939e929d50909b5099509297509095509350915050565b60008080808060ff88168110610c22576040805160e560020a62461bcd02815260206004820152602660248201527f436c75737465722073697a65206d757374206265206120706f7369746976652060448201527f6e756d6265720000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60ff8816861115610cc9576040805160e560020a62461bcd02815260206004820152604860248201527f6e756d626572206f662070696e546f206e6f6465732073686f756c642062652060448201527f6c657373206f7220657175616c20746f20746865206465736972656420636c7560648201527f7374657253697a65000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600094505b60ff8516861115610eda57868660ff8716818110610ce857fe5b6020908102929092013560008181526002909352604090922080549296509450501515610d5f576040805160e560020a62461bcd02815260206004820181905260248201527f43616e2070696e206f6e6c7920746f2072656769737465726564206e6f646573604482015290519081900360640190fd5b6002830154600160a060020a03163314610dc3576040805160e560020a62461bcd02815260206004820152601d60248201527f43616e2070696e206f6e6c7920746f206e6f64657320796f75206f776e000000604482015290519081900360640190fd5b600091505b60ff80861690831611610ecf5760ff85811690831614610ec457868660ff8416818110610df157fe5b60200291909101358514159050610ec4576040805160e560020a62461bcd02815260206004820152606860248201527f4e6f64652069647320746f2070696e20746f206d75737420626520756e69717560448201527f652c206f746865727769736520746865206465706c6f796d656e74207265737560648201527f6c7420636f756c6420626520756e7072656469637461626c6520616e6420756e60848201527f657870656374656400000000000000000000000000000000000000000000000060a482015290519081900360c40190fd5b600190910190610dc8565b600190940193610cce565b5060078054600181019091556040805160e08101825282815260208082018d90528183018c905260ff8b16606083015233608083015282518982028181018301909452898152919260a0840192918b918b918291908501908490808284375050509284525050604080518082018252600080825282518181526020808201855280840191909152948501919091528581526004808552908290208551815585850151600182015591850151600283015560608501516003830180546080880151600160a060020a03166101000274ffffffffffffffffffffffffffffffffffffffff001960ff90941660ff19909216919091179290921691909117905560a085015180519294610ff1945091850192910190612724565b5060c082015180516005830190815560208083015180516110189260068701920190612724565b505060058054600181019091557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001849055505050600081815260046020526040902061106490611bfd565b151561112957600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f018190556040805182815260208181018d90529181018b905260ff8a166060820152336080820181905260c060a083018181529083018a90527f67a3ae2f2ea8b99a1c30c7b08d8b6efe706f8d33bb17b35456b843b9e3b5e4a99385938f938f938f9391928f928f929060e0830190859085028082843760405192018290039a509098505050505050505050a15b50505050505050505050565b600680548290811061114357fe5b600091825260209091200154905081565b606060038054806020026020016040519081016040528092919081815260200182805480156111a357602002820191906000526020600020905b8154815260019091019060200180831161118e575b505050505090505b90565b600080600080600060606111c0612761565b600088815260026020818152604092839020835160e08101855281548152600182015467ffffffffffffffff19680100000000000000008202168285015261ffff60c060020a820481168388015260d060020a90910416606082015292810154600160a060020a038116608085015260ff7401000000000000000000000000000000000000000090910416151560a08401526003810180548551818502810185019096528086529394919360c086019383018282801561129f57602002820191906000526020600020905b81548152602001906001019080831161128b575b50505091909252505050602081015160408201516060830151608084015160a085015160c090950151939d929c50909a509850919650945092505050565b600081815260046020526040902080541515611369576040805160e560020a62461bcd02815260206004820152602560248201527f6572726f722064656c6574696e67206170703a20636c7573746572206e6f742060448201527f666f756e64000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b805482146113e7576040805160e560020a62461bcd02815260206004820152602d60248201527f6572726f722064656c6574696e67206170703a20636c757374657220686f737460448201527f7320616e6f746865722061707000000000000000000000000000000000000000606482015290519081900360840190fd5b60038101546101009004600160a060020a031633148061140a575061140a611521565b1515611486576040805160e560020a62461bcd02815260206004820152603160248201527f6572726f722064656c6574696e67206170703a20796f75206d757374206f776e60448201527f2061707020746f2064656c657465206974000000000000000000000000000000606482015290519081900360840190fd5b60058101541515611507576040805160e560020a62461bcd02815260206004820152603860248201527f6572726f722064656c6574696e67206170703a20617070206d7573742062652060448201527f6465706c6f7965642c2075736520646571756575654170700000000000000000606482015290519081900360840190fd5b6115148260068301611e04565b61151d82611efa565b5050565b600054600160a060020a0316331490565b600580548290811061114357fe5b600380548290811061114357fe5b6000818152600260209081526040918290206003018054835181840281018401909452808452606093928301828280156115a757602002820191906000526020600020905b815481526020019060010190808311611593575b50505050509050919050565b600180548290811061114357fe5b606060058054806020026020016040519081016040528092919081815260200182805480156111a357602002820191906000526020600020905b8154815260200190600101908083116115fb575050505050905090565b6060806116236126de565b6000848152600460208181526040808420815160e08101835281548152600182015481850152600282015481840152600382015460ff8116606080840191909152610100909104600160a060020a031660808301529482018054845181870281018701909552808552959687969095929460a0860193909291908301828280156116cd57602002820191906000526020600020905b815481526001909101906020018083116116b8575b5050505050815260200160058201604080519081016040529081600082015481526020016001820180548060200260200160405190810160405280929190818152602001828054801561174057602002820191906000526020600020905b8154815260019091019060200180831161172b575b5050509190925250505090525080519094506000106117a9576040805160e560020a62461bcd02815260206004820152601460248201527f7468657265206973206e6f207375636820617070000000000000000000000000604482015290519081900360640190fd5b8360c0015160200151516040519080825280602002602001820160405280156117dc578160200160208202803883390190505b5092508360c001516020015151604051908082528060200260200182016040528015611812578160200160208202803883390190505b509150600090505b8360c0015160200151518160ff16101561191157600260008560c00151602001518360ff1681518110151561184b57fe5b602090810290910181015182528101919091526040016000206001015483516801000000000000000090910290849060ff841690811061188757fe5b67ffffffffffffffff19909216602092830290910182015260c08501510151805160029160009160ff85169081106118bb57fe5b602090810291909101810151825281019190915260400160002060010154825160c060020a90910461ffff1690839060ff84169081106118f757fe5b61ffff90921660209283029091019091015260010161181a565b50909590945092505050565b6000818152600260205260408120805490919015156119ac576040805160e560020a62461bcd02815260206004820152602360248201527f6572726f722064656c6574696e67206e6f64653a206e6f6465206e6f7420666f60448201527f756e640000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6002820154600160a060020a03163314806119ca57506119ca611521565b1515611a46576040805160e560020a62461bcd02815260206004820152603360248201527f6572726f722064656c6574696e67206e6f64653a20796f75206d757374206f7760448201527f6e206e6f646520746f2064656c65746520697400000000000000000000000000606482015290519081900360840190fd5b611a538383600301612036565b611a5e836001612130565b600154909150811015611a7457611a748161216c565b611a7f836003612130565b6003549091508110611b01576040805160e560020a62461bcd02815260206004820152603560248201527f6572726f722064656c6574696e67206e6f64653a206e6f6465206e6f7420666f60448201527f756e6420696e206e6f6465734964732061727261790000000000000000000000606482015290519081900360840190fd5b611b0a81612177565b600083815260026020819052604082208281556001810180547fffffffff00000000000000000000000000000000000000000000000000000000169055908101805474ffffffffffffffffffffffffffffffffffffffffff1916905590611b74600383018261279f565b50506040805184815290517f56f9f72fa95bd700bf86a48601b950acaf6ab5ca05de316259979fba59b8d5289181900360200190a1505050565b6000805b8254811015611be857838382815481101515611bca57fe5b90600052602060002001541415611be057611be8565b600101611bb2565b9392505050565b611bfa81600661217e565b50565b60038101546040805160ff909216808352602080820284010190915260009182916060918391829182918291908015611c40578160200160208202803883390190505b50600489015460038a015460015492975060ff160311611dcf57600093505b600488015460ff85161015611cf15760026000896004018660ff16815481101515611c8657fe5b600091825260208083209091015483528201929092526040019020600181015490935061ffff60d060020a909104161515611cc45760009650611df9565b82548551869060ff8916908110611cd757fe5b602090810290910101526001958601959390930192611c5f565b600091505b60015482108015611d115750600388015460ff908116908716105b15611dcf5760026000600184815481101515611d2957fe5b60009182526020808320909101548352820192909252604001812090945092508390505b84518460ff16108015611d5e575080155b15611d955782548551869060ff8716908110611d7657fe5b602090810290910101511415611d8a575060015b600190930192611d4d565b8015611da057611dc4565b82548551869060ff8916908110611db357fe5b602090810290910101526001909501945b600190910190611cf6565b600388015460ff87811691161415611df457611deb88866121ee565b60019650611df9565b600096505b505050505050919050565b6000808080805b8554851015611ef1578585815481101515611e2257fe5b6000918252602080832090910154808352600290915260409091209094509250611e4b8361259d565b826003019150611e5b8783611bae565b82549091508110611edc576040805160e560020a62461bcd02815260206004820152603060248201527f6572726f722064656c6574696e67206170703a20617070206e6f7420666f756e60448201527f6420696e206e6f64652e61707049447300000000000000000000000000000000606482015290519081900360840190fd5b611ee6818361217e565b600190940193611e0b565b50505050505050565b6000611f07826005611bae565b6005549091508110611f89576040805160e560020a62461bcd02815260206004820152603160248201527f6572726f722064656c6574696e67206170703a20617070206e6f7420666f756e60448201527f6420696e20617070494473206172726179000000000000000000000000000000606482015290519081900360840190fd5b611f9481600561217e565b60008281526004602081905260408220828155600181018390556002810183905560038101805474ffffffffffffffffffffffffffffffffffffffffff191690559190611fe39083018261279f565b60006005830181815590611ffa600685018261279f565b50506040805185815290517fc02f18d908dc7670fd8f55381e70a6c411e5829b3e98846a2d71e908466749519350908190036020019150a15050565b6000808080805b8554851015611ef157858581548110151561205457fe5b6000918252602080832090910154808352600490915260409091206006018054919550935091506120858784612130565b9050818110612104576040805160e560020a62461bcd02815260206004820152603360248201527f6572726f722064656c6574696e67206e6f64653a206e6f64654944207761736e60448201527f277420666f756e6420696e206e6f646549447300000000000000000000000000606482015290519081900360840190fd5b816001141561211b5761211684611efa565b612125565b612125818461217e565b60019094019361203d565b6000805b8254811015611be8578254849084908390811061214d57fe5b600091825260209091200154141561216457611be8565b600101612134565b611bfa81600161217e565b611bfa8160035b8054600019018281146121bf57818181548110151561219957fe5b906000526020600020015482848154811015156121b257fe5b6000918252602090912001555b81818154811015156121cd57fe5b600091825260208220015581546121e88360001983016127bd565b50505050565b80516003830154606091829182916000918291829160ff1614612281576040805160e560020a62461bcd02815260206004820152602e60248201527f54686572652073686f756c6420626520656e6f756768206e6f64657320746f2060448201527f666f726d206120636c7573746572000000000000000000000000000000000000606482015290519081900360840190fd5b60038801546040805160ff909216808352602080820284010190915280156122b3578160200160208202803883390190505b5060038901546040805160ff90921680835260208082028401019091529197509080156122ea578160200160208202803883390190505b5060038901546040805160ff9092168083526020808202840101909152919650908015612321578160200160208202803883390190505b509350600092505b600388015460ff90811690841610156124305760026000888560ff1681518110151561235157fe5b602090810290910181015182528101919091526040016000208054875191935090879060ff861690811061238157fe5b60209081029091010152600182015485516801000000000000000090910290869060ff86169081106123af57fe5b67ffffffffffffffff1992909216602092830291909101909101526001820154845160c060020a90910461ffff1690859060ff86169081106123ed57fe5b61ffff9092166020928302909101909101526124088261261e565b8754600383018054600181810183556000928352602090922001919091559290920191612329565b506040805180820190915242808252602080830188905260058a01828155885192939290916124669160068d01918b0190612724565b509050507fbbaa7a8facb46c7a863976d7e7e08b039473f062f25846e3ce55e81e363afc888860000154896001015483898989604051808781526020018660001916600019168152602001858152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156124fb5781810151838201526020016124e3565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561253a578181015183820152602001612522565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015612579578181015183820152602001612561565b50505050905001995050505050505050505060405180910390a15050505050505050565b6001808201805461ffff60d060020a80830482168501821681027bffff00000000000000000000000000000000000000000000000000001990931692909217928390559104161415611bfa57546001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60155565b60018101805460001961ffff60d060020a808404821692909201811682027bffff00000000000000000000000000000000000000000000000000001990931692909217928390556000920416151561151d57815461267d906001612130565b60015490915081101561151d5761151d8161216c565b8280548282559060005260206000209081019282156126ce579160200282015b828111156126ce5782518255916020019190600101906126b3565b506126da9291506127e6565b5090565b60408051610100810182526000808252602082018190529181018290526060808201839052608082019290925260a081019190915260c0810161271f612800565b905290565b8280548282559060005260206000209081019282156126ce579160200282015b828111156126ce5782518255602090920191600190910190612744565b6040805160e08101825260008082526020820181905291810182905260608082018390526080820183905260a082019290925260c081019190915290565b5080546000825590600052602060002090810190611bfa91906127e6565b8154818355818111156127e1576000838152602090206127e19181019083016127e6565b505050565b6111ab91905b808211156126da57600081556001016127ec565b604080518082019091526000815260606020820152905600a165627a7a72305820716fc099b5dc37aeac67397e4a5e8f208e49bab435b85a3070ac4e3676a1e15c0029";

    public static final String FUNC_DEQUEUEAPP = "dequeueApp";

    public static final String FUNC_ADDNODE = "addNode";

    public static final String FUNC_GETAPP = "getApp";

    public static final String FUNC_ADDAPP = "addApp";

    public static final String FUNC_ENQUEUEDAPPS = "enqueuedApps";

    public static final String FUNC_GETNODESIDS = "getNodesIds";

    public static final String FUNC_GETNODE = "getNode";

    public static final String FUNC_DELETEAPP = "deleteApp";

    public static final String FUNC_ISCONTRACTOWNER = "isContractOwner";

    public static final String FUNC_APPIDS = "appIDs";

    public static final String FUNC_NODESIDS = "nodesIds";

    public static final String FUNC_GETNODEAPPS = "getNodeApps";

    public static final String FUNC_READYNODES = "readyNodes";

    public static final String FUNC_GETAPPIDS = "getAppIDs";

    public static final String FUNC_GETAPPWORKERS = "getAppWorkers";

    public static final String FUNC_DELETENODE = "deleteNode";

    public static final Event APPDEPLOYED_EVENT = new Event("AppDeployed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
    ;

    public static final Event APPENQUEUED_EVENT = new Event("AppEnqueued", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
    ;

    public static final Event NEWNODE_EVENT = new Event("NewNode", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event NODEDELETED_EVENT = new Event("NodeDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event APPDEQUEUED_EVENT = new Event("AppDequeued", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event APPDELETED_EVENT = new Event("AppDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> dequeueApp(Uint256 appID) {
        final Function function = new Function(
                FUNC_DEQUEUEAPP, 
                Arrays.<Type>asList(appID), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addNode(Bytes32 nodeID, Bytes24 nodeAddress, Uint16 apiPort, Uint16 capacity, Bool isPrivate) {
        final Function function = new Function(
                FUNC_ADDNODE, 
                Arrays.<Type>asList(nodeID, nodeAddress, apiPort, capacity, isPrivate), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple7<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>>> getApp(Uint256 appID) {
        final Function function = new Function(FUNC_GETAPP, 
                Arrays.<Type>asList(appID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<Tuple7<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>>>(
                new Callable<Tuple7<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>>>() {
                    @Override
                    public Tuple7<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>>(
                                (Bytes32) results.get(0), 
                                (Bytes32) results.get(1), 
                                (Uint8) results.get(2), 
                                (Address) results.get(3), 
                                (DynamicArray<Bytes32>) results.get(4), 
                                (Uint256) results.get(5), 
                                (DynamicArray<Bytes32>) results.get(6));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addApp(Bytes32 storageHash, Bytes32 storageReceipt, Uint8 clusterSize, DynamicArray<Bytes32> pinToNodes) {
        final Function function = new Function(
                FUNC_ADDAPP, 
                Arrays.<Type>asList(storageHash, storageReceipt, clusterSize, pinToNodes), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint256> enqueuedApps(Uint256 param0) {
        final Function function = new Function(FUNC_ENQUEUEDAPPS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Bytes32>> getNodesIds() {
        final Function function = new Function(FUNC_GETNODESIDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Uint256>>> getNode(Bytes32 nodeID) {
        final Function function = new Function(FUNC_GETNODE, 
                Arrays.<Type>asList(nodeID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes24>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint16>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Uint256>>>(
                new Callable<Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Uint256>>>() {
                    @Override
                    public Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Uint256>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Uint256>>(
                                (Bytes24) results.get(0), 
                                (Uint16) results.get(1), 
                                (Uint16) results.get(2), 
                                (Address) results.get(3), 
                                (Bool) results.get(4), 
                                (DynamicArray<Uint256>) results.get(5));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> deleteApp(Uint256 appID) {
        final Function function = new Function(
                FUNC_DELETEAPP, 
                Arrays.<Type>asList(appID), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bool> isContractOwner() {
        final Function function = new Function(FUNC_ISCONTRACTOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> appIDs(Uint256 param0) {
        final Function function = new Function(FUNC_APPIDS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> nodesIds(Uint256 param0) {
        final Function function = new Function(FUNC_NODESIDS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Uint256>> getNodeApps(Bytes32 nodeID) {
        final Function function = new Function(FUNC_GETNODEAPPS, 
                Arrays.<Type>asList(nodeID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> readyNodes(Uint256 param0) {
        final Function function = new Function(FUNC_READYNODES, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Uint256>> getAppIDs() {
        final Function function = new Function(FUNC_GETAPPIDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>> getAppWorkers(Uint256 appID) {
        final Function function = new Function(FUNC_GETAPPWORKERS, 
                Arrays.<Type>asList(appID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
        return new RemoteCall<Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>>(
                new Callable<Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>>() {
                    @Override
                    public Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>(
                                (DynamicArray<Bytes24>) results.get(0), 
                                (DynamicArray<Uint16>) results.get(1));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> deleteNode(Bytes32 nodeID) {
        final Function function = new Function(
                FUNC_DELETENODE, 
                Arrays.<Type>asList(nodeID), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<AppDeployedEventResponse> getAppDeployedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPDEPLOYED_EVENT, transactionReceipt);
        ArrayList<AppDeployedEventResponse> responses = new ArrayList<AppDeployedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppDeployedEventResponse typedResponse = new AppDeployedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appID = (Uint256) eventValues.getNonIndexedValues().get(0);
            typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(2);
            typedResponse.nodeIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(3);
            typedResponse.nodeAddresses = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(4);
            typedResponse.ports = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(5);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppDeployedEventResponse> appDeployedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AppDeployedEventResponse>() {
            @Override
            public AppDeployedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPDEPLOYED_EVENT, log);
                AppDeployedEventResponse typedResponse = new AppDeployedEventResponse();
                typedResponse.log = log;
                typedResponse.appID = (Uint256) eventValues.getNonIndexedValues().get(0);
                typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(2);
                typedResponse.nodeIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(3);
                typedResponse.nodeAddresses = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(4);
                typedResponse.ports = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(5);
                return typedResponse;
            }
        });
    }

    public Flowable<AppDeployedEventResponse> appDeployedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPDEPLOYED_EVENT));
        return appDeployedEventFlowable(filter);
    }

    public List<AppEnqueuedEventResponse> getAppEnqueuedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPENQUEUED_EVENT, transactionReceipt);
        ArrayList<AppEnqueuedEventResponse> responses = new ArrayList<AppEnqueuedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppEnqueuedEventResponse typedResponse = new AppEnqueuedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appID = (Uint256) eventValues.getNonIndexedValues().get(0);
            typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.storageReceipt = (Bytes32) eventValues.getNonIndexedValues().get(2);
            typedResponse.clusterSize = (Uint8) eventValues.getNonIndexedValues().get(3);
            typedResponse.owner = (Address) eventValues.getNonIndexedValues().get(4);
            typedResponse.pinToNodes = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(5);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppEnqueuedEventResponse> appEnqueuedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AppEnqueuedEventResponse>() {
            @Override
            public AppEnqueuedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPENQUEUED_EVENT, log);
                AppEnqueuedEventResponse typedResponse = new AppEnqueuedEventResponse();
                typedResponse.log = log;
                typedResponse.appID = (Uint256) eventValues.getNonIndexedValues().get(0);
                typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.storageReceipt = (Bytes32) eventValues.getNonIndexedValues().get(2);
                typedResponse.clusterSize = (Uint8) eventValues.getNonIndexedValues().get(3);
                typedResponse.owner = (Address) eventValues.getNonIndexedValues().get(4);
                typedResponse.pinToNodes = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(5);
                return typedResponse;
            }
        });
    }

    public Flowable<AppEnqueuedEventResponse> appEnqueuedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPENQUEUED_EVENT));
        return appEnqueuedEventFlowable(filter);
    }

    public List<NewNodeEventResponse> getNewNodeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWNODE_EVENT, transactionReceipt);
        ArrayList<NewNodeEventResponse> responses = new ArrayList<NewNodeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewNodeEventResponse typedResponse = new NewNodeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewNodeEventResponse>() {
            @Override
            public NewNodeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWNODE_EVENT, log);
                NewNodeEventResponse typedResponse = new NewNodeEventResponse();
                typedResponse.log = log;
                typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWNODE_EVENT));
        return newNodeEventFlowable(filter);
    }

    public List<NodeDeletedEventResponse> getNodeDeletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NODEDELETED_EVENT, transactionReceipt);
        ArrayList<NodeDeletedEventResponse> responses = new ArrayList<NodeDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NodeDeletedEventResponse typedResponse = new NodeDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NodeDeletedEventResponse> nodeDeletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NodeDeletedEventResponse>() {
            @Override
            public NodeDeletedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NODEDELETED_EVENT, log);
                NodeDeletedEventResponse typedResponse = new NodeDeletedEventResponse();
                typedResponse.log = log;
                typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<NodeDeletedEventResponse> nodeDeletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NODEDELETED_EVENT));
        return nodeDeletedEventFlowable(filter);
    }

    public List<AppDequeuedEventResponse> getAppDequeuedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPDEQUEUED_EVENT, transactionReceipt);
        ArrayList<AppDequeuedEventResponse> responses = new ArrayList<AppDequeuedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppDequeuedEventResponse typedResponse = new AppDequeuedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appID = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppDequeuedEventResponse> appDequeuedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AppDequeuedEventResponse>() {
            @Override
            public AppDequeuedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPDEQUEUED_EVENT, log);
                AppDequeuedEventResponse typedResponse = new AppDequeuedEventResponse();
                typedResponse.log = log;
                typedResponse.appID = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<AppDequeuedEventResponse> appDequeuedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPDEQUEUED_EVENT));
        return appDequeuedEventFlowable(filter);
    }

    public List<AppDeletedEventResponse> getAppDeletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPDELETED_EVENT, transactionReceipt);
        ArrayList<AppDeletedEventResponse> responses = new ArrayList<AppDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppDeletedEventResponse typedResponse = new AppDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appID = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppDeletedEventResponse> appDeletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AppDeletedEventResponse>() {
            @Override
            public AppDeletedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPDELETED_EVENT, log);
                AppDeletedEventResponse typedResponse = new AppDeletedEventResponse();
                typedResponse.log = log;
                typedResponse.appID = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<AppDeletedEventResponse> appDeletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPDELETED_EVENT));
        return appDeletedEventFlowable(filter);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class AppDeployedEventResponse {
        public Log log;

        public Uint256 appID;

        public Bytes32 storageHash;

        public Uint256 genesisTime;

        public DynamicArray<Bytes32> nodeIDs;

        public DynamicArray<Bytes24> nodeAddresses;

        public DynamicArray<Uint16> ports;
    }

    public static class AppEnqueuedEventResponse {
        public Log log;

        public Uint256 appID;

        public Bytes32 storageHash;

        public Bytes32 storageReceipt;

        public Uint8 clusterSize;

        public Address owner;

        public DynamicArray<Bytes32> pinToNodes;
    }

    public static class NewNodeEventResponse {
        public Log log;

        public Bytes32 id;
    }

    public static class NodeDeletedEventResponse {
        public Log log;

        public Bytes32 id;
    }

    public static class AppDequeuedEventResponse {
        public Log log;

        public Uint256 appID;
    }

    public static class AppDeletedEventResponse {
        public Log log;

        public Uint256 appID;
    }
}
