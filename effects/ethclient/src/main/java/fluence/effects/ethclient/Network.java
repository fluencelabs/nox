/*
 * Copyright 2018 Fluence Labs Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package fluence.effects.ethclient;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes24;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.2.0.
 */
public class Network extends Contract {
    private static final String BINARY = "60806040526001600755336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613443806100586000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80637f7dcdbf11610097578063ae6229e711610066578063ae6229e71461065d578063bb8d6b441461069f578063eed2a4d4146106fe578063f12a796b146107c957610100565b80637f7dcdbf14610534578063a48dd35714610556578063acb952c214610598578063ae1a7933146105da57610100565b80633127eb79116100d35780633127eb79146103075780633b5aa542146103ab57806350c946fe1461040a5780636df693d31461050657610100565b80631e7fe46d14610105578063243dcbf21461013357806324f3a51b1461019e57806329a7e871146102c5575b600080fd5b6101316004803603602081101561011b57600080fd5b81019080803590602001909291905050506107f7565b005b61019c600480360360a081101561014957600080fd5b8101908080359060200190929190803567ffffffffffffffff19169060200190929190803561ffff169060200190929190803561ffff169060200190929190803515159060200190929190505050610979565b005b6101ca600480360360208110156101b457600080fd5b8101908080359060200190929190505050610d05565b604051808981526020018881526020018781526020018660ff1660ff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200184815260200180602001838103835286818151815260200191508051906020019060200280838360005b8381101561026757808201518184015260208101905061024c565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156102a957808201518184015260208101905061028e565b505050509050019a505050505050505050505060405180910390f35b6102f1600480360360208110156102db57600080fd5b8101908080359060200190929190505050610f71565b6040518082815260200191505060405180910390f35b6103a9600480360360a081101561031d57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803560ff1690602001909291908035906020019064010000000081111561036557600080fd5b82018360208201111561037757600080fd5b8035906020019184602083028401116401000000008311171561039957600080fd5b9091929391929390505050610f92565b005b6103b36115ad565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156103f65780820151818401526020810190506103db565b505050509050019250505060405180910390f35b6104366004803603602081101561042057600080fd5b8101908080359060200190929190505050611605565b604051808767ffffffffffffffff191667ffffffffffffffff191681526020018661ffff1661ffff1681526020018561ffff1661ffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018315151515815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156104ed5780820151818401526020810190506104d2565b5050505090500197505050505050505060405180910390f35b6105326004803603602081101561051c57600080fd5b81019080803590602001909291905050506117ae565b005b61053c6119b4565b604051808215151515815260200191505060405180910390f35b6105826004803603602081101561056c57600080fd5b8101908080359060200190929190505050611a0b565b6040518082815260200191505060405180910390f35b6105c4600480360360208110156105ae57600080fd5b8101908080359060200190929190505050611a2c565b6040518082815260200191505060405180910390f35b610606600480360360208110156105f057600080fd5b8101908080359060200190929190505050611a4d565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561064957808201518184015260208101905061062e565b505050509050019250505060405180910390f35b6106896004803603602081101561067357600080fd5b8101908080359060200190929190505050611abb565b6040518082815260200191505060405180910390f35b6106a7611adc565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156106ea5780820151818401526020810190506106cf565b505050509050019250505060405180910390f35b61072a6004803603602081101561071457600080fd5b8101908080359060200190929190505050611b34565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610771578082015181840152602081019050610756565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156107b3578082015181840152602081019050610798565b5050505090500194505050505060405180910390f35b6107f5600480360360208110156107df57600080fd5b8101908080359060200190929190505050611ed0565b005b600061080482600661219e565b90506006805490508110610863576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806132af6021913960400191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166004600084815260200190815260200160002060040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806108d757506108d66119b4565b5b61092c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806133386035913960400191505060405180910390fd5b610935816121ec565b61093e826121fa565b7f52e59ec0ae9cddda87c0b5cbf03b7638b63854fb7019d3f4826d4e7f7e9a7bd5826040518082815260200191505060405180910390a15050565b6000801b600260008781526020019081526020016000206000015414610a07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f54686973206e6f646520697320616c726561647920726567697374657265640081525060200191505060405180910390fd5b6040518060e001604052808681526020018567ffffffffffffffff191681526020018461ffff1681526020018361ffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815260200182151581526020016000604051908082528060200260200182016040528015610a915781602001602082028038833980820191505090505b50815250600260008781526020019081526020016000206000820151816000015560208201518160010160006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908360401c021790555060408201518160010160186101000a81548161ffff021916908361ffff160217905550606082015181600101601a6101000a81548161ffff021916908361ffff16021790555060808201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160020160146101000a81548160ff02191690831515021790555060c0820151816003019080519060200190610bb3929190612e73565b50905050600385908060018154018082558091505090600182039060005260206000200160009091929091909150555080610c155760018590806001815401808255809150509060018203906000526020600020016000909192909190915055505b7fb0cd47a7093fb93a9ce97304d3afb8df43e02e48502e47fd5fbb6c4020d935b5856040518082815260200191505060405180910390a160008090505b600680549050811015610cfd57600060068281548110610c6e57fe5b906000526020600020015490506000600460008381526020019081526020016000209050610c9b81612315565b15610ced57610ca9836121ec565b6000600260008a81526020019081526020016000209050600081600101601a9054906101000a900461ffff1661ffff161415610ce757505050610cfd565b50610cf6565b82806001019350505b5050610c52565b505050505050565b6000806000806000606060006060610d1b612ec0565b600460008b815260200190815260200160002060405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1660ff1660ff1681526020016004820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160058201805480602002602001604051908101604052809291908181526020018280548015610e2457602002820191906000526020600020905b815481526020019060010190808311610e10575b50505050508152602001600682016040518060400160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015610e9657602002820191906000526020600020905b815481526020019060010190808311610e82575b5050505050815250508152505090506000816000015111610f1f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f7468657265206973206e6f20737563682061707000000000000000000000000081525060200191505060405180910390fd5b80602001518160400151826060015183608001518460a001518560c001518660e00151600001518760e00151602001518292508090509850985098509850985098509850985050919395975091939597565b60068181548110610f7e57fe5b906000526020600020016000915090505481565b60008360ff1611610fee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806130e46026913960400191505060405180910390fd5b818190508360ff16101561104d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604881526020018061339d6048913960600191505060405180910390fd5b60008090505b828290508160ff16101561128057600083838360ff1681811061107257fe5b90506020020135905060006002600083815260200190815260200160002090506000801b8160000154141561110f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f43616e2070696e206f6e6c7920746f2072656769737465726564206e6f64657381525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f43616e2070696e206f6e6c7920746f206e6f64657320796f75206f776e00000081525060200191505060405180910390fd5b60008090505b8360ff168160ff1611611270578060ff168460ff16146112635785858260ff1681811061120357fe5b90506020020135831415611262576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260688152602001806132d06068913960800191505060405180910390fd5b5b80806001019150506111da565b5050508080600101915050611053565b506000600760008154809291906001019190505590506040518061010001604052808281526020018881526020018781526020018681526020018560ff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050815260200160405180604001604052806000815260200160006040519080825280602002602001820160405280156113685781602001602082028038833980820191505090505b50815250815250600460008381526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff021916908360ff16021790555060a08201518160040160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c082015181600501908051906020019061142e929190612f2d565b5060e08201518160060160008201518160000155602082015181600101908051906020019061145e929190612f2d565b50505090505060058190806001815401808255809150509060018203906000526020600020016000909192909190915055506114ab60046000838152602001908152602001600020612315565b6115a45760068190806001815401808255809150509060018203906000526020600020016000909192909190915055507fe24c4bbb0294657e44286beade638a8a6807fa314ed76bf397579aa481f5ee6b8188888888338989604051808981526020018881526020018781526020018681526020018560ff1660ff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925060200280828437600081840152601f19601f820116905080830192505050995050505050505050505060405180910390a15b50505050505050565b606060038054806020026020016040519081016040528092919081815260200182805480156115fb57602002820191906000526020600020905b8154815260200190600101908083116115e7575b5050505050905090565b60008060008060006060611617612f7a565b600260008981526020019081526020016000206040518060e0016040529081600082015481526020016001820160009054906101000a900460401b67ffffffffffffffff191667ffffffffffffffff191681526020016001820160189054906101000a900461ffff1661ffff1661ffff16815260200160018201601a9054906101000a900461ffff1661ffff1661ffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016003820180548060200260200160405190810160405280929190818152602001828054801561176c57602002820191906000526020600020905b815481526020019060010190808311611758575b505050505081525050905080602001518160400151826060015183608001518460a001518560c001518090509650965096509650965096505091939550919395565b6000600460008381526020019081526020016000209050600081600001541415611823576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806131376025913960400191505060405180910390fd5b8181600001541461187f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d81526020018061310a602d913960400191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806118e157506118e06119b4565b5b611936576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806131c26031913960400191505060405180910390fd5b600081600601600001541415611997576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260388152602001806131f36038913960400191505060405180910390fd5b6119a78282600601600101612583565b6119b0826126cf565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60058181548110611a1857fe5b906000526020600020016000915090505481565b60038181548110611a3957fe5b906000526020600020016000915090505481565b606060026000838152602001908152602001600020600301805480602002602001604051908101604052809291908181526020018280548015611aaf57602002820191906000526020600020905b815481526020019060010190808311611a9b575b50505050509050919050565b60018181548110611ac857fe5b906000526020600020016000915090505481565b60606005805480602002602001604051908101604052809291908181526020018280548015611b2a57602002820191906000526020600020905b815481526020019060010190808311611b16575b5050505050905090565b606080611b3f612ec0565b6004600085815260200190815260200160002060405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1660ff1660ff1681526020016004820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160058201805480602002602001604051908101604052809291908181526020018280548015611c4857602002820191906000526020600020905b815481526020019060010190808311611c34575b50505050508152602001600682016040518060400160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015611cba57602002820191906000526020600020905b815481526020019060010190808311611ca6575b5050505050815250508152505090506000816000015111611d43576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f7468657265206973206e6f20737563682061707000000000000000000000000081525060200191505060405180910390fd5b60608160e001516020015151604051908082528060200260200182016040528015611d7d5781602001602082028038833980820191505090505b50905060608260e001516020015151604051908082528060200260200182016040528015611dba5781602001602082028038833980820191505090505b50905060008090505b8360e0015160200151518160ff161015611ec157600260008560e00151602001518360ff1681518110611df257fe5b6020026020010151815260200190815260200160002060010160009054906101000a900460401b838260ff1681518110611e2857fe5b602002602001019067ffffffffffffffff1916908167ffffffffffffffff191681525050600260008560e00151602001518360ff1681518110611e6757fe5b6020026020010151815260200190815260200160002060010160189054906101000a900461ffff16828260ff1681518110611e9e57fe5b602002602001019061ffff16908161ffff16815250508080600101915050611dc3565b50818194509450505050915091565b60006002600083815260200190815260200160002090506000801b81600001541415611f47576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061328c6023913960400191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611fa95750611fa86119b4565b5b611ffe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603381526020018061322b6033913960400191505060405180910390fd5b61200b8282600301612712565b6000612018836001612803565b90506001805490508110156120315761203081612851565b5b61203c836003612803565b9050600380549050811061209b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603581526020018061318d6035913960400191505060405180910390fd5b6120a48161285f565b600260008481526020019081526020016000206000808201600090556001820160006101000a81549077ffffffffffffffffffffffffffffffffffffffffffffffff02191690556001820160186101000a81549061ffff021916905560018201601a6101000a81549061ffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160146101000a81549060ff02191690556003820160006121609190612fe5565b50507f56f9f72fa95bd700bf86a48601b950acaf6ab5ca05de316259979fba59b8d528836040518082815260200191505060405180910390a1505050565b600080600090505b82805490508110156121e257838382815481106121bf57fe5b906000526020600020015414156121d5576121e2565b80806001019150506121a6565b8091505092915050565b6121f781600661286d565b50565b600061220782600561219e565b90506005805490508110612266576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018061315c6031913960400191505060405180910390fd5b61227181600561286d565b600460008381526020019081526020016000206000808201600090556001820160009055600282016000905560038201600090556004820160006101000a81549060ff02191690556004820160016101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556005820160006122f09190613006565b6006820160008082016000905560018201600061230d9190613006565b505050505050565b600081600501805490508260040160009054906101000a900460ff1660ff16036001805490501061257457600080905060608360040160009054906101000a900460ff1660ff1660405190808252806020026020018201604052801561238a5781602001602082028038833980820191505090505b50905060008090505b84600501805490508160ff16101561243a57600060026000876005018460ff16815481106123bd57fe5b906000526020600020015481526020019081526020016000209050600081600101601a9054906101000a900461ffff1661ffff16141561240457600094505050505061257e565b8060000154838560ff168151811061241857fe5b6020026020010181815250508380600101945050508080600101915050612393565b60008090505b6001805490508110801561246a57508560040160009054906101000a900460ff1660ff168460ff16105b15612536576000600260006001848154811061248257fe5b9060005260206000200154815260200190815260200160002090506000809050600093505b84518460ff161080156124b8575080155b156124f1578160000154858560ff16815181106124d157fe5b602002602001015114156124e457600190505b83806001019450506124a7565b80156124fe575050612529565b8160000154858760ff168151811061251257fe5b602002602001018181525050858060010196505050505b8080600101915050612440565b508460040160009054906101000a900460ff1660ff168360ff16141561256c5761256085836128e6565b6001935050505061257e565b50505061257d565b6000905061257e565b5b919050565b60008090505b818054905081101561265d5760008282815481106125a357fe5b9060005260206000200154905060006002600083815260200190815260200160002090506125d081612cea565b600081600301905060006125e4878361219e565b905081805490508110612642576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603081526020018061336d6030913960400191505060405180910390fd5b61264c818361286d565b505050508080600101915050612589565b5060008090505b6006805490508110156126ca576000600460006006848154811061268457fe5b9060005260206000200154815260200190815260200160002090506126a881612315565b156126bc576126b6826121ec565b506126ca565b818060010192505050612664565b505050565b6126d8816121fa565b7fc02f18d908dc7670fd8f55381e70a6c411e5829b3e98846a2d71e90846674951816040518082815260200191505060405180910390a150565b60008090505b81805490508110156127fe57600082828154811061273257fe5b90600052602060002001549050600060046000838152602001908152602001600020600601600101905060008180549050905060006127718784612803565b90508181106127cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001806133e56033913960400191505060405180910390fd5b60018214156127e2576127dd846126cf565b6127ed565b6127ec8184612d74565b5b505050508080600101915050612718565b505050565b600080600090505b8280549050811015612847578383828154811061282457fe5b9060005260206000200154141561283a57612847565b808060010191505061280b565b8091505092915050565b61285c816001612d74565b50565b61286a816003612d74565b50565b6000600182805490500390508083146128b25781818154811061288c57fe5b90600052602060002001548284815481106128a357fe5b90600052602060002001819055505b8181815481106128be57fe5b9060005260206000200160009055818054809190600190036128e09190613027565b50505050565b80518260040160009054906101000a900460ff1660ff1614612953576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e81526020018061325e602e913960400191505060405180910390fd5b60608260040160009054906101000a900460ff1660ff166040519080825280602002602001820160405280156129985781602001602082028038833980820191505090505b50905060608360040160009054906101000a900460ff1660ff166040519080825280602002602001820160405280156129e05781602001602082028038833980820191505090505b50905060608460040160009054906101000a900460ff1660ff16604051908082528060200260200182016040528015612a285781602001602082028038833980820191505090505b50905060008090505b8560040160009054906101000a900460ff1660ff168160ff161015612b6357600060026000878460ff1681518110612a6557fe5b6020026020010151815260200190815260200160002090508060000154858360ff1681518110612a9157fe5b6020026020010181815250508060010160009054906101000a900460401b848360ff1681518110612abe57fe5b602002602001019067ffffffffffffffff1916908167ffffffffffffffff1916815250508060010160189054906101000a900461ffff16838360ff1681518110612b0457fe5b602002602001019061ffff16908161ffff1681525050612b2381612ded565b8060030187600001549080600181540180825580915050906001820390600052602060002001600090919290919091505550508080600101915050612a31565b50600042905060405180604001604052808281526020018581525086600601600082015181600001556020820151816001019080519060200190612ba8929190612f2d565b509050507f8c702b84b3bf970e139aff0555a00e6f1361702a69846805a7bde5b039016e248660000154876001015488600301548488888860405180888152602001878152602001868152602001858152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b83811015612c43578082015181840152602081019050612c28565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015612c85578082015181840152602081019050612c6a565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015612cc7578082015181840152602081019050612cac565b505050509050019a505050505050505050505060405180910390a1505050505050565b80600101601a81819054906101000a900461ffff168092919060010191906101000a81548161ffff021916908361ffff16021790555050600181600101601a9054906101000a900461ffff1661ffff161415612d71576001816000015490806001815401808255809150509060018203906000526020600020016000909192909190915055505b50565b600060018280549050039050808314612db957818181548110612d9357fe5b9060005260206000200154828481548110612daa57fe5b90600052602060002001819055505b818181548110612dc557fe5b906000526020600020016000905581805480919060019003612de79190613053565b50505050565b80600101601a81819054906101000a900461ffff16809291906001900391906101000a81548161ffff021916908361ffff16021790555050600081600101601a9054906101000a900461ffff1661ffff161415612e70576000612e5582600001546001612803565b9050600180549050811015612e6e57612e6d81612851565b5b505b50565b828054828255906000526020600020908101928215612eaf579160200282015b82811115612eae578251825591602001919060010190612e93565b5b509050612ebc919061307f565b5090565b60405180610120016040528060008152602001600080191681526020016000801916815260200160008019168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001612f276130a4565b81525090565b828054828255906000526020600020908101928215612f69579160200282015b82811115612f68578251825591602001919060010190612f4d565b5b509050612f7691906130be565b5090565b6040518060e0016040528060008019168152602001600067ffffffffffffffff19168152602001600061ffff168152602001600061ffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001606081525090565b5080546000825590600052602060002090810190613003919061307f565b50565b508054600082559060005260206000209081019061302491906130be565b50565b81548183558181111561304e5781836000526020600020918201910161304d919061307f565b5b505050565b81548183558181111561307a5781836000526020600020918201910161307991906130be565b5b505050565b6130a191905b8082111561309d576000816000905550600101613085565b5090565b90565b604051806040016040528060008152602001606081525090565b6130e091905b808211156130dc5760008160009055506001016130c4565b5090565b9056fe436c75737465722073697a65206d757374206265206120706f736974697665206e756d6265726572726f722064656c6574696e67206170703a20636c757374657220686f73747320616e6f74686572206170706572726f722064656c6574696e67206170703a20636c7573746572206e6f7420666f756e646572726f722064656c6574696e67206170703a20617070206e6f7420666f756e6420696e206170704944732061727261796572726f722064656c6574696e67206e6f64653a206e6f6465206e6f7420666f756e6420696e206e6f6465734964732061727261796572726f722064656c6574696e67206170703a20796f75206d757374206f776e2061707020746f2064656c6574652069746572726f722064656c6574696e67206170703a20617070206d757374206265206465706c6f7965642c2075736520646571756575654170706572726f722064656c6574696e67206e6f64653a20796f75206d757374206f776e206e6f646520746f2064656c65746520697454686572652073686f756c6420626520656e6f756768206e6f64657320746f20666f726d206120636c75737465726572726f722064656c6574696e67206e6f64653a206e6f6465206e6f7420666f756e646572726f722064656c6574696e67206170703a20617070206e6f7420666f756e644e6f64652069647320746f2070696e20746f206d75737420626520756e697175652c206f746865727769736520746865206465706c6f796d656e7420726573756c7420636f756c6420626520756e7072656469637461626c6520616e6420756e65787065637465646572726f722064656c6574696e67206170703a20796f75206d757374206f776e207468652061707020746f2064656c6574652069746572726f722064656c6574696e67206170703a20617070206e6f7420666f756e6420696e206e6f64652e6170704944736e756d626572206f662070696e546f206e6f6465732073686f756c64206265206c657373206f7220657175616c20746f20746865206465736972656420636c757374657253697a656572726f722064656c6574696e67206e6f64653a206e6f64654944207761736e277420666f756e6420696e206e6f6465494473a165627a7a72305820895a8e1c82d949869f41c88bfce8756cbf35676da52c92dbe7dce01d06f5dc380029";

    public static final String FUNC_DEQUEUEAPP = "dequeueApp";

    public static final String FUNC_ADDNODE = "addNode";

    public static final String FUNC_GETAPP = "getApp";

    public static final String FUNC_ENQUEUEDAPPS = "enqueuedApps";

    public static final String FUNC_ADDAPP = "addApp";

    public static final String FUNC_GETNODESIDS = "getNodesIds";

    public static final String FUNC_GETNODE = "getNode";

    public static final String FUNC_DELETEAPP = "deleteApp";

    public static final String FUNC_ISCONTRACTOWNER = "isContractOwner";

    public static final String FUNC_APPIDS = "appIDs";

    public static final String FUNC_NODESIDS = "nodesIds";

    public static final String FUNC_GETNODEAPPS = "getNodeApps";

    public static final String FUNC_READYNODES = "readyNodes";

    public static final String FUNC_GETAPPIDS = "getAppIDs";

    public static final String FUNC_GETAPPWORKERS = "getAppWorkers";

    public static final String FUNC_DELETENODE = "deleteNode";

    public static final Event APPDEPLOYED_EVENT = new Event("AppDeployed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
    ;

    public static final Event APPENQUEUED_EVENT = new Event("AppEnqueued", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
    ;

    public static final Event NEWNODE_EVENT = new Event("NewNode", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event NODEDELETED_EVENT = new Event("NodeDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event APPDEQUEUED_EVENT = new Event("AppDequeued", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event APPDELETED_EVENT = new Event("AppDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> dequeueApp(Uint256 appID) {
        final Function function = new Function(
                FUNC_DEQUEUEAPP, 
                Arrays.<Type>asList(appID), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addNode(Bytes32 nodeID, Bytes24 nodeAddress, Uint16 apiPort, Uint16 capacity, Bool isPrivate) {
        final Function function = new Function(
                FUNC_ADDNODE, 
                Arrays.<Type>asList(nodeID, nodeAddress, apiPort, capacity, isPrivate), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple8<Bytes32, Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>>> getApp(Uint256 appID) {
        final Function function = new Function(FUNC_GETAPP, 
                Arrays.<Type>asList(appID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<Tuple8<Bytes32, Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>>>(
                new Callable<Tuple8<Bytes32, Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>>>() {
                    @Override
                    public Tuple8<Bytes32, Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<Bytes32, Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>>(
                                (Bytes32) results.get(0), 
                                (Bytes32) results.get(1), 
                                (Bytes32) results.get(2), 
                                (Uint8) results.get(3), 
                                (Address) results.get(4), 
                                (DynamicArray<Bytes32>) results.get(5), 
                                (Uint256) results.get(6), 
                                (DynamicArray<Bytes32>) results.get(7));
                    }
                });
    }

    public RemoteCall<Uint256> enqueuedApps(Uint256 param0) {
        final Function function = new Function(FUNC_ENQUEUEDAPPS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addApp(Bytes32 storageHash, Bytes32 storageReceipt, Bytes32 storageType, Uint8 clusterSize, DynamicArray<Bytes32> pinToNodes) {
        final Function function = new Function(
                FUNC_ADDAPP, 
                Arrays.<Type>asList(storageHash, storageReceipt, storageType, clusterSize, pinToNodes), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Bytes32>> getNodesIds() {
        final Function function = new Function(FUNC_GETNODESIDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Uint256>>> getNode(Bytes32 nodeID) {
        final Function function = new Function(FUNC_GETNODE, 
                Arrays.<Type>asList(nodeID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes24>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint16>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Uint256>>>(
                new Callable<Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Uint256>>>() {
                    @Override
                    public Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Uint256>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Uint256>>(
                                (Bytes24) results.get(0), 
                                (Uint16) results.get(1), 
                                (Uint16) results.get(2), 
                                (Address) results.get(3), 
                                (Bool) results.get(4), 
                                (DynamicArray<Uint256>) results.get(5));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> deleteApp(Uint256 appID) {
        final Function function = new Function(
                FUNC_DELETEAPP, 
                Arrays.<Type>asList(appID), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bool> isContractOwner() {
        final Function function = new Function(FUNC_ISCONTRACTOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> appIDs(Uint256 param0) {
        final Function function = new Function(FUNC_APPIDS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> nodesIds(Uint256 param0) {
        final Function function = new Function(FUNC_NODESIDS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Uint256>> getNodeApps(Bytes32 nodeID) {
        final Function function = new Function(FUNC_GETNODEAPPS, 
                Arrays.<Type>asList(nodeID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> readyNodes(Uint256 param0) {
        final Function function = new Function(FUNC_READYNODES, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Uint256>> getAppIDs() {
        final Function function = new Function(FUNC_GETAPPIDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>> getAppWorkers(Uint256 appID) {
        final Function function = new Function(FUNC_GETAPPWORKERS, 
                Arrays.<Type>asList(appID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
        return new RemoteCall<Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>>(
                new Callable<Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>>() {
                    @Override
                    public Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>(
                                (DynamicArray<Bytes24>) results.get(0), 
                                (DynamicArray<Uint16>) results.get(1));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> deleteNode(Bytes32 nodeID) {
        final Function function = new Function(
                FUNC_DELETENODE, 
                Arrays.<Type>asList(nodeID), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<AppDeployedEventResponse> getAppDeployedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPDEPLOYED_EVENT, transactionReceipt);
        ArrayList<AppDeployedEventResponse> responses = new ArrayList<AppDeployedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppDeployedEventResponse typedResponse = new AppDeployedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appID = (Uint256) eventValues.getNonIndexedValues().get(0);
            typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.storageType = (Bytes32) eventValues.getNonIndexedValues().get(2);
            typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(3);
            typedResponse.nodeIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(4);
            typedResponse.nodeAddresses = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(5);
            typedResponse.ports = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(6);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppDeployedEventResponse> appDeployedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AppDeployedEventResponse>() {
            @Override
            public AppDeployedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPDEPLOYED_EVENT, log);
                AppDeployedEventResponse typedResponse = new AppDeployedEventResponse();
                typedResponse.log = log;
                typedResponse.appID = (Uint256) eventValues.getNonIndexedValues().get(0);
                typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.storageType = (Bytes32) eventValues.getNonIndexedValues().get(2);
                typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(3);
                typedResponse.nodeIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(4);
                typedResponse.nodeAddresses = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(5);
                typedResponse.ports = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(6);
                return typedResponse;
            }
        });
    }

    public Flowable<AppDeployedEventResponse> appDeployedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPDEPLOYED_EVENT));
        return appDeployedEventFlowable(filter);
    }

    public List<AppEnqueuedEventResponse> getAppEnqueuedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPENQUEUED_EVENT, transactionReceipt);
        ArrayList<AppEnqueuedEventResponse> responses = new ArrayList<AppEnqueuedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppEnqueuedEventResponse typedResponse = new AppEnqueuedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appID = (Uint256) eventValues.getNonIndexedValues().get(0);
            typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.storageReceipt = (Bytes32) eventValues.getNonIndexedValues().get(2);
            typedResponse.storageType = (Bytes32) eventValues.getNonIndexedValues().get(3);
            typedResponse.clusterSize = (Uint8) eventValues.getNonIndexedValues().get(4);
            typedResponse.owner = (Address) eventValues.getNonIndexedValues().get(5);
            typedResponse.pinToNodes = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(6);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppEnqueuedEventResponse> appEnqueuedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AppEnqueuedEventResponse>() {
            @Override
            public AppEnqueuedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPENQUEUED_EVENT, log);
                AppEnqueuedEventResponse typedResponse = new AppEnqueuedEventResponse();
                typedResponse.log = log;
                typedResponse.appID = (Uint256) eventValues.getNonIndexedValues().get(0);
                typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.storageReceipt = (Bytes32) eventValues.getNonIndexedValues().get(2);
                typedResponse.storageType = (Bytes32) eventValues.getNonIndexedValues().get(3);
                typedResponse.clusterSize = (Uint8) eventValues.getNonIndexedValues().get(4);
                typedResponse.owner = (Address) eventValues.getNonIndexedValues().get(5);
                typedResponse.pinToNodes = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(6);
                return typedResponse;
            }
        });
    }

    public Flowable<AppEnqueuedEventResponse> appEnqueuedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPENQUEUED_EVENT));
        return appEnqueuedEventFlowable(filter);
    }

    public List<NewNodeEventResponse> getNewNodeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWNODE_EVENT, transactionReceipt);
        ArrayList<NewNodeEventResponse> responses = new ArrayList<NewNodeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewNodeEventResponse typedResponse = new NewNodeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewNodeEventResponse>() {
            @Override
            public NewNodeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWNODE_EVENT, log);
                NewNodeEventResponse typedResponse = new NewNodeEventResponse();
                typedResponse.log = log;
                typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWNODE_EVENT));
        return newNodeEventFlowable(filter);
    }

    public List<NodeDeletedEventResponse> getNodeDeletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NODEDELETED_EVENT, transactionReceipt);
        ArrayList<NodeDeletedEventResponse> responses = new ArrayList<NodeDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NodeDeletedEventResponse typedResponse = new NodeDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NodeDeletedEventResponse> nodeDeletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NodeDeletedEventResponse>() {
            @Override
            public NodeDeletedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NODEDELETED_EVENT, log);
                NodeDeletedEventResponse typedResponse = new NodeDeletedEventResponse();
                typedResponse.log = log;
                typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<NodeDeletedEventResponse> nodeDeletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NODEDELETED_EVENT));
        return nodeDeletedEventFlowable(filter);
    }

    public List<AppDequeuedEventResponse> getAppDequeuedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPDEQUEUED_EVENT, transactionReceipt);
        ArrayList<AppDequeuedEventResponse> responses = new ArrayList<AppDequeuedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppDequeuedEventResponse typedResponse = new AppDequeuedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appID = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppDequeuedEventResponse> appDequeuedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AppDequeuedEventResponse>() {
            @Override
            public AppDequeuedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPDEQUEUED_EVENT, log);
                AppDequeuedEventResponse typedResponse = new AppDequeuedEventResponse();
                typedResponse.log = log;
                typedResponse.appID = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<AppDequeuedEventResponse> appDequeuedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPDEQUEUED_EVENT));
        return appDequeuedEventFlowable(filter);
    }

    public List<AppDeletedEventResponse> getAppDeletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPDELETED_EVENT, transactionReceipt);
        ArrayList<AppDeletedEventResponse> responses = new ArrayList<AppDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppDeletedEventResponse typedResponse = new AppDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appID = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppDeletedEventResponse> appDeletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AppDeletedEventResponse>() {
            @Override
            public AppDeletedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPDELETED_EVENT, log);
                AppDeletedEventResponse typedResponse = new AppDeletedEventResponse();
                typedResponse.log = log;
                typedResponse.appID = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<AppDeletedEventResponse> appDeletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPDELETED_EVENT));
        return appDeletedEventFlowable(filter);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class AppDeployedEventResponse {
        public Log log;

        public Uint256 appID;

        public Bytes32 storageHash;

        public Bytes32 storageType;

        public Uint256 genesisTime;

        public DynamicArray<Bytes32> nodeIDs;

        public DynamicArray<Bytes24> nodeAddresses;

        public DynamicArray<Uint16> ports;
    }

    public static class AppEnqueuedEventResponse {
        public Log log;

        public Uint256 appID;

        public Bytes32 storageHash;

        public Bytes32 storageReceipt;

        public Bytes32 storageType;

        public Uint8 clusterSize;

        public Address owner;

        public DynamicArray<Bytes32> pinToNodes;
    }

    public static class NewNodeEventResponse {
        public Log log;

        public Bytes32 id;
    }

    public static class NodeDeletedEventResponse {
        public Log log;

        public Bytes32 id;
    }

    public static class AppDequeuedEventResponse {
        public Log log;

        public Uint256 appID;
    }

    public static class AppDeletedEventResponse {
        public Log log;

        public Uint256 appID;
    }
}
