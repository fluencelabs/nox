/*
 * Copyright 2018 Fluence Labs Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package proto3.tendermint

/** From Tendermint's types.proto
 */
@SerialVersionUID(0L)
final case class Evidence(
  `type`: _root_.scala.Predef.String = "",
  validator: _root_.scala.Option[proto3.tendermint.Validator] = None,
  height: _root_.scala.Long = 0L,
  time: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = None,
  totalVotingPower: _root_.scala.Long = 0L
) extends scalapb.GeneratedMessage with scalapb.Message[Evidence] with scalapb.lenses.Updatable[Evidence] {

  @transient
  private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
  private[this] def __computeSerializedValue(): _root_.scala.Int = {
    var __size = 0

    {
      val __value = `type`
      if (__value != "") {
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      }
    };
    if (validator.isDefined) {
      val __value = validator.get
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream
        .computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
    };

    {
      val __value = height
      if (__value != 0L) {
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, __value)
      }
    };
    if (time.isDefined) {
      val __value = time.get
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream
        .computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
    };

    {
      val __value = totalVotingPower
      if (__value != 0L) {
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, __value)
      }
    };
    __size
  }
  final override def serializedSize: _root_.scala.Int = {
    var read = __serializedSizeCachedValue
    if (read == 0) {
      read = __computeSerializedValue()
      __serializedSizeCachedValue = read
    }
    read
  }

  def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
    {
      val __v = `type`
      if (__v != "") {
        _output__.writeString(1, __v)
      }
    };
    validator.foreach { __v =>
      val __m = __v
      _output__.writeTag(2, 2)
      _output__.writeUInt32NoTag(__m.serializedSize)
      __m.writeTo(_output__)
    };
    {
      val __v = height
      if (__v != 0L) {
        _output__.writeInt64(3, __v)
      }
    };
    time.foreach { __v =>
      val __m = __v
      _output__.writeTag(4, 2)
      _output__.writeUInt32NoTag(__m.serializedSize)
      __m.writeTo(_output__)
    };
    {
      val __v = totalVotingPower
      if (__v != 0L) {
        _output__.writeInt64(5, __v)
      }
    };
  }

  def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): proto3.tendermint.Evidence = {
    var __type = this.`type`
    var __validator = this.validator
    var __height = this.height
    var __time = this.time
    var __totalVotingPower = this.totalVotingPower
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __type = _input__.readString()
        case 18 =>
          __validator = Option(
            _root_.scalapb.LiteParser
              .readMessage(_input__, __validator.getOrElse(proto3.tendermint.Validator.defaultInstance))
          )
        case 24 =>
          __height = _input__.readInt64()
        case 34 =>
          __time = Option(
            _root_.scalapb.LiteParser
              .readMessage(_input__, __time.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance))
          )
        case 40 =>
          __totalVotingPower = _input__.readInt64()
        case tag => _input__.skipField(tag)
      }
    }
    proto3.tendermint.Evidence(
      `type` = __type,
      validator = __validator,
      height = __height,
      time = __time,
      totalVotingPower = __totalVotingPower
    )
  }
  def withType(__v: _root_.scala.Predef.String): Evidence = copy(`type` = __v)
  def getValidator: proto3.tendermint.Validator = validator.getOrElse(proto3.tendermint.Validator.defaultInstance)
  def clearValidator: Evidence = copy(validator = None)
  def withValidator(__v: proto3.tendermint.Validator): Evidence = copy(validator = Option(__v))
  def withHeight(__v: _root_.scala.Long): Evidence = copy(height = __v)

  def getTime: com.google.protobuf.timestamp.Timestamp =
    time.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)
  def clearTime: Evidence = copy(time = None)
  def withTime(__v: com.google.protobuf.timestamp.Timestamp): Evidence = copy(time = Option(__v))
  def withTotalVotingPower(__v: _root_.scala.Long): Evidence = copy(totalVotingPower = __v)

  def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
    (__fieldNumber: @ _root_.scala.unchecked) match {
      case 1 => {
        val __t = `type`
        if (__t != "") __t else null
      }
      case 2 => validator.orNull
      case 3 => {
        val __t = height
        if (__t != 0L) __t else null
      }
      case 4 => time.orNull
      case 5 => {
        val __t = totalVotingPower
        if (__t != 0L) __t else null
      }
    }
  }

  def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
    _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
    (__field.number: @ _root_.scala.unchecked) match {
      case 1 => _root_.scalapb.descriptors.PString(`type`)
      case 2 => validator.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      case 3 => _root_.scalapb.descriptors.PLong(height)
      case 4 => time.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      case 5 => _root_.scalapb.descriptors.PLong(totalVotingPower)
    }
  }
  def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
  def companion = proto3.tendermint.Evidence
}

object Evidence extends scalapb.GeneratedMessageCompanion[proto3.tendermint.Evidence] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[proto3.tendermint.Evidence] = this

  def fromFieldsMap(
    __fieldsMap: scala.collection.immutable.Map[
      _root_.com.google.protobuf.Descriptors.FieldDescriptor,
      _root_.scala.Any
    ]
  ): proto3.tendermint.Evidence = {
    _root_.scala.Predef.require(
      __fieldsMap.keys.forall(_.getContainingType() == javaDescriptor),
      "FieldDescriptor does not match message type."
    )
    val __fields = javaDescriptor.getFields
    proto3.tendermint.Evidence(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[proto3.tendermint.Validator]],
      __fieldsMap.getOrElse(__fields.get(2), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[_root_.scala.Option[com.google.protobuf.timestamp.Timestamp]],
      __fieldsMap.getOrElse(__fields.get(4), 0L).asInstanceOf[_root_.scala.Long]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[proto3.tendermint.Evidence] =
    _root_.scalapb.descriptors.Reads {
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(
          __fieldsMap.keys.forall(_.containingMessage == scalaDescriptor),
          "FieldDescriptor does not match message type."
        )
        proto3.tendermint.Evidence(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap
            .get(scalaDescriptor.findFieldByNumber(2).get)
            .flatMap(_.as[_root_.scala.Option[proto3.tendermint.Validator]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
          __fieldsMap
            .get(scalaDescriptor.findFieldByNumber(4).get)
            .flatMap(_.as[_root_.scala.Option[com.google.protobuf.timestamp.Timestamp]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }

  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor =
    TendermintProto.javaDescriptor.getMessageTypes.get(9)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TendermintProto.scalaDescriptor.messages(9)

  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @ _root_.scala.unchecked) match {
      case 2 => __out = proto3.tendermint.Validator
      case 4 => __out = com.google.protobuf.timestamp.Timestamp
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty

  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] =
    throw new MatchError(__fieldNumber)
  lazy val defaultInstance = proto3.tendermint.Evidence(
    )
  implicit class EvidenceLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, proto3.tendermint.Evidence])
      extends _root_.scalapb.lenses.ObjectLens[UpperPB, proto3.tendermint.Evidence](_l) {

    def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] =
      field(_.`type`)((c_, f_) => c_.copy(`type` = f_))

    def validator: _root_.scalapb.lenses.Lens[UpperPB, proto3.tendermint.Validator] =
      field(_.getValidator)((c_, f_) => c_.copy(validator = Option(f_)))

    def optionalValidator: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[proto3.tendermint.Validator]] =
      field(_.validator)((c_, f_) => c_.copy(validator = f_))

    def height: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] =
      field(_.height)((c_, f_) => c_.copy(height = f_))

    def time: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.timestamp.Timestamp] =
      field(_.getTime)((c_, f_) => c_.copy(time = Option(f_)))

    def optionalTime
      : _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]] =
      field(_.time)((c_, f_) => c_.copy(time = f_))

    def totalVotingPower: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] =
      field(_.totalVotingPower)((c_, f_) => c_.copy(totalVotingPower = f_))
  }
  final val TYPE_FIELD_NUMBER = 1
  final val VALIDATOR_FIELD_NUMBER = 2
  final val HEIGHT_FIELD_NUMBER = 3
  final val TIME_FIELD_NUMBER = 4
  final val TOTAL_VOTING_POWER_FIELD_NUMBER = 5
}
