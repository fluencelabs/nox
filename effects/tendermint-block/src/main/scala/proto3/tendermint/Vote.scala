// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package proto3.tendermint

/** @param type
  *   it should be of `byte` type, actually, so int32 may be incorrect. TODO: check
  */
@SerialVersionUID(0L)
final case class Vote(
    `type`: _root_.scala.Int = 0,
    height: _root_.scala.Long = 0L,
    round: _root_.scala.Int = 0,
    blockID: _root_.scala.Option[proto3.tendermint.BlockID] = None,
    time: _root_.scala.Option[proto3.tendermint.Timestamp] = None,
    validatorAddress: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    validatorIndex: _root_.scala.Int = 0,
    signature: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    ) extends scalapb.GeneratedMessage with scalapb.Message[Vote] with scalapb.lenses.Updatable[Vote] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = `type`
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
        }
      };
      
      {
        val __value = height
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      
      {
        val __value = round
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
        }
      };
      if (blockID.isDefined) {
        val __value = blockID.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (time.isDefined) {
        val __value = time.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = validatorAddress
        if (__value != _root_.com.google.protobuf.ByteString.EMPTY) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(6, __value)
        }
      };
      
      {
        val __value = validatorIndex
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(7, __value)
        }
      };
      
      {
        val __value = signature
        if (__value != _root_.com.google.protobuf.ByteString.EMPTY) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(8, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = `type`
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
      {
        val __v = height
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      {
        val __v = round
        if (__v != 0) {
          _output__.writeInt32(3, __v)
        }
      };
      blockID.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      time.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = validatorAddress
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(6, __v)
        }
      };
      {
        val __v = validatorIndex
        if (__v != 0) {
          _output__.writeInt32(7, __v)
        }
      };
      {
        val __v = signature
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(8, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): proto3.tendermint.Vote = {
      var __type = this.`type`
      var __height = this.height
      var __round = this.round
      var __blockID = this.blockID
      var __time = this.time
      var __validatorAddress = this.validatorAddress
      var __validatorIndex = this.validatorIndex
      var __signature = this.signature
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __type = _input__.readInt32()
          case 16 =>
            __height = _input__.readInt64()
          case 24 =>
            __round = _input__.readInt32()
          case 34 =>
            __blockID = Option(_root_.scalapb.LiteParser.readMessage(_input__, __blockID.getOrElse(proto3.tendermint.BlockID.defaultInstance)))
          case 42 =>
            __time = Option(_root_.scalapb.LiteParser.readMessage(_input__, __time.getOrElse(proto3.tendermint.Timestamp.defaultInstance)))
          case 50 =>
            __validatorAddress = _input__.readBytes()
          case 56 =>
            __validatorIndex = _input__.readInt32()
          case 66 =>
            __signature = _input__.readBytes()
          case tag => _input__.skipField(tag)
        }
      }
      proto3.tendermint.Vote(
          `type` = __type,
          height = __height,
          round = __round,
          blockID = __blockID,
          time = __time,
          validatorAddress = __validatorAddress,
          validatorIndex = __validatorIndex,
          signature = __signature
      )
    }
    def withType(__v: _root_.scala.Int): Vote = copy(`type` = __v)
    def withHeight(__v: _root_.scala.Long): Vote = copy(height = __v)
    def withRound(__v: _root_.scala.Int): Vote = copy(round = __v)
    def getBlockID: proto3.tendermint.BlockID = blockID.getOrElse(proto3.tendermint.BlockID.defaultInstance)
    def clearBlockID: Vote = copy(blockID = None)
    def withBlockID(__v: proto3.tendermint.BlockID): Vote = copy(blockID = Option(__v))
    def getTime: proto3.tendermint.Timestamp = time.getOrElse(proto3.tendermint.Timestamp.defaultInstance)
    def clearTime: Vote = copy(time = None)
    def withTime(__v: proto3.tendermint.Timestamp): Vote = copy(time = Option(__v))
    def withValidatorAddress(__v: _root_.com.google.protobuf.ByteString): Vote = copy(validatorAddress = __v)
    def withValidatorIndex(__v: _root_.scala.Int): Vote = copy(validatorIndex = __v)
    def withSignature(__v: _root_.com.google.protobuf.ByteString): Vote = copy(signature = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = `type`
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = height
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = round
          if (__t != 0) __t else null
        }
        case 4 => blockID.orNull
        case 5 => time.orNull
        case 6 => {
          val __t = validatorAddress
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 7 => {
          val __t = validatorIndex
          if (__t != 0) __t else null
        }
        case 8 => {
          val __t = signature
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(`type`)
        case 2 => _root_.scalapb.descriptors.PLong(height)
        case 3 => _root_.scalapb.descriptors.PInt(round)
        case 4 => blockID.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => time.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => _root_.scalapb.descriptors.PByteString(validatorAddress)
        case 7 => _root_.scalapb.descriptors.PInt(validatorIndex)
        case 8 => _root_.scalapb.descriptors.PByteString(signature)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = proto3.tendermint.Vote
}

object Vote extends scalapb.GeneratedMessageCompanion[proto3.tendermint.Vote] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[proto3.tendermint.Vote] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): proto3.tendermint.Vote = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    proto3.tendermint.Vote(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(1), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(2), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[_root_.scala.Option[proto3.tendermint.BlockID]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[_root_.scala.Option[proto3.tendermint.Timestamp]],
      __fieldsMap.getOrElse(__fields.get(5), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
      __fieldsMap.getOrElse(__fields.get(6), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(7), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[proto3.tendermint.Vote] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      proto3.tendermint.Vote(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[proto3.tendermint.BlockID]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[proto3.tendermint.Timestamp]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TendermintProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TendermintProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = proto3.tendermint.BlockID
      case 5 => __out = proto3.tendermint.Timestamp
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = proto3.tendermint.Vote(
  )
  implicit class VoteLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, proto3.tendermint.Vote]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, proto3.tendermint.Vote](_l) {
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def height: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.height)((c_, f_) => c_.copy(height = f_))
    def round: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.round)((c_, f_) => c_.copy(round = f_))
    def blockID: _root_.scalapb.lenses.Lens[UpperPB, proto3.tendermint.BlockID] = field(_.getBlockID)((c_, f_) => c_.copy(blockID = Option(f_)))
    def optionalBlockID: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[proto3.tendermint.BlockID]] = field(_.blockID)((c_, f_) => c_.copy(blockID = f_))
    def time: _root_.scalapb.lenses.Lens[UpperPB, proto3.tendermint.Timestamp] = field(_.getTime)((c_, f_) => c_.copy(time = Option(f_)))
    def optionalTime: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[proto3.tendermint.Timestamp]] = field(_.time)((c_, f_) => c_.copy(time = f_))
    def validatorAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.validatorAddress)((c_, f_) => c_.copy(validatorAddress = f_))
    def validatorIndex: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.validatorIndex)((c_, f_) => c_.copy(validatorIndex = f_))
    def signature: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.signature)((c_, f_) => c_.copy(signature = f_))
  }
  final val TYPE_FIELD_NUMBER = 1
  final val HEIGHT_FIELD_NUMBER = 2
  final val ROUND_FIELD_NUMBER = 3
  final val BLOCKID_FIELD_NUMBER = 4
  final val TIME_FIELD_NUMBER = 5
  final val VALIDATORADDRESS_FIELD_NUMBER = 6
  final val VALIDATORINDEX_FIELD_NUMBER = 7
  final val SIGNATURE_FIELD_NUMBER = 8
}
