/*
 * Copyright 2018 Fluence Labs Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package fluence.ethclient;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes24;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class Network extends Contract {
    private static final String BINARY = "6080604052600160075560008054600160a060020a031916331790556136738061002a6000396000f3006080604052600436106100e55763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663243dcbf281146100ea578063299cf8cd1461012457806329a7e871146101535780633b5aa5421461017d57806342c71f1d146101e257806350c946fe146103115780635e33dd29146103c45780637f7dcdbf146103dc5780638ec3773e14610405578063a48dd3571461041d578063acb952c214610435578063ae1a79331461044d578063ae6229e714610465578063bb8d6b441461047d578063d8fd5ce514610492578063f12a796b14610543575b600080fd5b3480156100f657600080fd5b5061012260043567ffffffffffffffff196024351661ffff60443581169060643516608435151561055b565b005b34801561013057600080fd5b506101226004803590602480359160ff6044351691606435908101910135610b5f565b34801561015f57600080fd5b5061016b60043561124c565b60408051918252519081900360200190f35b34801561018957600080fd5b5061019261126b565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101ce5781810151838201526020016101b6565b505050509050019250505060405180910390f35b3480156101ee57600080fd5b506101fa6004356112c5565b6040805189815260208082018a905260ff891692820192909252600160a060020a038716606082015260a081018590526101006080820181815287519183019190915286519192909160c084019160e08501916101208601918a8101910280838360005b8381101561027657818101518382015260200161025e565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156102b557818101518382015260200161029d565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156102f45781810151838201526020016102dc565b505050509050019b50505050505050505050505060405180910390f35b34801561031d57600080fd5b5061032960043561151f565b6040805167ffffffffffffffff198816815261ffff80881660208084019190915290871692820192909252600160a060020a0385166060820152831515608082015260c060a0820181815284519183019190915283519192909160e0840191858101910280838360005b838110156103ab578181015183820152602001610393565b5050505090500197505050505050505060405180910390f35b3480156103d057600080fd5b5061012260043561163e565b3480156103e857600080fd5b506103f1611992565b604080519115158252519081900360200190f35b34801561041157600080fd5b506101226004356119a3565b34801561042957600080fd5b5061016b600435611d72565b34801561044157600080fd5b5061016b600435611d80565b34801561045957600080fd5b50610192600435611d8e565b34801561047157600080fd5b5061016b600435611df4565b34801561048957600080fd5b50610192611e02565b34801561049e57600080fd5b506104aa600435611e59565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156104ee5781810151838201526020016104d6565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561052d578181015183820152602001610515565b5050505090500194505050505060405180910390f35b34801561054f57600080fd5b50610122600435612147565b610563613407565b60008061056e613445565b600089815260026020526040902054156105d2576040805160e560020a62461bcd02815260206004820152601f60248201527f54686973206e6f646520697320616c7265616479207265676973746572656400604482015290519081900360640190fd5b61ffff8087169088161115610631576040805160e560020a62461bcd02815260206004820181905260248201527f506f72742072616e676520697320656d707479206f7220696e636f7272656374604482015290519081900360640190fd5b6040805160e0810182528a815267ffffffffffffffff198a1660208083019190915261ffff808b16838501528916606083015233608083015287151560a083015282516000808252918101909352909160c083019150905260008a815260026020818152604092839020845181558482015160018201805495870151606088015177ffffffffffffffffffffffffffffffffffffffffffffffff19909716680100000000000000009093049290921779ffff000000000000000000000000000000000000000000000000191660c060020a61ffff93841602177fffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffff1660d060020a9290961691909102949094179093556080840151918301805460a086015173ffffffffffffffffffffffffffffffffffffffff19909116600160a060020a039094169390931774ff0000000000000000000000000000000000000000191660a060020a931515939093029290921790915560c0830151805193975087936107be926003850192019061348b565b5050600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b018a905550841515610832576001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018990555b604080518a815290517fb0cd47a7093fb93a9ce97304d3afb8df43e02e48502e47fd5fbb6c4020d935b59181900360200190a1600092505b600654831015610b5457600680548490811061088257fe5b60009182526020808320909101548083526004808352604093849020845160e08101865281548152600182015481860152600282015481870152600382015460ff81166060830152600160a060020a0361010090910416608082015291810180548651818702810187019097528087529397509194909360a08601939192919083018282801561093257602002820191906000526020600020905b8154815260019091019060200180831161091d575b50505050508152602001600582016060604051908101604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156109a657602002820191906000526020600020905b81548152600190910190602001808311610991575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610a2657602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116109ed5790505b505050505081525050815250509050610a3e81612507565b15610b4857610a4c836128bd565b600089815260026020818152604092839020835160e08101855281548152600182015467ffffffffffffffff19680100000000000000008202168285015261ffff60c060020a820481168388015260d060020a90910416606082015292810154600160a060020a038116608085015260ff60a060020a90910416151560a08401526003810180548551818502810185019096528086529394919360c0860193830182828015610b1b57602002820191906000526020600020905b81548152600190910190602001808311610b06575b5050505050815250509350836060015161ffff16846040015161ffff161115610b4357610b54565b610b4f565b6001909201915b61086a565b505050505050505050565b600080610b6a613407565b6000610b74613445565b600060ff891611610bf5576040805160e560020a62461bcd02815260206004820152602660248201527f436c75737465722073697a65206d757374206265206120706f7369746976652060448201527f6e756d6265720000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60ff8816861115610c9c576040805160e560020a62461bcd02815260206004820152604860248201527f6e756d626572206f662070696e546f206e6f6465732073686f756c642062652060448201527f6c657373206f7220657175616c20746f20746865206465736972656420636c7560648201527f7374657253697a65000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600094505b60ff8516861115610f8357868660ff8716818110610cbb57fe5b6020908102929092013560008181526002808552604091829020825160e08101845281548152600182015467ffffffffffffffff19680100000000000000008202168289015261ffff60c060020a820481168387015260d060020a90910416606082015291810154600160a060020a038116608084015260ff60a060020a90910416151560a0830152600381018054845181890281018901909552808552949a50919590945060c086019390830182828015610d9757602002820191906000526020600020905b81548152600190910190602001808311610d82575b505050919092525050506080810151909350600160a060020a03161515610e08576040805160e560020a62461bcd02815260206004820181905260248201527f43616e2070696e206f6e6c7920746f2072656769737465726564206e6f646573604482015290519081900360640190fd5b6080830151600160a060020a03163314610e6c576040805160e560020a62461bcd02815260206004820152601d60248201527f43616e2070696e206f6e6c7920746f206e6f64657320796f75206f776e000000604482015290519081900360640190fd5b600091505b60ff80861690831611610f785760ff85811690831614610f6d57868660ff8416818110610e9a57fe5b60200291909101358514159050610f6d576040805160e560020a62461bcd02815260206004820152606860248201527f4e6f64652069647320746f2070696e20746f206d75737420626520756e69717560448201527f652c206f746865727769736520746865206465706c6f796d656e74207265737560648201527f6c7420636f756c6420626520756e7072656469637461626c6520616e6420756e60848201527f657870656374656400000000000000000000000000000000000000000000000060a482015290519081900360c40190fd5b600190910190610e71565b600190940193610ca1565b6040805160e0810182526007805460018101909155815260208082018d90528183018c905260ff8b16606083015233608083015282518982028181018301909452898152919260a0840192918b918b918291908501908490808284375050509284525050604080516060808201835260008083528351818152602080820186528085019190915284518281528082018652848601529586019290925285518252600480865291839020865181558686015160018201559286015160028401558501516003830180546080880151600160a060020a03166101000274ffffffffffffffffffffffffffffffffffffffff001960ff90941660ff19909216919091179290921691909117905560a08501518051959650869592946110ac94509185019291019061348b565b5060c082015180516005830190815560208083015180516110d3926006870192019061348b565b50604082015180516110ef9160028401916020909101906134d8565b50508351600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00155506111349150829050612507565b15156112405780516006805460018101825560009182527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f019190915581516020808401516040808601516060808801516080808a015160a0808c015187518b8152808b018a905297880187905260ff851695880195909552600160a060020a0382169287019290925260c091860182815284519287019290925283517fd06cd11078f142450ff9608ee48936c79f15b10735ba71247d9a9e06ce829fa29a9798959793969195919360e08501928681019202908190849084905b8381101561122757818101518382015260200161120f565b5050505090500197505050505050505060405180910390a15b50505050505050505050565b600680548290811061125a57fe5b600091825260209091200154905081565b606060038054806020026020016040519081016040528092919081815260200182805480156112ba57602002820191906000526020600020905b815481526001909101906020018083116112a5575b505050505090505b90565b600080600080606060006060806112da613445565b60008a815260046020818152604092839020835160e08101855281548152600182015481840152600282015481860152600382015460ff811660608301526101009004600160a060020a0316608082015292810180548551818502810185019096528086529394919360a086019383018282801561137857602002820191906000526020600020905b81548152600190910190602001808311611363575b50505050508152602001600582016060604051908101604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156113ec57602002820191906000526020600020905b815481526001909101906020018083116113d7575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561146c57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116114335790505b5050509190925250505090525080519091506000106114d5576040805160e560020a62461bcd02815260206004820152601860248201527f7468657265206973206e6f207375636820636c75737465720000000000000000604482015290519081900360640190fd5b6020808201516040808401516060850151608086015160a087015160c0880151805197810151950151959f50929d50909b5099509750919550909350915050919395975091939597565b60008060008060006060611531613407565b600088815260026020818152604092839020835160e08101855281548152600182015467ffffffffffffffff19680100000000000000008202168285015261ffff60c060020a820481168388015260d060020a90910416606082015292810154600160a060020a038116608085015260ff60a060020a90910416151560a08401526003810180548551818502810185019096528086529394919360c086019383018282801561160057602002820191906000526020600020905b815481526001909101906020018083116115eb575b50505091909252505050602081015160408201516060830151608084015160a085015160c090950151939d929c50909a509850919650945092505050565b6000611648613445565b600091505b60065460ff83161015611690576006805484919060ff851690811061166e57fe5b600091825260209091200154141561168557611690565b60019091019061164d565b60065460ff831610611712576040805160e560020a62461bcd02815260206004820152602160248201527f6572726f722064656c6574696e67206170703a20617070206e6f7420666f756e60448201527f6400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600083815260046020818152604092839020835160e08101855281548152600182015481840152600282015481860152600382015460ff811660608301526101009004600160a060020a0316608082015292810180548551818502810185019096528086529394919360a08601938301828280156117b057602002820191906000526020600020905b8154815260019091019060200180831161179b575b505050505081526020016005820160606040519081016040529081600082015481526020016001820180548060200260200160405190810160405280929190818152602001828054801561182457602002820191906000526020600020905b8154815260019091019060200180831161180f575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156118a457602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161186b5790505b505050919092525050509052506080810151909150600160a060020a03163314806118d257506118d2611992565b151561194e576040805160e560020a62461bcd02815260206004820152603560248201527f6572726f722064656c6574696e67206170703a20796f75206d757374206f776e60448201527f207468652061707020746f2064656c6574652069740000000000000000000000606482015290519081900360840190fd5b61195a8260ff166128bd565b6040805184815290517f1e04af2c822ed90c02e73586e0d096ac612f1f56f3e1b7245a691e9208d012279181900360200190a1505050565b600054600160a060020a0316331490565b6119ab613445565b600082815260046020818152604092839020835160e08101855281548152600182015481840152600282015481860152600382015460ff811660608301526101009004600160a060020a0316608082015292810180548551818502810185019096528086529394919360a0860193830182828015611a4957602002820191906000526020600020905b81548152600190910190602001808311611a34575b5050505050815260200160058201606060405190810160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015611abd57602002820191906000526020600020905b81548152600190910190602001808311611aa8575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015611b3d57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611b045790505b5050509190925250505090525080519091501515611bcb576040805160e560020a62461bcd02815260206004820152602560248201527f6572726f722064656c6574696e67206170703a20636c7573746572206e6f742060448201527f666f756e64000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b80518214611c49576040805160e560020a62461bcd02815260206004820152602d60248201527f6572726f722064656c6574696e67206170703a20636c757374657220686f737460448201527f7320616e6f746865722061707000000000000000000000000000000000000000606482015290519081900360840190fd5b6080810151600160a060020a0316331480611c675750611c67611992565b1515611ce3576040805160e560020a62461bcd02815260206004820152603160248201527f6572726f722064656c6574696e67206170703a20796f75206d757374206f776e60448201527f2061707020746f2064656c657465206974000000000000000000000000000000606482015290519081900360840190fd5b60c0810151511515611d65576040805160e560020a62461bcd02815260206004820152603860248201527f6572726f722064656c6574696e67206170703a20617070206d7573742062652060448201527f6465706c6f7965642c2075736520646571756575654170700000000000000000606482015290519081900360840190fd5b611d6e82612933565b5050565b600580548290811061125a57fe5b600380548290811061125a57fe5b600081815260026020908152604091829020600301805483518184028101840190945280845260609392830182828015611de857602002820191906000526020600020905b81548152600190910190602001808311611dd3575b50505050509050919050565b600180548290811061125a57fe5b606060058054806020026020016040519081016040528092919081815260200182805480156112ba5760200282019190600052602060002090815481526001909101906020018083116112a5575050505050905090565b606080611e64613445565b6000848152600460208181526040808420815160e08101835281548152600182015481850152600282015481840152600382015460ff8116606080840191909152610100909104600160a060020a0316608083015294820180548451818702810187019095528085529596959194929360a0860193909290830182828015611f0c57602002820191906000526020600020905b81548152600190910190602001808311611ef7575b5050505050815260200160058201606060405190810160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015611f8057602002820191906000526020600020905b81548152600190910190602001808311611f6b575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561200057602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611fc75790505b505050919092525050509052508051909350600010612069576040805160e560020a62461bcd02815260206004820152601860248201527f7468657265206973206e6f207375636820636c75737465720000000000000000604482015290519081900360640190fd5b8260c00151602001515160405190808252806020026020018201604052801561209c578160200160208202803883390190505b509150600090505b8260c0015160200151518160ff16101561213257600260008460c00151602001518360ff168151811015156120d557fe5b602090810290910181015182528101919091526040016000206001015482516801000000000000000090910290839060ff841690811061211157fe5b67ffffffffffffffff199092166020928302909101909101526001016120a4565b5060c090910151604001519094909350915050565b61214f613407565b6000828152600260208181526040808420815160e08101835281548152600182015467ffffffffffffffff19680100000000000000008202168286015261ffff60c060020a820481168386015260d060020a90910416606082015293810154600160a060020a038116608086015260ff60a060020a90910416151560a0850152600381018054835181860281018601909452808452919360c0860193929083018282801561221d57602002820191906000526020600020905b81548152600190910190602001808311612208575b50505091909252505081519193505015156122a8576040805160e560020a62461bcd02815260206004820152602360248201527f6572726f722064656c6574696e67206e6f64653a206e6f6465206e6f7420666f60448201527f756e640000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6080820151600160a060020a03163314806122c657506122c6611992565b1515612342576040805160e560020a62461bcd02815260206004820152603360248201527f6572726f722064656c6574696e67206e6f64653a20796f75206d757374206f7760448201527f6e206e6f646520746f2064656c65746520697400000000000000000000000000606482015290519081900360840190fd5b60015481101561237c57600180548491908390811061235d57fe5b60009182526020909120015414156123745761237c565b600101612342565b60015481101561238f5761238f81612b27565b5060005b6003548110156123cd5760038054849190839081106123ae57fe5b60009182526020909120015414156123c5576123cd565b600101612393565b600354811061244c576040805160e560020a62461bcd02815260206004820152603560248201527f6572726f722064656c6574696e67206e6f64653a206e6f6465206e6f7420666f60448201527f756e6420696e206e6f6465734964732061727261790000000000000000000000606482015290519081900360840190fd5b61245581612b9d565b600083815260026020819052604082208281556001810180547fffffffff00000000000000000000000000000000000000000000000000000000169055908101805474ffffffffffffffffffffffffffffffffffffffffff19169055906124bf600383018261357d565b50506124cf838360c00151612c13565b6040805184815290517f56f9f72fa95bd700bf86a48601b950acaf6ab5ca05de316259979fba59b8d5289181900360200190a1505050565b60008060606000612516613407565b60008060009550876060015160ff1660405190808252806020026020018201604052801561255e57816020015b61254b613407565b8152602001906001900390816125435790505b5060a08901515160608a015160015492975060ff16031161288857600093505b8760a00151518460ff1610156126dc57600260008960a001518660ff168151811015156125a757fe5b60209081029091018101518252818101929092526040908101600020815160e08101835281548152600182015467ffffffffffffffff19680100000000000000008202168286015261ffff60c060020a820481168386015260d060020a9091041660608201526002820154600160a060020a038116608083015260ff60a060020a90910416151560a08201526003820180548451818702810187019095528085529194929360c086019390929083018282801561268457602002820191906000526020600020905b8154815260019091019060200180831161266f575b5050505050815250509250826060015161ffff16836040015161ffff1611156126b057600096506128b2565b82858760ff168151811015156126c257fe5b60209081029091010152600195860195939093019261257e565b600091505b600154821080156126fb5750876060015160ff168660ff16105b15612888576002600060018481548110151561271357fe5b600091825260208083209091015483528281019390935260409182019020815160e08101835281548152600182015467ffffffffffffffff19680100000000000000008202168286015261ffff60c060020a820481168386015260d060020a9091041660608201526002820154600160a060020a038116608083015260ff60a060020a90910416151560a08201526003820180548451818702810187019095528085529194929360c08601939092908301828280156127f257602002820191906000526020600020905b815481526001909101906020018083116127dd575b505050505081525050925060009050600093505b84518460ff16108015612817575080155b1561284f5782518551869060ff871690811061282f57fe5b60209081029091010151511415612844575060015b600190930192612806565b801561285a5761287d565b82858760ff1681518110151561286c57fe5b602090810290910101526001909501945b6001909101906126e1565b876060015160ff168660ff1614156128ad576128a48886612e1e565b600196506128b2565b600096505b505050505050919050565b600654600019018114612903576006805460001981019081106128dc57fe5b90600052602060002001546006828154811015156128f657fe5b6000918252602090912001555b60068054600019810190811061291557fe5b60009182526020822001556006805490611d6e90600019830161359e565b6005546000905b808260ff16101561297b576005805484919060ff851690811061295957fe5b60009182526020909120015414156129705761297b565b60019091019061293a565b60ff821681116129fb576040805160e560020a62461bcd02815260206004820152603160248201527f6572726f722064656c6574696e67206170703a20617070206e6f7420666f756e60448201527f6420696e20617070494473206172726179000000000000000000000000000000606482015290519081900360840190fd5b60ff8216600019820114612a4557600580546000198301908110612a1b57fe5b906000526020600020015460058360ff16815481101515612a3857fe5b6000918252602090912001555b600580546000198301908110612a5757fe5b60009182526020822001556005805490612a7590600019830161359e565b5060008381526004602081905260408220828155600181018390556002810183905560038101805474ffffffffffffffffffffffffffffffffffffffffff191690559190612ac59083018261357d565b60006005830181815590612adc600685018261357d565b612aea6002830160006135c7565b50506040805186815290517f1046890c8e1b424d44db76b25853fd8a96d1f0ba04836d2dc28fa5069c282de49350908190036020019150a1505050565b600154600019018114612b6d57600180546000198101908110612b4657fe5b9060005260206000200154600182815481101515612b6057fe5b6000918252602090912001555b600180546000198101908110612b7f57fe5b60009182526020822001556001805490611d6e90600019830161359e565b600354600019018114612be357600380546000198101908110612bbc57fe5b9060005260206000200154600382815481101515612bd657fe5b6000918252602090912001555b600380546000198101908110612bf557fe5b60009182526020822001556003805490611d6e90600019830161359e565b6000806060815b8451841015612e16578484815181101515612c3157fe5b602090810290910181015160008181526004835260409081902060060180548251818602810186019093528083529296509092909190830182828015612c9757602002820191906000526020600020905b81548152600190910190602001808311612c82575b50505050509150600090505b81518160ff161015612cdf5781518690839060ff8416908110612cc257fe5b602090810290910101511415612cd757612cdf565b600101612ca3565b815160ff821610612d60576040805160e560020a62461bcd02815260206004820152603360248201527f6572726f722064656c6574696e67206e6f64653a206e6f64654944207761736e60448201527f277420666f756e6420696e206e6f646549447300000000000000000000000000606482015290519081900360840190fd5b815160011415612d7857612d7383612933565b612e0b565b60018251038160ff16141515612dc057815182906000198101908110612d9a57fe5b90602001906020020151828260ff16815181101515612db557fe5b602090810290910101525b815182906000198101908110612dd257fe5b60006020918202909201810182905283516000190184528482526004815260409091208351612e099260069092019185019061348b565b505b600190930192612c1a565b505050505050565b60608060606000612e2d613407565b60008651886060015160ff16141515612eb6576040805160e560020a62461bcd02815260206004820152602e60248201527f54686572652073686f756c6420626520656e6f756768206e6f64657320746f2060448201527f666f726d206120636c7573746572000000000000000000000000000000000000606482015290519081900360840190fd5b876060015160ff16604051908082528060200260200182016040528015612ee7578160200160208202803883390190505b509550876060015160ff16604051908082528060200260200182016040528015612f1b578160200160208202803883390190505b509450876060015160ff16604051908082528060200260200182016040528015612f4f578160200160208202803883390190505b509350600092505b876060015160ff168360ff16101561304257868360ff16815181101515612f7a57fe5b9060200190602002015191508160000151868460ff16815181101515612f9c57fe5b60209081029091018101919091528201518551869060ff8616908110612fbe57fe5b67ffffffffffffffff1990921660209283029091019091015260408201518451859060ff8616908110612fed57fe5b61ffff909216602092830290910190910152815161300a9061327c565b508151600090815260026020908152604082208a51600390910180546001818101835591855292909320909101559290920191612f57565b5060408051606081810183524280835260208084018a905283850188905260c08c01939093528a5160009081526004808552908590208c5181558c8501516001820155948c01516002860155918b015160038501805460808e0151600160a060020a03166101000274ffffffffffffffffffffffffffffffffffffffff001960ff90941660ff19909216919091179290921691909117905560a08b0151805191948c9490936130f893908501929091019061348b565b5060c0820151805160058301908155602080830151805161311f926006870192019061348b565b506040820151805161313b9160028401916020909101906134d8565b5050509050507f7ebd759432107de75f67849b01f812a925ed0c9bb55ae4c4388dabc53aa7743b88600001518960200151838989896040518087600019166000191681526020018660001916600019168152602001858152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156131da5781810151838201526020016131c2565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015613219578181015183820152602001613201565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015613258578181015183820152602001613240565b50505050905001995050505050505050505060405180910390a15050505050505050565b6000613286613407565b60008381526002602081815260408084206001808201805479ffff00000000000000000000000000000000000000000000000019811660c060020a9182900461ffff908116909401841682021791829055845160e0810186528454815268010000000000000000830267ffffffffffffffff19168188015290820483168186015260d060020a909104909116606082015293810154600160a060020a038116608086015260a060020a900460ff16151560a0850152600381018054835181860281018601909452808452919360c0860193929083018282801561338957602002820191906000526020600020905b81548152600190910190602001808311613374575b5050505050815250509150816060015161ffff16826040015161ffff1611156133fb575060005b6001548110156133f257815160018054839081106133ca57fe5b60009182526020909120015414156133ea576133e581612b27565b6133f2565b6001016133b0565b60019250613400565b600092505b5050919050565b6040805160e08101825260008082526020820181905291810182905260608082018390526080820183905260a082019290925260c081019190915290565b60408051610120810182526000808252602082018190529181018290526060808201839052608082019290925260a081019190915260c081016134866135ec565b905290565b8280548282559060005260206000209081019282156134c8579160200282015b828111156134c857825182556020909201916001909101906134ab565b506134d492915061360e565b5090565b82805482825590600052602060002090600f016010900481019282156135715791602002820160005b8382111561354157835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302613501565b801561356f5782816101000a81549061ffff0219169055600201602081600101049283019260010302613541565b505b506134d4929150613628565b508054600082559060005260206000209081019061359b919061360e565b50565b8154818355818111156135c2576000838152602090206135c291810190830161360e565b505050565b50805460008255600f01601090049060005260206000209081019061359b919061360e565b6060604051908101604052806000815260200160608152602001606081525090565b6112c291905b808211156134d45760008155600101613614565b6112c291905b808211156134d457805461ffff1916815560010161362e5600a165627a7a723058207c0657491ad8a354efeca2d87576591471fa8ef86fe0c3d93e2deba9256854330029";

    public static final String FUNC_ADDNODE = "addNode";

    public static final String FUNC_ADDAPP = "addApp";

    public static final String FUNC_ENQUEUEDAPPS = "enqueuedApps";

    public static final String FUNC_GETNODESIDS = "getNodesIds";

    public static final String FUNC_GETAPP = "getApp";

    public static final String FUNC_GETNODE = "getNode";

    public static final String FUNC_DEQUEUEAPP = "dequeueApp";

    public static final String FUNC_ISCONTRACTOWNER = "isContractOwner";

    public static final String FUNC_DELETEAPP = "deleteApp";

    public static final String FUNC_APPIDS = "appIDs";

    public static final String FUNC_NODESIDS = "nodesIds";

    public static final String FUNC_GETNODEAPPS = "getNodeApps";

    public static final String FUNC_READYNODES = "readyNodes";

    public static final String FUNC_GETAPPIDS = "getAppIDs";

    public static final String FUNC_GETAPPWORKERS = "getAppWorkers";

    public static final String FUNC_DELETENODE = "deleteNode";

    public static final Event APPDEPLOYED_EVENT = new Event("AppDeployed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
    ;

    public static final Event APPENQUEUED_EVENT = new Event("AppEnqueued", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
    ;

    public static final Event NEWNODE_EVENT = new Event("NewNode", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event NODEDELETED_EVENT = new Event("NodeDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event APPDEQUEUED_EVENT = new Event("AppDequeued", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event APPDELETED_EVENT = new Event("AppDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> addNode(Bytes32 nodeID, Bytes24 nodeAddress, Uint16 startPort, Uint16 endPort, Bool isPrivate) {
        final Function function = new Function(
                FUNC_ADDNODE, 
                Arrays.<Type>asList(nodeID, nodeAddress, startPort, endPort, isPrivate), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addApp(Bytes32 storageHash, Bytes32 storageReceipt, Uint8 clusterSize, DynamicArray<Bytes32> pinToNodes) {
        final Function function = new Function(
                FUNC_ADDAPP, 
                Arrays.<Type>asList(storageHash, storageReceipt, clusterSize, pinToNodes), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bytes32> enqueuedApps(Uint256 param0) {
        final Function function = new Function(FUNC_ENQUEUEDAPPS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Bytes32>> getNodesIds() {
        final Function function = new Function(FUNC_GETNODESIDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>>> getApp(Bytes32 appID) {
        final Function function = new Function(FUNC_GETAPP, 
                Arrays.<Type>asList(appID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
        return new RemoteCall<Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>>>(
                new Callable<Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>>>() {
                    @Override
                    public Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>>(
                                (Bytes32) results.get(0), 
                                (Bytes32) results.get(1), 
                                (Uint8) results.get(2), 
                                (Address) results.get(3), 
                                (DynamicArray<Bytes32>) results.get(4), 
                                (Uint256) results.get(5), 
                                (DynamicArray<Bytes32>) results.get(6), 
                                (DynamicArray<Uint16>) results.get(7));
                    }
                });
    }

    public RemoteCall<Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>>> getNode(Bytes32 nodeID) {
        final Function function = new Function(FUNC_GETNODE, 
                Arrays.<Type>asList(nodeID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes24>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint16>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>>>(
                new Callable<Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>>>() {
                    @Override
                    public Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>>(
                                (Bytes24) results.get(0), 
                                (Uint16) results.get(1), 
                                (Uint16) results.get(2), 
                                (Address) results.get(3), 
                                (Bool) results.get(4), 
                                (DynamicArray<Bytes32>) results.get(5));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> dequeueApp(Bytes32 appID) {
        final Function function = new Function(
                FUNC_DEQUEUEAPP, 
                Arrays.<Type>asList(appID), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bool> isContractOwner() {
        final Function function = new Function(FUNC_ISCONTRACTOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> deleteApp(Bytes32 appID) {
        final Function function = new Function(
                FUNC_DELETEAPP, 
                Arrays.<Type>asList(appID), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bytes32> appIDs(Uint256 param0) {
        final Function function = new Function(FUNC_APPIDS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> nodesIds(Uint256 param0) {
        final Function function = new Function(FUNC_NODESIDS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Bytes32>> getNodeApps(Bytes32 nodeID) {
        final Function function = new Function(FUNC_GETNODEAPPS, 
                Arrays.<Type>asList(nodeID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> readyNodes(Uint256 param0) {
        final Function function = new Function(FUNC_READYNODES, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Bytes32>> getAppIDs() {
        final Function function = new Function(FUNC_GETAPPIDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>> getAppWorkers(Bytes32 appID) {
        final Function function = new Function(FUNC_GETAPPWORKERS, 
                Arrays.<Type>asList(appID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
        return new RemoteCall<Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>>(
                new Callable<Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>>() {
                    @Override
                    public Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>(
                                (DynamicArray<Bytes24>) results.get(0), 
                                (DynamicArray<Uint16>) results.get(1));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> deleteNode(Bytes32 nodeID) {
        final Function function = new Function(
                FUNC_DELETENODE, 
                Arrays.<Type>asList(nodeID), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<AppDeployedEventResponse> getAppDeployedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPDEPLOYED_EVENT, transactionReceipt);
        ArrayList<AppDeployedEventResponse> responses = new ArrayList<AppDeployedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppDeployedEventResponse typedResponse = new AppDeployedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(2);
            typedResponse.nodeIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(3);
            typedResponse.nodeAddresses = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(4);
            typedResponse.ports = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(5);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppDeployedEventResponse> appDeployedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AppDeployedEventResponse>() {
            @Override
            public AppDeployedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPDEPLOYED_EVENT, log);
                AppDeployedEventResponse typedResponse = new AppDeployedEventResponse();
                typedResponse.log = log;
                typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(2);
                typedResponse.nodeIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(3);
                typedResponse.nodeAddresses = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(4);
                typedResponse.ports = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(5);
                return typedResponse;
            }
        });
    }

    public Flowable<AppDeployedEventResponse> appDeployedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPDEPLOYED_EVENT));
        return appDeployedEventFlowable(filter);
    }

    public List<AppEnqueuedEventResponse> getAppEnqueuedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPENQUEUED_EVENT, transactionReceipt);
        ArrayList<AppEnqueuedEventResponse> responses = new ArrayList<AppEnqueuedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppEnqueuedEventResponse typedResponse = new AppEnqueuedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.storageReceipt = (Bytes32) eventValues.getNonIndexedValues().get(2);
            typedResponse.clusterSize = (Uint8) eventValues.getNonIndexedValues().get(3);
            typedResponse.owner = (Address) eventValues.getNonIndexedValues().get(4);
            typedResponse.pinToNodes = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(5);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppEnqueuedEventResponse> appEnqueuedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AppEnqueuedEventResponse>() {
            @Override
            public AppEnqueuedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPENQUEUED_EVENT, log);
                AppEnqueuedEventResponse typedResponse = new AppEnqueuedEventResponse();
                typedResponse.log = log;
                typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.storageReceipt = (Bytes32) eventValues.getNonIndexedValues().get(2);
                typedResponse.clusterSize = (Uint8) eventValues.getNonIndexedValues().get(3);
                typedResponse.owner = (Address) eventValues.getNonIndexedValues().get(4);
                typedResponse.pinToNodes = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(5);
                return typedResponse;
            }
        });
    }

    public Flowable<AppEnqueuedEventResponse> appEnqueuedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPENQUEUED_EVENT));
        return appEnqueuedEventFlowable(filter);
    }

    public List<NewNodeEventResponse> getNewNodeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWNODE_EVENT, transactionReceipt);
        ArrayList<NewNodeEventResponse> responses = new ArrayList<NewNodeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewNodeEventResponse typedResponse = new NewNodeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewNodeEventResponse>() {
            @Override
            public NewNodeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWNODE_EVENT, log);
                NewNodeEventResponse typedResponse = new NewNodeEventResponse();
                typedResponse.log = log;
                typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWNODE_EVENT));
        return newNodeEventFlowable(filter);
    }

    public List<NodeDeletedEventResponse> getNodeDeletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NODEDELETED_EVENT, transactionReceipt);
        ArrayList<NodeDeletedEventResponse> responses = new ArrayList<NodeDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NodeDeletedEventResponse typedResponse = new NodeDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NodeDeletedEventResponse> nodeDeletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NodeDeletedEventResponse>() {
            @Override
            public NodeDeletedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NODEDELETED_EVENT, log);
                NodeDeletedEventResponse typedResponse = new NodeDeletedEventResponse();
                typedResponse.log = log;
                typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<NodeDeletedEventResponse> nodeDeletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NODEDELETED_EVENT));
        return nodeDeletedEventFlowable(filter);
    }

    public List<AppDequeuedEventResponse> getAppDequeuedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPDEQUEUED_EVENT, transactionReceipt);
        ArrayList<AppDequeuedEventResponse> responses = new ArrayList<AppDequeuedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppDequeuedEventResponse typedResponse = new AppDequeuedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppDequeuedEventResponse> appDequeuedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AppDequeuedEventResponse>() {
            @Override
            public AppDequeuedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPDEQUEUED_EVENT, log);
                AppDequeuedEventResponse typedResponse = new AppDequeuedEventResponse();
                typedResponse.log = log;
                typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<AppDequeuedEventResponse> appDequeuedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPDEQUEUED_EVENT));
        return appDequeuedEventFlowable(filter);
    }

    public List<AppDeletedEventResponse> getAppDeletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPDELETED_EVENT, transactionReceipt);
        ArrayList<AppDeletedEventResponse> responses = new ArrayList<AppDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppDeletedEventResponse typedResponse = new AppDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppDeletedEventResponse> appDeletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AppDeletedEventResponse>() {
            @Override
            public AppDeletedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPDELETED_EVENT, log);
                AppDeletedEventResponse typedResponse = new AppDeletedEventResponse();
                typedResponse.log = log;
                typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<AppDeletedEventResponse> appDeletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPDELETED_EVENT));
        return appDeletedEventFlowable(filter);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class AppDeployedEventResponse {
        public Log log;

        public Bytes32 appID;

        public Bytes32 storageHash;

        public Uint256 genesisTime;

        public DynamicArray<Bytes32> nodeIDs;

        public DynamicArray<Bytes24> nodeAddresses;

        public DynamicArray<Uint16> ports;
    }

    public static class AppEnqueuedEventResponse {
        public Log log;

        public Bytes32 appID;

        public Bytes32 storageHash;

        public Bytes32 storageReceipt;

        public Uint8 clusterSize;

        public Address owner;

        public DynamicArray<Bytes32> pinToNodes;
    }

    public static class NewNodeEventResponse {
        public Log log;

        public Bytes32 id;
    }

    public static class NodeDeletedEventResponse {
        public Log log;

        public Bytes32 id;
    }

    public static class AppDequeuedEventResponse {
        public Log log;

        public Bytes32 appID;
    }

    public static class AppDeletedEventResponse {
        public Log log;

        public Bytes32 appID;
    }
}
