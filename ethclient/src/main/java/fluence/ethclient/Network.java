/*
 * Copyright 2018 Fluence Labs Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package fluence.ethclient;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes24;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class Network extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_ADDNODE = "addNode";

    public static final String FUNC_ADDAPP = "addApp";

    public static final String FUNC_GETNODESIDS = "getNodesIds";

    public static final String FUNC_GETNODE = "getNode";

    public static final String FUNC_DEQUEUEAPP = "dequeueApp";

    public static final String FUNC_GETENQUEUEDAPPS = "getEnqueuedApps";

    public static final String FUNC_DELETEAPP = "deleteApp";

    public static final String FUNC_APPIDS = "appIDs";

    public static final String FUNC_NODESIDS = "nodesIds";

    public static final String FUNC_GETNODEAPPS = "getNodeApps";

    public static final String FUNC_READYNODES = "readyNodes";

    public static final String FUNC_GETAPPIDS = "getAppIDs";

    public static final String FUNC_GETAPPWORKERS = "getAppWorkers";

    public static final String FUNC_GETCLUSTER = "getCluster";

    public static final Event CLUSTERFORMED_EVENT = new Event("ClusterFormed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
    ;

    public static final Event APPENQUEUED_EVENT = new Event("AppEnqueued", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
    ;

    public static final Event NEWNODE_EVENT = new Event("NewNode", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event APPDEQUEUED_EVENT = new Event("AppDequeued", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event APPDELETED_EVENT = new Event("AppDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> addNode(Bytes32 nodeID, Bytes24 nodeAddress, Uint16 startPort, Uint16 endPort, Bool isPrivate) {
        final Function function = new Function(
                FUNC_ADDNODE, 
                Arrays.<Type>asList(nodeID, nodeAddress, startPort, endPort, isPrivate), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addApp(Bytes32 storageHash, Bytes32 storageReceipt, Uint8 clusterSize, DynamicArray<Bytes32> pinToNodes) {
        final Function function = new Function(
                FUNC_ADDAPP, 
                Arrays.<Type>asList(storageHash, storageReceipt, clusterSize, pinToNodes), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Bytes32>> getNodesIds() {
        final Function function = new Function(FUNC_GETNODESIDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>>> getNode(Bytes32 nodeID) {
        final Function function = new Function(FUNC_GETNODE, 
                Arrays.<Type>asList(nodeID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes24>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint16>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>>>(
                new Callable<Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>>>() {
                    @Override
                    public Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>>(
                                (Bytes24) results.get(0), 
                                (Uint16) results.get(1), 
                                (Uint16) results.get(2), 
                                (Address) results.get(3), 
                                (Bool) results.get(4), 
                                (DynamicArray<Bytes32>) results.get(5));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> dequeueApp(Bytes32 appID) {
        final Function function = new Function(
                FUNC_DEQUEUEAPP, 
                Arrays.<Type>asList(appID), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Uint256>, DynamicArray<Bytes32>>> getEnqueuedApps() {
        final Function function = new Function(FUNC_GETENQUEUEDAPPS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint8>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Uint256>, DynamicArray<Bytes32>>>(
                new Callable<Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Uint256>, DynamicArray<Bytes32>>>() {
                    @Override
                    public Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Uint256>, DynamicArray<Bytes32>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Uint256>, DynamicArray<Bytes32>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Bytes32>) results.get(1), 
                                (DynamicArray<Uint8>) results.get(2), 
                                (DynamicArray<Address>) results.get(3), 
                                (DynamicArray<Uint256>) results.get(4), 
                                (DynamicArray<Bytes32>) results.get(5));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> deleteApp(Bytes32 appID) {
        final Function function = new Function(
                FUNC_DELETEAPP, 
                Arrays.<Type>asList(appID), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bytes32> appIDs(Uint256 param0) {
        final Function function = new Function(FUNC_APPIDS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> nodesIds(Uint256 param0) {
        final Function function = new Function(FUNC_NODESIDS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Bytes32>> getNodeApps(Bytes32 nodeID) {
        final Function function = new Function(FUNC_GETNODEAPPS, 
                Arrays.<Type>asList(nodeID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> readyNodes(Uint256 param0) {
        final Function function = new Function(FUNC_READYNODES, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Bytes32>> getAppIDs() {
        final Function function = new Function(FUNC_GETAPPIDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>> getAppWorkers(Bytes32 appID) {
        final Function function = new Function(FUNC_GETAPPWORKERS, 
                Arrays.<Type>asList(appID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
        return new RemoteCall<Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>>(
                new Callable<Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>>() {
                    @Override
                    public Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>(
                                (DynamicArray<Bytes24>) results.get(0), 
                                (DynamicArray<Uint16>) results.get(1));
                    }
                });
    }

    public RemoteCall<Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>>> getCluster(Bytes32 appID) {
        final Function function = new Function(FUNC_GETCLUSTER, 
                Arrays.<Type>asList(appID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
        return new RemoteCall<Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>>>(
                new Callable<Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>>>() {
                    @Override
                    public Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>>(
                                (Bytes32) results.get(0), 
                                (Bytes32) results.get(1), 
                                (Uint8) results.get(2), 
                                (Address) results.get(3), 
                                (DynamicArray<Bytes32>) results.get(4), 
                                (Uint256) results.get(5), 
                                (DynamicArray<Bytes32>) results.get(6), 
                                (DynamicArray<Uint16>) results.get(7));
                    }
                });
    }

    public List<ClusterFormedEventResponse> getClusterFormedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CLUSTERFORMED_EVENT, transactionReceipt);
        ArrayList<ClusterFormedEventResponse> responses = new ArrayList<ClusterFormedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ClusterFormedEventResponse typedResponse = new ClusterFormedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(2);
            typedResponse.nodeIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(3);
            typedResponse.nodeAddresses = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(4);
            typedResponse.ports = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(5);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ClusterFormedEventResponse> clusterFormedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ClusterFormedEventResponse>() {
            @Override
            public ClusterFormedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CLUSTERFORMED_EVENT, log);
                ClusterFormedEventResponse typedResponse = new ClusterFormedEventResponse();
                typedResponse.log = log;
                typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(2);
                typedResponse.nodeIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(3);
                typedResponse.nodeAddresses = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(4);
                typedResponse.ports = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(5);
                return typedResponse;
            }
        });
    }

    public Flowable<ClusterFormedEventResponse> clusterFormedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CLUSTERFORMED_EVENT));
        return clusterFormedEventFlowable(filter);
    }

    public List<AppEnqueuedEventResponse> getAppEnqueuedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPENQUEUED_EVENT, transactionReceipt);
        ArrayList<AppEnqueuedEventResponse> responses = new ArrayList<AppEnqueuedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppEnqueuedEventResponse typedResponse = new AppEnqueuedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.storageReceipt = (Bytes32) eventValues.getNonIndexedValues().get(2);
            typedResponse.clusterSize = (Uint8) eventValues.getNonIndexedValues().get(3);
            typedResponse.owner = (Address) eventValues.getNonIndexedValues().get(4);
            typedResponse.pinToNodes = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(5);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppEnqueuedEventResponse> appEnqueuedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AppEnqueuedEventResponse>() {
            @Override
            public AppEnqueuedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPENQUEUED_EVENT, log);
                AppEnqueuedEventResponse typedResponse = new AppEnqueuedEventResponse();
                typedResponse.log = log;
                typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.storageReceipt = (Bytes32) eventValues.getNonIndexedValues().get(2);
                typedResponse.clusterSize = (Uint8) eventValues.getNonIndexedValues().get(3);
                typedResponse.owner = (Address) eventValues.getNonIndexedValues().get(4);
                typedResponse.pinToNodes = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(5);
                return typedResponse;
            }
        });
    }

    public Flowable<AppEnqueuedEventResponse> appEnqueuedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPENQUEUED_EVENT));
        return appEnqueuedEventFlowable(filter);
    }

    public List<NewNodeEventResponse> getNewNodeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWNODE_EVENT, transactionReceipt);
        ArrayList<NewNodeEventResponse> responses = new ArrayList<NewNodeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewNodeEventResponse typedResponse = new NewNodeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewNodeEventResponse>() {
            @Override
            public NewNodeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWNODE_EVENT, log);
                NewNodeEventResponse typedResponse = new NewNodeEventResponse();
                typedResponse.log = log;
                typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWNODE_EVENT));
        return newNodeEventFlowable(filter);
    }

    public List<AppDequeuedEventResponse> getAppDequeuedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPDEQUEUED_EVENT, transactionReceipt);
        ArrayList<AppDequeuedEventResponse> responses = new ArrayList<AppDequeuedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppDequeuedEventResponse typedResponse = new AppDequeuedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppDequeuedEventResponse> appDequeuedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AppDequeuedEventResponse>() {
            @Override
            public AppDequeuedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPDEQUEUED_EVENT, log);
                AppDequeuedEventResponse typedResponse = new AppDequeuedEventResponse();
                typedResponse.log = log;
                typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<AppDequeuedEventResponse> appDequeuedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPDEQUEUED_EVENT));
        return appDequeuedEventFlowable(filter);
    }

    public List<AppDeletedEventResponse> getAppDeletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPDELETED_EVENT, transactionReceipt);
        ArrayList<AppDeletedEventResponse> responses = new ArrayList<AppDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppDeletedEventResponse typedResponse = new AppDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppDeletedEventResponse> appDeletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AppDeletedEventResponse>() {
            @Override
            public AppDeletedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPDELETED_EVENT, log);
                AppDeletedEventResponse typedResponse = new AppDeletedEventResponse();
                typedResponse.log = log;
                typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<AppDeletedEventResponse> appDeletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPDELETED_EVENT));
        return appDeletedEventFlowable(filter);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ClusterFormedEventResponse {
        public Log log;

        public Bytes32 appID;

        public Bytes32 storageHash;

        public Uint256 genesisTime;

        public DynamicArray<Bytes32> nodeIDs;

        public DynamicArray<Bytes24> nodeAddresses;

        public DynamicArray<Uint16> ports;
    }

    public static class AppEnqueuedEventResponse {
        public Log log;

        public Bytes32 appID;

        public Bytes32 storageHash;

        public Bytes32 storageReceipt;

        public Uint8 clusterSize;

        public Address owner;

        public DynamicArray<Bytes32> pinToNodes;
    }

    public static class NewNodeEventResponse {
        public Log log;

        public Bytes32 id;
    }

    public static class AppDequeuedEventResponse {
        public Log log;

        public Bytes32 appID;
    }

    public static class AppDeletedEventResponse {
        public Log log;

        public Bytes32 appID;
    }
}
