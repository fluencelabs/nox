/*
 * Copyright 2018 Fluence Labs Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package fluence.ethclient;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes24;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class Network extends Contract {
    private static final String BINARY = "60806040526001600555600160075534801561001a57600080fd5b506130308061002a6000396000f3006080604052600436106100ae5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631cd1d5c781146100b3578063243dcbf2146100d0578063299cf8cd1461010857806350c946fe14610137578063880680bc146101ea578063a5d4322814610322578063acb952c21461034c578063ae6229e714610364578063c7c02e441461037c578063e2683e92146103e4578063e9a4041214610513575b600080fd5b3480156100bf57600080fd5b506100ce6004356024356105c4565b005b3480156100dc57600080fd5b506100ce60043567ffffffffffffffff196024351661ffff604435811690606435166084351515610ad6565b34801561011457600080fd5b506100ce6004803590602480359160ff6044351691606435908101910135610fd1565b34801561014357600080fd5b5061014f60043561169b565b6040805167ffffffffffffffff198816815261ffff80881660208084019190915290871692820192909252600160a060020a0385166060820152831515608082015260c060a0820181815284519183019190915283519192909160e0840191858101910280838360005b838110156101d15781810151838201526020016101b9565b5050505090500197505050505050505060405180910390f35b3480156101f657600080fd5b506101ff6117ba565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b8381101561024b578181015183820152602001610233565b50505050905001858103845288818151815260200191508051906020019060200280838360005b8381101561028a578181015183820152602001610272565b50505050905001858103835287818151815260200191508051906020019060200280838360005b838110156102c95781810151838201526020016102b1565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156103085781810151838201526020016102f0565b505050509050019850505050505050505060405180910390f35b34801561032e57600080fd5b5061033a6004356119fb565b60408051918252519081900360200190f35b34801561035857600080fd5b5061033a600435611a1a565b34801561037057600080fd5b5061033a600435611a28565b34801561038857600080fd5b50610394600435611a36565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156103d05781810151838201526020016103b8565b505050509050019250505060405180910390f35b3480156103f057600080fd5b506103fc600435611a9c565b6040805189815260208082018a905260ff891692820192909252600160a060020a038716606082015260a081018590526101006080820181815287519183019190915286519192909160c084019160e08501916101208601918a8101910280838360005b83811015610478578181015183820152602001610460565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156104b757818101518382015260200161049f565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156104f65781810151838201526020016104de565b505050509050019b50505050505050505050505060405180910390f35b34801561051f57600080fd5b5061052b600435611d06565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561056f578181015183820152602001610557565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156105ae578181015183820152602001610596565b5050505090500194505050505060405180910390f35b6105cc612cf8565b60006105d6612d2f565b600084151561075f57600092505b60065460ff841610156106cc576006805460ff851690811061060257fe5b60009182526020918290206040805160c081018252600590930290910180548352600181015483850152600281015483830152600381015460ff81166060850152600160a060020a036101009091041660808401526004810180548351818702810187019094528084529394919360a0860193928301828280156106a657602002820191906000526020600020905b81548152600190910190602001808311610691575b5050509190925250508151919550508614156106c1576106cc565b6001909201916105e4565b60065460ff84161061074e576040805160e560020a62461bcd02815260206004820152602160248201527f6572726f722064656c6574696e67206170703a20617070206e6f7420666f756e60448201527f6400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b61075a8360ff16611fea565b610a93565b600085815260036020818152604092839020835160a0808201865282548252855160c08101875260018401805482526002850154828701529584015481880152600484015460ff811660608301526101009004600160a060020a0316608082015260058401805488518188028101880190995280895293979496888701969295909493860193909283018282801561081757602002820191906000526020600020905b81548152600190910190602001808311610802575b5050505050815250508152602001600682015481526020016007820180548060200260200160405190810160405280929190818152602001828054801561087e57602002820191906000526020600020905b81548152600190910190602001808311610869575b50505050508152602001600882018054806020026020016040519081016040528092919081815260200182805480156108fe57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116108c55790505b5050509190925250508151919350501515610989576040805160e560020a62461bcd02815260206004820152602560248201527f6572726f722064656c6574696e67206170703a20636c7573746572206e6f742060448201527f666f756e64000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6020820151518614610a0b576040805160e560020a62461bcd02815260206004820152602d60248201527f6572726f722064656c6574696e67206170703a20636c757374657220686f737460448201527f7320616e6f746865722061707000000000000000000000000000000000000000606482015290519081900360840190fd5b610a148561212c565b9050801515610a93576040805160e560020a62461bcd02815260206004820152603960248201527f6572726f722064656c6574696e67206170703a20636c7573746572206e6f742060448201527f666f756e6420696e20636c757374657249647320617272617900000000000000606482015290519081900360840190fd5b604080518781526020810187905281517f382d79ecce9da4be885e410514638bdcffd09a1269795d21d46942044f6d95b2929181900390910190a1505050505050565b610ade612d66565b6000610ae8612cf8565b60008881526001602052604090205415610b4c576040805160e560020a62461bcd02815260206004820152601f60248201527f54686973206e6f646520697320616c7265616479207265676973746572656400604482015290519081900360640190fd5b61ffff8086169087161115610bab576040805160e560020a62461bcd02815260206004820181905260248201527f506f72742072616e676520697320656d707479206f7220696e636f7272656374604482015290519081900360640190fd5b6040805160e08101825289815267ffffffffffffffff19891660208083019190915261ffff808a16838501528816606083015233608083015286151560a083015282516000808252918101909352909160c08301915090526000898152600160208181526040928390208451815584820151928101805494860151606087015177ffffffffffffffffffffffffffffffffffffffffffffffff19909616680100000000000000009095049490941779ffff000000000000000000000000000000000000000000000000191660c060020a61ffff95861602177fffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffff1660d060020a949095169390930293909317909155608083015160028301805460a086015173ffffffffffffffffffffffffffffffffffffffff19909116600160a060020a039093169290921774ff0000000000000000000000000000000000000000191660a060020a9215159290920291909117905560c083015180519396508693610d379260038501920190612da4565b5050600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0189905550831515610da957600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563018890555b6040805189815290517fb0cd47a7093fb93a9ce97304d3afb8df43e02e48502e47fd5fbb6c4020d935b59181900360200190a1600091505b600654821015610fc7576006805483908110610df957fe5b60009182526020918290206040805160c081018252600590930290910180548352600181015483850152600281015483830152600381015460ff81166060850152600160a060020a036101009091041660808401526004810180548351818702810187019094528084529394919360a086019392830182828015610e9d57602002820191906000526020600020905b81548152600190910190602001808311610e88575b5050505050815250509050610eb181612291565b15610fbb57610ebf82611fea565b600088815260016020818152604092839020835160e081018552815481529281015467ffffffffffffffff19680100000000000000008202168484015261ffff60c060020a820481168587015260d060020a9091041660608401526002810154600160a060020a038116608085015260ff60a060020a90910416151560a08401526003810180548551818502810185019096528086529394919360c0860193830182828015610f8e57602002820191906000526020600020905b81548152600190910190602001808311610f79575b5050505050815250509250826060015161ffff16836040015161ffff161115610fb657610fc7565b610fc2565b6001909101905b610de1565b5050505050505050565b600080610fdc612d66565b6000610fe6612cf8565b600060ff891611611067576040805160e560020a62461bcd02815260206004820152602660248201527f436c75737465722073697a65206d757374206265206120706f7369746976652060448201527f6e756d6265720000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60ff881686111561110e576040805160e560020a62461bcd02815260206004820152604860248201527f6e756d626572206f662070696e546f206e6f6465732073686f756c642062652060448201527f6c657373206f7220657175616c20746f20746865206465736972656420636c7560648201527f7374657253697a65000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600094505b60ff85168611156113f557868660ff871681811061112d57fe5b6020908102929092013560008181526001808552604091829020825160e081018452815481529181015467ffffffffffffffff19680100000000000000008202168388015261ffff60c060020a820481168486015260d060020a9091041660608301526002810154600160a060020a038116608084015260ff60a060020a90910416151560a0830152600381018054845181890281018901909552808552949a50919590945060c08601939083018282801561120957602002820191906000526020600020905b815481526001909101906020018083116111f4575b505050919092525050506080810151909350600160a060020a0316151561127a576040805160e560020a62461bcd02815260206004820181905260248201527f43616e2070696e206f6e6c7920746f2072656769737465726564206e6f646573604482015290519081900360640190fd5b6080830151600160a060020a031633146112de576040805160e560020a62461bcd02815260206004820152601d60248201527f43616e2070696e206f6e6c7920746f206e6f64657320796f75206f776e000000604482015290519081900360640190fd5b600091505b60ff808616908316116113ea5760ff858116908316146113df57868660ff841681811061130c57fe5b602002919091013585141590506113df576040805160e560020a62461bcd02815260206004820152606860248201527f4e6f64652069647320746f2070696e20746f206d75737420626520756e69717560448201527f652c206f746865727769736520746865206465706c6f796d656e74207265737560648201527f6c7420636f756c6420626520756e7072656469637461626c6520616e6420756e60848201527f657870656374656400000000000000000000000000000000000000000000000060a482015290519081900360c40190fd5b6001909101906112e3565b600190940193611113565b6040805160c0810182526007805460018101909155815260208082018d90528183018c905260ff8b16606083015233608083015282518982028181018301909452898152919260a0840192918b918b91829190850190849080828437820191505050505050815250905061146881612291565b151561168f576006805460018101808355600092909252825160059091027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f81019182556020808501517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4083015560408501517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4183015560608501517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d42830180546080880151600160a060020a03166101000274ffffffffffffffffffffffffffffffffffffffff001960ff90941660ff19909216919091179290921691909117905560a085015180518694936115a5937ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d43909101920190612da4565b505050507fd06cd11078f142450ff9608ee48936c79f15b10735ba71247d9a9e06ce829fa2816000015182602001518360400151846060015185608001518660a00151604051808760001916600019168152602001866000191660001916815260200185600019166000191681526020018460ff1660ff16815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b8381101561167657818101518382015260200161165e565b5050505090500197505050505050505060405180910390a15b50505050505050505050565b600080600080600060606116ad612d66565b600088815260016020818152604092839020835160e081018552815481529281015467ffffffffffffffff19680100000000000000008202168484015261ffff60c060020a820481168587015260d060020a9091041660608401526002810154600160a060020a038116608085015260ff60a060020a90910416151560a08401526003810180548551818502810185019096528086529394919360c086019383018282801561177c57602002820191906000526020600020905b81548152600190910190602001808311611767575b50505091909252505050602081015160408201516060830151608084015160a085015160c090950151939d929c50909a509850919650945092505050565b60608060608060608060608060006117d0612cf8565b6006546040805182815260208084028201019091529080156117fc578160200160208202803883390190505b50600654604080518281526020808402820101909152919750801561182b578160200160208202803883390190505b50600654604080518281526020808402820101909152919650801561185a578160200160208202803883390190505b506006546040805182815260208084028201019091529195508015611889578160200160208202803883390190505b509250600091505b6006548210156119eb5760068054839081106118a957fe5b60009182526020918290206040805160c081018252600590930290910180548352600181015483850152600281015483830152600381015460ff81166060850152600160a060020a036101009091041660808401526004810180548351818702810187019094528084529394919360a08601939283018282801561194d57602002820191906000526020600020905b81548152600190910190602001808311611938575b50505050508152505090508060200151868381518110151561196b57fe5b602090810290910101526040810151855186908490811061198857fe5b60209081029091010152606081015184518590849081106119a557fe5b60ff909216602092830290910190910152608081015183518490849081106119c957fe5b600160a060020a03909216602092830290910190910152600190910190611891565b5093989297509095509350915050565b6004805482908110611a0957fe5b600091825260209091200154905081565b6002805482908110611a0957fe5b6000805482908110611a0957fe5b600081815260016020908152604091829020600301805483518184028101840190945280845260609392830182828015611a9057602002820191906000526020600020905b81548152600190910190602001808311611a7b575b50505050509050919050565b60008060008060606000606080611ab1612d2f565b60008a815260036020818152604092839020835160a0808201865282548252855160c08101875260018401805482526002850154828701529584015481880152600484015460ff811660608301526101009004600160a060020a03166080820152600584018054885181880281018801909952808952939794968887019692959094938601939092830182828015611b6957602002820191906000526020600020905b81548152600190910190602001808311611b54575b50505050508152505081526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020018280548015611bd057602002820191906000526020600020905b81548152600190910190602001808311611bbb575b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015611c5057602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611c175790505b505050919092525050815191925050600010611cb6576040805160e560020a62461bcd02815260206004820152601860248201527f7468657265206973206e6f207375636820636c75737465720000000000000000604482015290519081900360640190fd5b6020808201519081015160408083015160608085015160808087015160a090970151948801519288015190880151959f50929d509b50939950909750919550909350915050919395975091939597565b606080611d11612d2f565b6000848152600360208181526040808420815160a0808201845282548252835160c08101855260018401805482526002850154828801529684015481860152600484015460ff8116606080840191909152610100909104600160a060020a031660808301526005850180548751818a0281018a019098528088529199989497959688870196939594860193909290830182828015611dcf57602002820191906000526020600020905b81548152600190910190602001808311611dba575b50505050508152505081526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020018280548015611e3657602002820191906000526020600020905b81548152600190910190602001808311611e21575b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015611eb657602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611e7d5790505b505050919092525050815191945050600010611f1c576040805160e560020a62461bcd02815260206004820152601860248201527f7468657265206973206e6f207375636820636c75737465720000000000000000604482015290519081900360640190fd5b826060015151604051908082528060200260200182016040528015611f4b578160200160208202803883390190505b509150600090505b8260600151518160ff161015611fd9576001600084606001518360ff16815181101515611f7c57fe5b602090810290910181015182528101919091526040016000206001015482516801000000000000000090910290839060ff8416908110611fb857fe5b67ffffffffffffffff19909216602092830290910190910152600101611f53565b506080909101519094909350915050565b6006546000190181146120b35760068054600019810190811061200957fe5b906000526020600020906005020160068281548110151561202657fe5b600091825260209091208254600590920201908155600180830154908201556002808301549082015560038083018054918301805460ff191660ff909316929092178083559054600160a060020a0361010091829004160274ffffffffffffffffffffffffffffffffffffffff0019909116179055600480830180546120af9284019190612df1565b5050505b6006805460001981019081106120c557fe5b600091825260208220600590910201818155600181018290556002810182905560038101805474ffffffffffffffffffffffffffffffffffffffffff19169055906121136004830182612e31565b50506006805490612128906000198301612e52565b5050565b60045460009081905b808260ff161015612176576004805485919060ff851690811061215457fe5b600091825260209091200154141561216b57612176565b600190910190612135565b60ff82168111612189576000925061228a565b60ff82166000198201146121d3576004805460001983019081106121a957fe5b906000526020600020015460048360ff168154811015156121c657fe5b6000918252602090912001555b6004805460001983019081106121e557fe5b60009182526020822001556004805490612203906000198301612e83565b5060008481526003602081905260408220828155600181018381556002820184905591810183905560048101805474ffffffffffffffffffffffffffffffffffffffffff1916905591908161225b6005850182612e31565b505060068201600090556007820160006122759190612e31565b612283600883016000612ea7565b5050600192505b5050919050565b600080606060006122a0612d66565b60008060009550876060015160ff166040519080825280602002602001820160405280156122e857816020015b6122d5612d66565b8152602001906001900390816122cd5790505b5060a08901515160608a015160005492975060ff16031161261157600093505b8760a00151518460ff16101561246657600160008960a001518660ff1681518110151561233157fe5b60209081029091018101518252818101929092526040908101600020815160e08101835281548152600182015467ffffffffffffffff19680100000000000000008202168286015261ffff60c060020a820481168386015260d060020a9091041660608201526002820154600160a060020a038116608083015260ff60a060020a90910416151560a08201526003820180548451818702810187019095528085529194929360c086019390929083018282801561240e57602002820191906000526020600020905b815481526001909101906020018083116123f9575b5050505050815250509250826060015161ffff16836040015161ffff16111561243a576000965061263b565b82858760ff1681518110151561244c57fe5b602090810290910101526001958601959390930192612308565b600091505b600054821080156124855750876060015160ff168660ff16105b156126115760016000808481548110151561249c57fe5b600091825260208083209091015483528281019390935260409182019020815160e08101835281548152600182015467ffffffffffffffff19680100000000000000008202168286015261ffff60c060020a820481168386015260d060020a9091041660608201526002820154600160a060020a038116608083015260ff60a060020a90910416151560a08201526003820180548451818702810187019095528085529194929360c086019390929083018282801561257b57602002820191906000526020600020905b81548152600190910190602001808311612566575b505050505081525050925060009050600093505b84518460ff161080156125a0575080155b156125d85782518551869060ff87169081106125b857fe5b602090810290910101515114156125cd575060015b60019093019261258f565b80156125e357612606565b82858760ff168151811015156125f557fe5b602090810290910101526001909501945b60019091019061246b565b876060015160ff168660ff1614156126365761262d8886612646565b6001965061263b565b600096505b505050505050919050565b600060608060606000612657612d66565b60008751896060015160ff161415156126e0576040805160e560020a62461bcd02815260206004820152602e60248201527f54686572652073686f756c6420626520656e6f756768206e6f64657320746f2060448201527f666f726d206120636c7573746572000000000000000000000000000000000000606482015290519081900360840190fd5b600580546001810190915560608a01516040805160ff9092168083526020808202840101909152919850908015612721578160200160208202803883390190505b509550886060015160ff16604051908082528060200260200182016040528015612755578160200160208202803883390190505b509450886060015160ff16604051908082528060200260200182016040528015612789578160200160208202803883390190505b509350600092505b886060015160ff168360ff16101561287657878360ff168151811015156127b457fe5b9060200190602002015191508160000151868460ff168151811015156127d657fe5b60209081029091018101919091528201518551869060ff86169081106127f857fe5b67ffffffffffffffff1990921660209283029091019091015260408201518451859060ff861690811061282757fe5b61ffff909216602092830290910190910152815161284490612afb565b508151600090815260016020818152604083206003018054808401825590845292209091018890559290920191612791565b506040805160a0818101835288825260208083018c81524284860181905260608086018c905260808087018b905260008e815260038087529089902088518155945180516001870190815581880151600288015599810151918601919091559182015160048501805492840151600160a060020a03166101000274ffffffffffffffffffffffffffffffffffffffff001960ff90931660ff199094169390931791909116919091179055938401518051919692949361293d92600587019290910190612da4565b5050506040820151600682015560608201518051612965916007840191602090910190612da4565b5060808201518051612981916008840191602090910190612ecc565b50506004805460018101825560009182527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018990558a5160208c810151604080518d81528084018590529081018290526060810187905260e0608082018181528d51918301919091528c517f41274d102f128e98f572a161a708c7afbb805a7e29f10f6ff747bc22dc31cb2c97508e96939489948f948f948f949193909260a085019260c08601926101008701928a820192909102908190849084905b83811015612a57578181015183820152602001612a3f565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015612a96578181015183820152602001612a7e565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015612ad5578181015183820152602001612abd565b505050509050019a505050505050505050505060405180910390a1505050505050505050565b6000612b05612d66565b6000838152600160208181526040808420808401805479ffff00000000000000000000000000000000000000000000000019811660c060020a9182900461ffff908116909701871682021791829055835160e0810185528354815268010000000000000000830267ffffffffffffffff19168187015290820486168185015260d060020a90910490941660608501526002810154600160a060020a038116608086015260a060020a900460ff16151560a0850152600381018054835181860281018601909452808452919360c08601939290830182828015612c0757602002820191906000526020600020905b81548152600190910190602001808311612bf2575b5050505050815250509150816060015161ffff16826040015161ffff161115612c79575060005b600054811015612c705781516000805483908110612c4857fe5b6000918252602090912001541415612c6857612c6381612c82565b612c70565b600101612c2e565b6001925061228a565b6000925061228a565b600054600019018114612cc857600080546000198101908110612ca157fe5b9060005260206000200154600082815481101515612cbb57fe5b6000918252602090912001555b600080546000198101908110612cda57fe5b60009182526020822001819055805490612128906000198301612e83565b6040805160c0810182526000808252602082018190529181018290526060808201839052608082019290925260a081019190915290565b6040805161014081019091526000815260208101612d4b612cf8565b81526020016000815260200160608152602001606081525090565b6040805160e08101825260008082526020820181905291810182905260608082018390526080820183905260a082019290925260c081019190915290565b828054828255906000526020600020908101928215612de1579160200282015b82811115612de15782518255602090920191600190910190612dc4565b50612ded929150612f71565b5090565b828054828255906000526020600020908101928215612de15760005260206000209182015b82811115612de1578254825591600101919060010190612e16565b5080546000825590600052602060002090810190612e4f9190612f71565b50565b815481835581811115612e7e57600502816005028360005260206000209182019101612e7e9190612f8e565b505050565b815481835581811115612e7e57600083815260209020612e7e918101908301612f71565b50805460008255600f016010900490600052602060002090810190612e4f9190612f71565b82805482825590600052602060002090600f01601090048101928215612f655791602002820160005b83821115612f3557835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302612ef5565b8015612f635782816101000a81549061ffff0219169055600201602081600101049283019260010302612f35565b505b50612ded929150612fe5565b612f8b91905b80821115612ded5760008155600101612f77565b90565b612f8b91905b80821115612ded576000808255600182018190556002820181905560038201805474ffffffffffffffffffffffffffffffffffffffffff19169055612fdc6004830182612e31565b50600501612f94565b612f8b91905b80821115612ded57805461ffff19168155600101612feb5600a165627a7a72305820a0118f422f36c7aab5b266f568717417dda75821f5f65ff9f31c8125045f3ef80029";

    public static final String FUNC_DELETEAPP = "deleteApp";

    public static final String FUNC_ADDNODE = "addNode";

    public static final String FUNC_ADDAPP = "addApp";

    public static final String FUNC_GETNODE = "getNode";

    public static final String FUNC_GETENQUEUEDAPPS = "getEnqueuedApps";

    public static final String FUNC_CLUSTERSIDS = "clustersIds";

    public static final String FUNC_NODESIDS = "nodesIds";

    public static final String FUNC_READYNODES = "readyNodes";

    public static final String FUNC_GETNODECLUSTERS = "getNodeClusters";

    public static final String FUNC_GETCLUSTER = "getCluster";

    public static final String FUNC_GETCLUSTERWORKERS = "getClusterWorkers";

    public static final Event CLUSTERFORMED_EVENT = new Event("ClusterFormed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
    ;

    public static final Event APPENQUEUED_EVENT = new Event("AppEnqueued", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
    ;

    public static final Event NEWNODE_EVENT = new Event("NewNode", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event APPREMOVED_EVENT = new Event("AppRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
    ;

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> deleteApp(Bytes32 appID, Bytes32 clusterID) {
        final Function function = new Function(
                FUNC_DELETEAPP, 
                Arrays.<Type>asList(appID, clusterID), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addNode(Bytes32 nodeID, Bytes24 nodeAddress, Uint16 startPort, Uint16 endPort, Bool isPrivate) {
        final Function function = new Function(
                FUNC_ADDNODE, 
                Arrays.<Type>asList(nodeID, nodeAddress, startPort, endPort, isPrivate), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addApp(Bytes32 storageHash, Bytes32 storageReceipt, Uint8 clusterSize, DynamicArray<Bytes32> pinToNodes) {
        final Function function = new Function(
                FUNC_ADDAPP, 
                Arrays.<Type>asList(storageHash, storageReceipt, clusterSize, pinToNodes), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>>> getNode(Bytes32 nodeID) {
        final Function function = new Function(FUNC_GETNODE, 
                Arrays.<Type>asList(nodeID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes24>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint16>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>>>(
                new Callable<Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>>>() {
                    @Override
                    public Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>>(
                                (Bytes24) results.get(0), 
                                (Uint16) results.get(1), 
                                (Uint16) results.get(2), 
                                (Address) results.get(3), 
                                (Bool) results.get(4), 
                                (DynamicArray<Bytes32>) results.get(5));
                    }
                });
    }

    public RemoteCall<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>> getEnqueuedApps() {
        final Function function = new Function(FUNC_GETENQUEUEDAPPS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint8>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>>(
                new Callable<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>>() {
                    @Override
                    public Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Bytes32>) results.get(1), 
                                (DynamicArray<Uint8>) results.get(2), 
                                (DynamicArray<Address>) results.get(3));
                    }
                });
    }

    public RemoteCall<Bytes32> clustersIds(Uint256 param0) {
        final Function function = new Function(FUNC_CLUSTERSIDS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> nodesIds(Uint256 param0) {
        final Function function = new Function(FUNC_NODESIDS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> readyNodes(Uint256 param0) {
        final Function function = new Function(FUNC_READYNODES, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Bytes32>> getNodeClusters(Bytes32 nodeID) {
        final Function function = new Function(FUNC_GETNODECLUSTERS, 
                Arrays.<Type>asList(nodeID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>>> getCluster(Bytes32 clusterID) {
        final Function function = new Function(FUNC_GETCLUSTER, 
                Arrays.<Type>asList(clusterID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
        return new RemoteCall<Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>>>(
                new Callable<Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>>>() {
                    @Override
                    public Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>>(
                                (Bytes32) results.get(0), 
                                (Bytes32) results.get(1), 
                                (Uint8) results.get(2), 
                                (Address) results.get(3), 
                                (DynamicArray<Bytes32>) results.get(4), 
                                (Uint256) results.get(5), 
                                (DynamicArray<Bytes32>) results.get(6), 
                                (DynamicArray<Uint16>) results.get(7));
                    }
                });
    }

    public RemoteCall<Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>> getClusterWorkers(Bytes32 clusterID) {
        final Function function = new Function(FUNC_GETCLUSTERWORKERS, 
                Arrays.<Type>asList(clusterID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
        return new RemoteCall<Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>>(
                new Callable<Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>>() {
                    @Override
                    public Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>(
                                (DynamicArray<Bytes24>) results.get(0), 
                                (DynamicArray<Uint16>) results.get(1));
                    }
                });
    }

    public List<ClusterFormedEventResponse> getClusterFormedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CLUSTERFORMED_EVENT, transactionReceipt);
        ArrayList<ClusterFormedEventResponse> responses = new ArrayList<ClusterFormedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ClusterFormedEventResponse typedResponse = new ClusterFormedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.clusterID = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(2);
            typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(3);
            typedResponse.nodeIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(4);
            typedResponse.nodeAddresses = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(5);
            typedResponse.ports = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(6);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ClusterFormedEventResponse> clusterFormedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ClusterFormedEventResponse>() {
            @Override
            public ClusterFormedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CLUSTERFORMED_EVENT, log);
                ClusterFormedEventResponse typedResponse = new ClusterFormedEventResponse();
                typedResponse.log = log;
                typedResponse.clusterID = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(2);
                typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(3);
                typedResponse.nodeIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(4);
                typedResponse.nodeAddresses = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(5);
                typedResponse.ports = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(6);
                return typedResponse;
            }
        });
    }

    public Flowable<ClusterFormedEventResponse> clusterFormedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CLUSTERFORMED_EVENT));
        return clusterFormedEventFlowable(filter);
    }

    public List<AppEnqueuedEventResponse> getAppEnqueuedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPENQUEUED_EVENT, transactionReceipt);
        ArrayList<AppEnqueuedEventResponse> responses = new ArrayList<AppEnqueuedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppEnqueuedEventResponse typedResponse = new AppEnqueuedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.storageReceipt = (Bytes32) eventValues.getNonIndexedValues().get(2);
            typedResponse.clusterSize = (Uint8) eventValues.getNonIndexedValues().get(3);
            typedResponse.owner = (Address) eventValues.getNonIndexedValues().get(4);
            typedResponse.pinToNodes = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(5);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppEnqueuedEventResponse> appEnqueuedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AppEnqueuedEventResponse>() {
            @Override
            public AppEnqueuedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPENQUEUED_EVENT, log);
                AppEnqueuedEventResponse typedResponse = new AppEnqueuedEventResponse();
                typedResponse.log = log;
                typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.storageReceipt = (Bytes32) eventValues.getNonIndexedValues().get(2);
                typedResponse.clusterSize = (Uint8) eventValues.getNonIndexedValues().get(3);
                typedResponse.owner = (Address) eventValues.getNonIndexedValues().get(4);
                typedResponse.pinToNodes = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(5);
                return typedResponse;
            }
        });
    }

    public Flowable<AppEnqueuedEventResponse> appEnqueuedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPENQUEUED_EVENT));
        return appEnqueuedEventFlowable(filter);
    }

    public List<NewNodeEventResponse> getNewNodeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWNODE_EVENT, transactionReceipt);
        ArrayList<NewNodeEventResponse> responses = new ArrayList<NewNodeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewNodeEventResponse typedResponse = new NewNodeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewNodeEventResponse>() {
            @Override
            public NewNodeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWNODE_EVENT, log);
                NewNodeEventResponse typedResponse = new NewNodeEventResponse();
                typedResponse.log = log;
                typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWNODE_EVENT));
        return newNodeEventFlowable(filter);
    }

    public List<AppRemovedEventResponse> getAppRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPREMOVED_EVENT, transactionReceipt);
        ArrayList<AppRemovedEventResponse> responses = new ArrayList<AppRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppRemovedEventResponse typedResponse = new AppRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.clusterID = (Bytes32) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppRemovedEventResponse> appRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AppRemovedEventResponse>() {
            @Override
            public AppRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPREMOVED_EVENT, log);
                AppRemovedEventResponse typedResponse = new AppRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.clusterID = (Bytes32) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<AppRemovedEventResponse> appRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPREMOVED_EVENT));
        return appRemovedEventFlowable(filter);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ClusterFormedEventResponse {
        public Log log;

        public Bytes32 clusterID;

        public Bytes32 appID;

        public Bytes32 storageHash;

        public Uint256 genesisTime;

        public DynamicArray<Bytes32> nodeIDs;

        public DynamicArray<Bytes24> nodeAddresses;

        public DynamicArray<Uint16> ports;
    }

    public static class AppEnqueuedEventResponse {
        public Log log;

        public Bytes32 appID;

        public Bytes32 storageHash;

        public Bytes32 storageReceipt;

        public Uint8 clusterSize;

        public Address owner;

        public DynamicArray<Bytes32> pinToNodes;
    }

    public static class NewNodeEventResponse {
        public Log log;

        public Bytes32 id;
    }

    public static class AppRemovedEventResponse {
        public Log log;

        public Bytes32 appID;

        public Bytes32 clusterID;
    }
}
