package fluence.ethclient;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes24;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class Network extends Contract {
    private static final String BINARY = "6080604052600160055534801561001557600080fd5b50612a8b806100256000396000f3006080604052600436106100ae5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663243dcbf281146100b3578063299cf8cd146100ed5780632b1056631461011c57806350c946fe146101ca578063880680bc1461027d578063a5d432281461043f578063acb952c214610469578063ae6229e714610481578063c7c02e4414610499578063e2683e9214610501578063e9a4041214610630575b600080fd5b3480156100bf57600080fd5b506100eb60043567ffffffffffffffff196024351661ffff604435811690606435166084351515610648565b005b3480156100f957600080fd5b506100eb6004803590602480359160ff6044351691606435908101910135610b39565b34801561012857600080fd5b50610131611121565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561017557818101518382015260200161015d565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156101b457818101518382015260200161019c565b5050505090500194505050505060405180910390f35b3480156101d657600080fd5b506101e26004356111d6565b6040805167ffffffffffffffff198816815261ffff80881660208084019190915290871692820192909252600160a060020a0385166060820152831515608082015260c060a0820181815284519183019190915283519192909160e0840191858101910280838360005b8381101561026457818101518382015260200161024c565b5050505090500197505050505050505060405180910390f35b34801561028957600080fd5b506102926112f5565b6040518080602001806020018060200180602001806020018060200187810387528d818151815260200191508051906020019060200280838360005b838110156102e65781810151838201526020016102ce565b5050505090500187810386528c818151815260200191508051906020019060200280838360005b8381101561032557818101518382015260200161030d565b5050505090500187810385528b818151815260200191508051906020019060200280838360005b8381101561036457818101518382015260200161034c565b5050505090500187810384528a818151815260200191508051906020019060200280838360005b838110156103a357818101518382015260200161038b565b50505050905001878103835289818151815260200191508051906020019060200280838360005b838110156103e25781810151838201526020016103ca565b50505050905001878103825288818151815260200191508051906020019060200280838360005b83811015610421578181015183820152602001610409565b505050509050019c5050505050505050505050505060405180910390f35b34801561044b57600080fd5b50610457600435611639565b60408051918252519081900360200190f35b34801561047557600080fd5b50610457600435611658565b34801561048d57600080fd5b50610457600435611666565b3480156104a557600080fd5b506104b1600435611674565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104ed5781810151838201526020016104d5565b505050509050019250505060405180910390f35b34801561050d57600080fd5b506105196004356116da565b6040805189815260208082018a905260ff891692820192909252600160a060020a038716606082015260a081018590526101006080820181815287519183019190915286519192909160c084019160e08501916101208601918a8101910280838360005b8381101561059557818101518382015260200161057d565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156105d45781810151838201526020016105bc565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156106135781810151838201526020016105fb565b505050509050019b50505050505050505050505060405180910390f35b34801561063c57600080fd5b50610131600435611935565b61065061278a565b600061065a6127c8565b600088815260016020526040902054156106be576040805160e560020a62461bcd02815260206004820152601f60248201527f54686973206e6f646520697320616c7265616479207265676973746572656400604482015290519081900360640190fd5b61ffff808616908716111561071d576040805160e560020a62461bcd02815260206004820181905260248201527f506f72742072616e676520697320656d707479206f7220696e636f7272656374604482015290519081900360640190fd5b6040805160e08101825289815267ffffffffffffffff19891660208083019190915261ffff808a16838501528816606083015233608083015286151560a083015282516000808252918101909352909160c08301915090526000898152600160208181526040928390208451815584820151928101805494860151606087015177ffffffffffffffffffffffffffffffffffffffffffffffff19909616680100000000000000009095049490941779ffff000000000000000000000000000000000000000000000000191660c060020a61ffff95861602177fffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffff1660d060020a949095169390930293909317909155608083015160028301805460a086015173ffffffffffffffffffffffffffffffffffffffff19909116600160a060020a039093169290921774ff0000000000000000000000000000000000000000191660a060020a9215159290920291909117905560c0830151805193965086936108a992600385019201906127f8565b5050600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018990555083151561091b57600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563018890555b6040805189815290517fb0cd47a7093fb93a9ce97304d3afb8df43e02e48502e47fd5fbb6c4020d935b59181900360200190a1600091505b600654821015610b2f57600680548390811061096b57fe5b60009182526020918290206040805160a081018252600490930290910180548352600181015483850152600281015460ff811684840152600160a060020a0361010090910416606084015260038101805483518187028101870190945280845293949193608086019392830182828015610a0557602002820191906000526020600020905b815481526001909101906020018083116109f0575b5050505050815250509050610a1981611c10565b15610b2357610a2782611fc5565b600088815260016020818152604092839020835160e081018552815481529281015467ffffffffffffffff19680100000000000000008202168484015261ffff60c060020a820481168587015260d060020a9091041660608401526002810154600160a060020a038116608085015260ff60a060020a90910416151560a08401526003810180548551818502810185019096528086529394919360c0860193830182828015610af657602002820191906000526020600020905b81548152600190910190602001808311610ae1575b5050505050815250509250826060015161ffff16836040015161ffff161115610b1e57610b2f565b610b2a565b6001909101905b610953565b5050505050505050565b600080610b446127c8565b600060ff871611610bc5576040805160e560020a62461bcd02815260206004820152602660248201527f436c75737465722073697a65206d757374206265206120706f7369746976652060448201527f6e756d6265720000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60ff8616841115610c6c576040805160e560020a62461bcd02815260206004820152604860248201527f6e756d626572206f662070696e546f206e6f6465732073686f756c642062652060448201527f6c657373206f7220657175616c20746f20746865206465736972656420636c7560648201527f7374657253697a65000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600092505b60ff8316841115610ecc5760016000868660ff8716818110610c8f57fe5b6020908102929092013583525081019190915260400160002060020154600160a060020a03161515610d0b576040805160e560020a62461bcd02815260206004820181905260248201527f43616e2070696e206f6e6c7920746f2072656769737465726564206e6f646573604482015290519081900360640190fd5b3360016000878760ff8816818110610d1f57fe5b6020908102929092013583525081019190915260400160002060020154600160a060020a031614610d9a576040805160e560020a62461bcd02815260206004820152601d60248201527f43616e2070696e206f6e6c7920746f206e6f64657320796f75206f776e000000604482015290519081900360640190fd5b600091505b60ff80841690831611610ec15760ff83811690831614610eb657848460ff8416818110610dc857fe5b60200291909101359050858560ff8616818110610de157fe5b602002919091013591909114159050610eb6576040805160e560020a62461bcd02815260206004820152606860248201527f4e6f64652069647320746f2070696e20746f206d75737420626520756e69717560448201527f652c206f746865727769736520746865206465706c6f796d656e74207265737560648201527f6c7420636f756c6420626520756e7072656469637461626c6520616e6420756e60848201527f657870656374656400000000000000000000000000000000000000000000000060a482015290519081900360c40190fd5b600190910190610d9f565b600190920191610c71565b6040805160a08101825289815260208082018a905260ff891682840152336060830152825187820281810183019094528781529192608084019291899189918291908501908490808284378201915050505050508152509050610f2e81611c10565b1515610b2f576006805460018101808355600092909252825160049091027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f81019182556020808501517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4083015560408501517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d41830180546060880151600160a060020a03166101000274ffffffffffffffffffffffffffffffffffffffff001960ff90941660ff19909216919091179290921691909117905560808501518051869493611042937ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d429091019201906127f8565b505050507f44df4996f2094a11d2fadd63825ac91a6c6751e16a8ddeabdbcb2275251cf30c8160000151826020015183604001518460600151856080015160405180866000191660001916815260200185600019166000191681526020018460ff1660ff16815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156111005781810151838201526020016110e8565b50505050905001965050505050505060405180910390a15050505050505050565b606080600260048180548060200260200160405190810160405280929190818152602001828054801561117457602002820191906000526020600020905b8154815260019091019060200180831161115f575b50505050509150808054806020026020016040519081016040528092919081815260200182805480156111c757602002820191906000526020600020905b815481526001909101906020018083116111b2575b50505050509050915091509091565b600080600080600060606111e861278a565b600088815260016020818152604092839020835160e081018552815481529281015467ffffffffffffffff19680100000000000000008202168484015261ffff60c060020a820481168587015260d060020a9091041660608401526002810154600160a060020a038116608085015260ff60a060020a90910416151560a08401526003810180548551818502810185019096528086529394919360c08601938301828280156112b757602002820191906000526020600020905b815481526001909101906020018083116112a2575b50505091909252505050602081015160408201516060830151608084015160a085015160c090950151939d929c50909a509850919650945092505050565b606080606080606080606080606080606060008060606113136127c8565b6006546040805182815260208084028201019091526000918015611341578160200160208202803883390190505b50600654604080518281526020808402820101909152919b508015611370578160200160208202803883390190505b50600654604080518281526020808402820101909152919a50801561139f578160200160208202803883390190505b5060065460408051828152602080840282010190915291995080156113ce578160200160208202803883390190505b5060065460408051828152602080840282010190915291985080156113fd578160200160208202803883390190505b50955060009450600093505b600654841015611429576080820151519490940193600190930192611409565b84604051908082528060200260200182016040528015611453578160200160208202803883390190505b50925060009450600093505b60065484101561161f57600680548590811061147757fe5b60009182526020918290206040805160a081018252600490930290910180548352600181015483850152600281015460ff811684840152600160a060020a036101009091041660608401526003810180548351818702810187019094528084529394919360808601939283018282801561151157602002820191906000526020600020905b815481526001909101906020018083116114fc575b505050505081525050915081600001518a8581518110151561152f57fe5b602090810290910181019190915282015189518a908690811061154e57fe5b602090810290910101526040820151885189908690811061156b57fe5b60ff9092166020928302909101909101526060820151875188908690811061158f57fe5b600160a060020a0390921660209283029091019091015260808201515186518790869081106115ba57fe5b602090810290910101525060005b8160800151518110156116145760808201518051829081106115e657fe5b9060200190602002015183868151811015156115fe57fe5b60209081029091010152600194850194016115c8565b60019093019261145f565b50979e969d50949b50929950909750919550919350505050565b600480548290811061164757fe5b600091825260209091200154905081565b600280548290811061164757fe5b600080548290811061164757fe5b6000818152600160209081526040918290206003018054835181840281018401909452808452606093928301828280156116ce57602002820191906000526020600020905b815481526001909101906020018083116116b9575b50505050509050919050565b600080600080606060006060806116ef612845565b60008a815260036020818152604092839020835160a08082018652825482528551908101865260018301805482526002840154828601529483015460ff8116828801526101009004600160a060020a03166060820152600483018054875181870281018701909852808852929693958786019592949093608086019391929183018282801561179e57602002820191906000526020600020905b81548152600190910190602001808311611789575b5050505050815250508152602001600582015481526020016006820180548060200260200160405190810160405280929190818152602001828054801561180557602002820191906000526020600020905b815481526001909101906020018083116117f0575b505050505081526020016007820180548060200260200160405190810160405280929190818152602001828054801561188557602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161184c5790505b5050509190925250508151919250506000106118eb576040805160e560020a62461bcd02815260206004820152601860248201527f7468657265206973206e6f207375636820636c75737465720000000000000000604482015290519081900360640190fd5b602080820151805191810151604080830151606080850151608095860151938801519188015195880151969f50939d50909b50919950975095509350915050919395975091939597565b606080611940612845565b6000848152600360208181526040808420815160a08082018452825482528351908101845260018301805482526002840154828701529583015460ff8116828601526101009004600160a060020a031660608083019190915260048401805486518189028101890190975280875291989793969495878601959394936080860193919291908301828280156119f557602002820191906000526020600020905b815481526001909101906020018083116119e0575b50505050508152505081526020016005820154815260200160068201805480602002602001604051908101604052809291908181526020018280548015611a5c57602002820191906000526020600020905b81548152600190910190602001808311611a47575b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015611adc57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611aa35790505b505050919092525050815191945050600010611b42576040805160e560020a62461bcd02815260206004820152601860248201527f7468657265206973206e6f207375636820636c75737465720000000000000000604482015290519081900360640190fd5b826060015151604051908082528060200260200182016040528015611b71578160200160208202803883390190505b509150600090505b8260600151518160ff161015611bff576001600084606001518360ff16815181101515611ba257fe5b602090810290910181015182528101919091526040016000206001015482516801000000000000000090910290839060ff8416908110611bde57fe5b67ffffffffffffffff19909216602092830290910190910152600101611b79565b506080909101519094909350915050565b60008060606000611c1f61278a565b60008060009550876040015160ff16604051908082528060200260200182016040528015611c6757816020015b611c5461278a565b815260200190600190039081611c4c5790505b5060808901515160408a015160005492975060ff160311611f9057600093505b8760800151518460ff161015611de5576001600089608001518660ff16815181101515611cb057fe5b60209081029091018101518252818101929092526040908101600020815160e08101835281548152600182015467ffffffffffffffff19680100000000000000008202168286015261ffff60c060020a820481168386015260d060020a9091041660608201526002820154600160a060020a038116608083015260ff60a060020a90910416151560a08201526003820180548451818702810187019095528085529194929360c0860193909290830182828015611d8d57602002820191906000526020600020905b81548152600190910190602001808311611d78575b5050505050815250509250826060015161ffff16836040015161ffff161115611db95760009650611fba565b82858760ff16815181101515611dcb57fe5b602090810290910101526001958601959390930192611c87565b600091505b60005482108015611e045750876040015160ff168660ff16105b15611f9057600160008084815481101515611e1b57fe5b600091825260208083209091015483528281019390935260409182019020815160e08101835281548152600182015467ffffffffffffffff19680100000000000000008202168286015261ffff60c060020a820481168386015260d060020a9091041660608201526002820154600160a060020a038116608083015260ff60a060020a90910416151560a08201526003820180548451818702810187019095528085529194929360c0860193909290830182828015611efa57602002820191906000526020600020905b81548152600190910190602001808311611ee5575b505050505081525050925060009050600093505b84518460ff16108015611f1f575080155b15611f575782518551869060ff8716908110611f3757fe5b60209081029091010151511415611f4c575060015b600190930192611f0e565b8015611f6257611f85565b82858760ff16815181101515611f7457fe5b602090810290910101526001909501945b600190910190611dea565b876040015160ff168660ff161415611fb557611fac88866120f6565b60019650611fba565b600096505b505050505050919050565b60065460001901811461208457600680546000198101908110611fe457fe5b906000526020600020906004020160068281548110151561200157fe5b6000918252602090912082546004909202019081556001808301549082015560028083018054918301805460ff191660ff909316929092178083559054600160a060020a0361010091829004160274ffffffffffffffffffffffffffffffffffffffff001990911617905560038083018054612080928401919061287c565b5050505b60068054600019810190811061209657fe5b6000918252602082206004909102018181556001810182905560028101805474ffffffffffffffffffffffffffffffffffffffffff19169055906120dd60038301826128bc565b505060068054906120f29060001983016128dd565b5050565b60006060806060600061210761278a565b60008751896040015160ff16141515612190576040805160e560020a62461bcd02815260206004820152602e60248201527f54686572652073686f756c6420626520656e6f756768206e6f64657320746f2060448201527f666f726d206120636c7573746572000000000000000000000000000000000000606482015290519081900360840190fd5b60058054600181019091556040808b0151815160ff909116808252602080820283010190925291985080156121cf578160200160208202803883390190505b509550886040015160ff16604051908082528060200260200182016040528015612203578160200160208202803883390190505b509450886040015160ff16604051908082528060200260200182016040528015612237578160200160208202803883390190505b509350600092505b886040015160ff168360ff16101561232457878360ff1681518110151561226257fe5b9060200190602002015191508160000151868460ff1681518110151561228457fe5b60209081029091018101919091528201518551869060ff86169081106122a657fe5b67ffffffffffffffff1990921660209283029091019091015260408201518451859060ff86169081106122d557fe5b61ffff90921660209283029091019091015281516122f29061258a565b50815160009081526001602081815260408320600301805480840182559084529220909101889055929092019161223f565b506040805160a08101825287815260208082018b81524283850181905260608085018b905260808086018a905260008d815260038087529088902087518155945180516001870190815581880151600288015598810151918601805494820151600160a060020a03166101000274ffffffffffffffffffffffffffffffffffffffff001960ff90941660ff1990961695909517929092169390931790558101518051929693949193926123dd92600487019201906127f8565b50505060408201516005820155606082015180516124059160068401916020909101906127f8565b506080820151805161242191600784019160209091019061290e565b50506004805460018101825560009182527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018990558a51604080518b8152602081810184905291810186905260c0606082018181528c51918301919091528b517f28c3d361196410d2059b40d53bf75ae21adebcec217c5a2564746ed2c3427fd296508d9588948e948e948e9491939092608085019260a086019260e08701928a81019202908190849084905b838110156124e75781810151838201526020016124cf565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561252657818101518382015260200161250e565b50505050905001848103825285818151815260200191508051906020019060200280838360005b8381101561256557818101518382015260200161254d565b50505050905001995050505050505050505060405180910390a1505050505050505050565b600061259461278a565b6000838152600160208181526040808420808401805479ffff00000000000000000000000000000000000000000000000019811660c060020a9182900461ffff908116909701871682021791829055835160e0810185528354815268010000000000000000830267ffffffffffffffff19168187015290820486168185015260d060020a90910490941660608501526002810154600160a060020a038116608086015260a060020a900460ff16151560a0850152600381018054835181860281018601909452808452919360c0860193929083018282801561269657602002820191906000526020600020905b81548152600190910190602001808311612681575b5050505050815250509150816060015161ffff16826040015161ffff161115612708575060005b6000548110156126ff57815160008054839081106126d757fe5b60009182526020909120015414156126f7576126f281612714565b6126ff565b6001016126bd565b6001925061270d565b600092505b5050919050565b60005460001901811461275a5760008054600019810190811061273357fe5b906000526020600020015460008281548110151561274d57fe5b6000918252602090912001555b60008054600019810190811061276c57fe5b600091825260208220018190558054906120f29060001983016129b3565b6040805160e08101825260008082526020820181905291810182905260608082018390526080820183905260a082019290925260c081019190915290565b6040805160a081018252600080825260208201819052918101829052606080820192909252608081019190915290565b828054828255906000526020600020908101928215612835579160200282015b828111156128355782518255602090920191600190910190612818565b506128419291506129d3565b5090565b60408051610120810190915260008152602081016128616127c8565b81526020016000815260200160608152602001606081525090565b8280548282559060005260206000209081019282156128355760005260206000209182015b828111156128355782548255916001019190600101906128a1565b50805460008255906000526020600020908101906128da91906129d3565b50565b8154818355818111156129095760040281600402836000526020600020918201910161290991906129f0565b505050565b82805482825590600052602060002090600f016010900481019282156129a75791602002820160005b8382111561297757835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302612937565b80156129a55782816101000a81549061ffff0219169055600201602081600101049283019260010302612977565b505b50612841929150612a40565b815481835581811115612909576000838152602090206129099181019083015b6129ed91905b8082111561284157600081556001016129d9565b90565b6129ed91905b808211156128415760008082556001820181905560028201805474ffffffffffffffffffffffffffffffffffffffffff19169055612a3760038301826128bc565b506004016129f6565b6129ed91905b8082111561284157805461ffff19168155600101612a465600a165627a7a7230582042969727916aee80b7efb457c57d0bdcf07b30a071463c58d71b68dbcac234d00029";

    public static final String FUNC_ADDNODE = "addNode";

    public static final String FUNC_ADDAPP = "addApp";

    public static final String FUNC_GETIDS = "getIds";

    public static final String FUNC_GETNODE = "getNode";

    public static final String FUNC_GETENQUEUEDAPPS = "getEnqueuedApps";

    public static final String FUNC_CLUSTERSIDS = "clustersIds";

    public static final String FUNC_NODESIDS = "nodesIds";

    public static final String FUNC_READYNODES = "readyNodes";

    public static final String FUNC_GETNODECLUSTERS = "getNodeClusters";

    public static final String FUNC_GETCLUSTER = "getCluster";

    public static final String FUNC_GETCLUSTERWORKERS = "getClusterWorkers";

    public static final Event CLUSTERFORMED_EVENT = new Event("ClusterFormed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
    ;

    public static final Event APPENQUEUED_EVENT = new Event("AppEnqueued", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
    ;

    public static final Event NEWNODE_EVENT = new Event("NewNode", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> addNode(Bytes32 nodeID, Bytes24 nodeAddress, Uint16 startPort, Uint16 endPort, Bool isPrivate) {
        final Function function = new Function(
                FUNC_ADDNODE, 
                Arrays.<Type>asList(nodeID, nodeAddress, startPort, endPort, isPrivate), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addApp(Bytes32 storageHash, Bytes32 storageReceipt, Uint8 clusterSize, DynamicArray<Bytes32> pinToNodes) {
        final Function function = new Function(
                FUNC_ADDAPP, 
                Arrays.<Type>asList(storageHash, storageReceipt, clusterSize, pinToNodes), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<DynamicArray<Bytes32>, DynamicArray<Bytes32>>> getIds() {
        final Function function = new Function(FUNC_GETIDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<Tuple2<DynamicArray<Bytes32>, DynamicArray<Bytes32>>>(
                new Callable<Tuple2<DynamicArray<Bytes32>, DynamicArray<Bytes32>>>() {
                    @Override
                    public Tuple2<DynamicArray<Bytes32>, DynamicArray<Bytes32>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<DynamicArray<Bytes32>, DynamicArray<Bytes32>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Bytes32>) results.get(1));
                    }
                });
    }

    public RemoteCall<Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>>> getNode(Bytes32 nodeID) {
        final Function function = new Function(FUNC_GETNODE, 
                Arrays.<Type>asList(nodeID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes24>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint16>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>>>(
                new Callable<Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>>>() {
                    @Override
                    public Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>>(
                                (Bytes24) results.get(0), 
                                (Uint16) results.get(1), 
                                (Uint16) results.get(2), 
                                (Address) results.get(3), 
                                (Bool) results.get(4), 
                                (DynamicArray<Bytes32>) results.get(5));
                    }
                });
    }

    public RemoteCall<Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Uint256>, DynamicArray<Bytes32>>> getEnqueuedApps() {
        final Function function = new Function(FUNC_GETENQUEUEDAPPS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint8>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Uint256>, DynamicArray<Bytes32>>>(
                new Callable<Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Uint256>, DynamicArray<Bytes32>>>() {
                    @Override
                    public Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Uint256>, DynamicArray<Bytes32>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Uint256>, DynamicArray<Bytes32>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Bytes32>) results.get(1), 
                                (DynamicArray<Uint8>) results.get(2), 
                                (DynamicArray<Address>) results.get(3), 
                                (DynamicArray<Uint256>) results.get(4), 
                                (DynamicArray<Bytes32>) results.get(5));
                    }
                });
    }

    public RemoteCall<Bytes32> clustersIds(Uint256 param0) {
        final Function function = new Function(FUNC_CLUSTERSIDS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> nodesIds(Uint256 param0) {
        final Function function = new Function(FUNC_NODESIDS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> readyNodes(Uint256 param0) {
        final Function function = new Function(FUNC_READYNODES, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Bytes32>> getNodeClusters(Bytes32 nodeID) {
        final Function function = new Function(FUNC_GETNODECLUSTERS, 
                Arrays.<Type>asList(nodeID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>>> getCluster(Bytes32 clusterID) {
        final Function function = new Function(FUNC_GETCLUSTER, 
                Arrays.<Type>asList(clusterID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
        return new RemoteCall<Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>>>(
                new Callable<Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>>>() {
                    @Override
                    public Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>>(
                                (Bytes32) results.get(0), 
                                (Bytes32) results.get(1), 
                                (Uint8) results.get(2), 
                                (Address) results.get(3), 
                                (DynamicArray<Bytes32>) results.get(4), 
                                (Uint256) results.get(5), 
                                (DynamicArray<Bytes32>) results.get(6), 
                                (DynamicArray<Uint16>) results.get(7));
                    }
                });
    }

    public RemoteCall<Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>> getClusterWorkers(Bytes32 clusterID) {
        final Function function = new Function(FUNC_GETCLUSTERWORKERS, 
                Arrays.<Type>asList(clusterID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
        return new RemoteCall<Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>>(
                new Callable<Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>>() {
                    @Override
                    public Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>(
                                (DynamicArray<Bytes24>) results.get(0), 
                                (DynamicArray<Uint16>) results.get(1));
                    }
                });
    }

    public List<ClusterFormedEventResponse> getClusterFormedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CLUSTERFORMED_EVENT, transactionReceipt);
        ArrayList<ClusterFormedEventResponse> responses = new ArrayList<ClusterFormedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ClusterFormedEventResponse typedResponse = new ClusterFormedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.clusterID = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(2);
            typedResponse.nodeIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(3);
            typedResponse.nodeAddresses = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(4);
            typedResponse.ports = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(5);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ClusterFormedEventResponse> clusterFormedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ClusterFormedEventResponse>() {
            @Override
            public ClusterFormedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CLUSTERFORMED_EVENT, log);
                ClusterFormedEventResponse typedResponse = new ClusterFormedEventResponse();
                typedResponse.log = log;
                typedResponse.clusterID = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(2);
                typedResponse.nodeIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(3);
                typedResponse.nodeAddresses = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(4);
                typedResponse.ports = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(5);
                return typedResponse;
            }
        });
    }

    public Flowable<ClusterFormedEventResponse> clusterFormedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CLUSTERFORMED_EVENT));
        return clusterFormedEventFlowable(filter);
    }

    public List<AppEnqueuedEventResponse> getAppEnqueuedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPENQUEUED_EVENT, transactionReceipt);
        ArrayList<AppEnqueuedEventResponse> responses = new ArrayList<AppEnqueuedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppEnqueuedEventResponse typedResponse = new AppEnqueuedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.storageReceipt = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.clusterSize = (Uint8) eventValues.getNonIndexedValues().get(2);
            typedResponse.owner = (Address) eventValues.getNonIndexedValues().get(3);
            typedResponse.pinToNodes = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(4);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppEnqueuedEventResponse> appEnqueuedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AppEnqueuedEventResponse>() {
            @Override
            public AppEnqueuedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPENQUEUED_EVENT, log);
                AppEnqueuedEventResponse typedResponse = new AppEnqueuedEventResponse();
                typedResponse.log = log;
                typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.storageReceipt = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.clusterSize = (Uint8) eventValues.getNonIndexedValues().get(2);
                typedResponse.owner = (Address) eventValues.getNonIndexedValues().get(3);
                typedResponse.pinToNodes = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(4);
                return typedResponse;
            }
        });
    }

    public Flowable<AppEnqueuedEventResponse> appEnqueuedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPENQUEUED_EVENT));
        return appEnqueuedEventFlowable(filter);
    }

    public List<NewNodeEventResponse> getNewNodeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWNODE_EVENT, transactionReceipt);
        ArrayList<NewNodeEventResponse> responses = new ArrayList<NewNodeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewNodeEventResponse typedResponse = new NewNodeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewNodeEventResponse>() {
            @Override
            public NewNodeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWNODE_EVENT, log);
                NewNodeEventResponse typedResponse = new NewNodeEventResponse();
                typedResponse.log = log;
                typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWNODE_EVENT));
        return newNodeEventFlowable(filter);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ClusterFormedEventResponse {
        public Log log;

        public Bytes32 clusterID;

        public Bytes32 storageHash;

        public Uint256 genesisTime;

        public DynamicArray<Bytes32> nodeIDs;

        public DynamicArray<Bytes24> nodeAddresses;

        public DynamicArray<Uint16> ports;
    }

    public static class AppEnqueuedEventResponse {
        public Log log;

        public Bytes32 storageHash;

        public Bytes32 storageReceipt;

        public Uint8 clusterSize;

        public Address owner;

        public DynamicArray<Bytes32> pinToNodes;
    }

    public static class NewNodeEventResponse {
        public Log log;

        public Bytes32 id;
    }
}
