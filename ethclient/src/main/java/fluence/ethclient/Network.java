package fluence.ethclient;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes24;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class Network extends Contract {
    private static final String BINARY = "6080604052600160065560008054600160a060020a031916331790556134d48061002a6000396000f3006080604052600436106100ed5763ffffffff60e060020a6000350416630988ca8c81146100f257806318b919e91461015b578063217fe6c6146101e55780632238ba2f1461026057806324953eaa14610281578063286dd3f5146102d6578063715018a6146102f75780637b9417c81461030c5780637ea29f621461032d5780638da5cb5b146103605780639835b417146103915780639914923b146104c95780639b19251a1461068b578063bfc45a53146106ac578063c7c02e44146106c1578063e2683e9214610729578063e2ec6ec314610880578063f2fde38b146108d5578063f5b3b621146108f6575b600080fd5b3480156100fe57600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610159958335600160a060020a031695369560449491939091019190819084018382808284375094975061090b9650505050505050565b005b34801561016757600080fd5b50610170610979565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101aa578181015183820152602001610192565b50505050905090810190601f1680156101d75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f157600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261024c958335600160a060020a031695369560449491939091019190819084018382808284375094975061099e9650505050505050565b604080519115158252519081900360200190f35b34801561026c57600080fd5b5061015960043560243560ff60443516610a11565b34801561028d57600080fd5b506040805160206004803580820135838102808601850190965280855261015995369593946024949385019291829185019084908082843750949750610bd79650505050505050565b3480156102e257600080fd5b50610159600160a060020a0360043516610c24565b34801561030357600080fd5b50610159610c6b565b34801561031857600080fd5b50610159600160a060020a0360043516610cd7565b34801561033957600080fd5b5061015960043567ffffffffffffffff196024351661ffff60443581169060643516610d1b565b34801561036c57600080fd5b50610375611040565b60408051600160a060020a039092168252519081900360200190f35b34801561039d57600080fd5b506103a661104f565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b838110156103f25781810151838201526020016103da565b50505050905001858103845288818151815260200191508051906020019060200280838360005b83811015610431578181015183820152602001610419565b50505050905001858103835287818151815260200191508051906020019060200280838360005b83811015610470578181015183820152602001610458565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156104af578181015183820152602001610497565b505050509050019850505050505050505060405180910390f35b3480156104d557600080fd5b506104de6115ac565b6040518080602001806020018060200180602001806020018060200187810387528d818151815260200191508051906020019060200280838360005b8381101561053257818101518382015260200161051a565b5050505090500187810386528c818151815260200191508051906020019060200280838360005b83811015610571578181015183820152602001610559565b5050505090500187810385528b818151815260200191508051906020019060200280838360005b838110156105b0578181015183820152602001610598565b5050505090500187810384528a818151815260200191508051906020019060200280838360005b838110156105ef5781810151838201526020016105d7565b50505050905001878103835289818151815260200191508051906020019060200280838360005b8381101561062e578181015183820152602001610616565b50505050905001878103825288818151815260200191508051906020019060200280838360005b8381101561066d578181015183820152602001610655565b505050509050019c5050505050505050505050505060405180910390f35b34801561069757600080fd5b5061024c600160a060020a0360043516611a95565b3480156106b857600080fd5b506104de611aca565b3480156106cd57600080fd5b506106d9600435611db5565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156107155781810151838201526020016106fd565b505050509050019250505060405180910390f35b34801561073557600080fd5b50610741600435612146565b60408051888152602080820189905291810187905260e060608201818152875191830191909152865191929091608084019160a085019160c08601916101008701918b8201910280838360005b838110156107a657818101518382015260200161078e565b50505050905001858103845288818151815260200191508051906020019060200280838360005b838110156107e55781810151838201526020016107cd565b50505050905001858103835287818151815260200191508051906020019060200280838360005b8381101561082457818101518382015260200161080c565b50505050905001858103825286818151815260200191508051906020019060200280838360005b8381101561086357818101518382015260200161084b565b505050509050019b50505050505050505050505060405180910390f35b34801561088c57600080fd5b5060408051602060048035808201358381028086018501909652808552610159953695939460249493850192918291850190849080828437509497506124149650505050505050565b3480156108e157600080fd5b50610159600160a060020a0360043516612461565b34801561090257600080fd5b506103a6612481565b610975826001836040518082805190602001908083835b602083106109415780518252601f199092019160209182019101610922565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050612673565b5050565b6040805180820190915260098152600080516020613489833981519152602082015281565b6000610a0a836001846040518082805190602001908083835b602083106109d65780518252601f1990920191602091820191016109b7565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050612688565b9392505050565b610a1a33611a95565b1515610a70576040805160e560020a62461bcd02815260206004820152601e60248201527f5468652073656e646572206973206e6f7420696e2077686974656c6973740000604482015290519081900360640190fd5b6040805160a0810182528481526020810184815260ff8085169383019384523360608401908152600060808501818152600780546001810182559252945160039091027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68881019190915592517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68984015593517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a909201805494519351151560a860020a0275ff00000000000000000000000000000000000000000019600160a060020a03959095166101000274ffffffffffffffffffffffffffffffffffffffff00199490931660ff1990961695909517929092161791909116919091179055610b986126a7565b1515610bd2576040805184815290517fd18fba5b22517a48b063e62f8b6acbfc4dbfba1583e929178d3fc862218544dd9181900360200190a15b505050565b60008054600160a060020a03163314610bef57600080fd5b5060005b815181101561097557610c1c8282815181101515610c0d57fe5b90602001906020020151610c24565b600101610bf3565b600054600160a060020a03163314610c3b57600080fd5b610c6881604080519081016040528060098152602001600080516020613489833981519152815250612cf2565b50565b600054600160a060020a03163314610c8257600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a03163314610cee57600080fd5b610c6881604080519081016040528060098152602001600080516020613489833981519152815250612e03565b610d2433611a95565b1515610d7a576040805160e560020a62461bcd02815260206004820152601e60248201527f5468652073656e646572206973206e6f7420696e2077686974656c6973740000604482015290519081900360640190fd5b60008481526003602052604090205415610dde576040805160e560020a62461bcd02815260206004820152601f60248201527f54686973206e6f646520697320616c7265616479207265676973746572656400604482015290519081900360640190fd5b61ffff80821690831610610e3c576040805160e560020a62461bcd02815260206004820181905260248201527f506f72742072616e676520697320656d707479206f7220696e636f7272656374604482015290519081900360640190fd5b6040805160c08101825285815267ffffffffffffffff198516602080830191825261ffff86811684860181815287831660608701908152608087019283523360a0880190815260008d8152600387528981209851895596516001808a01805495519451965177ffffffffffffffffffffffffffffffffffffffffffffffff19909616680100000000000000009093049290921779ffff000000000000000000000000000000000000000000000000191660c060020a94881694909402939093177fffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffff1660d060020a95871695909502949094177fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff1660e060020a939095169290920293909317909155516002948501805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390921691909117905583548082019094557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9093018890556004805493840181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b909101869055815186815291517fb0cd47a7093fb93a9ce97304d3afb8df43e02e48502e47fd5fbb6c4020d935b59281900390910190a15b6110306126a7565b1561103a57611028565b50505050565b600054600160a060020a031681565b606080606080606060008060006110646130dd565b60608060608060006110746130dd565b60006001600654036040519080825280602002602001820160405280156110b557816020015b6110a26130dd565b81526020019060019003908161109a5790505b509b5060009a50600199505b6006548a101561139c5760018a039850600560008b6001026000191660001916815260200190815260200160002060e060405190810160405290816000820154600019166000191681526020016001820160a060405190810160405290816000820154600019166000191681526020016001820154600019166000191681526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a9004600160a060020a0316600160a060020a0316600160a060020a031681526020016002820160159054906101000a900460ff1615151515815250508152602001600482015481526020016005820180548060200260200160405190810160405280929190818152602001828054801561120757602002820191906000526020600020905b815481526001909101906020018083116111f2575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561127657602002820191906000526020600020905b8154680100000000000000000267ffffffffffffffff1916815260019091019060200180831161124b575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156112f657602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116112bd5790505b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561135857602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161133a575b5050505050815250509750878c8a81518110151561137257fe5b9060200190602002018190525087602001516040015160ff168b019a5089806001019a50506110c1565b8a6040519080825280602002602001820160405280156113c6578160200160208202803883390190505b5096508a6040519080825280602002602001820160405280156113f3578160200160208202803883390190505b5095508a604051908082528060200260200182016040528015611420578160200160208202803883390190505b5094508a60405190808252806020026020018201604052801561144d578160200160208202803883390190505b50935060009a50600092505b8b51831015611595578b8381518110151561147057fe5b906020019060200201519150600090505b81608001515181101561158a57606082015180518290811061149f57fe5b90602001906020020151878c8151811015156114b757fe5b6020908102909101015260808201518051829081106114d257fe5b90602001906020020151868c8151811015156114ea57fe5b67ffffffffffffffff1990921660209283029091019091015260a082015180518290811061151457fe5b90602001906020020151858c81518110151561152c57fe5b61ffff90921660209283029091019091015260c082015180518290811061154f57fe5b90602001906020020151848c81518110151561156757fe5b600160a060020a0390921660209283029091019091015260019a8b019a01611481565b600190920191611459565b50949e939d50919b50995090975050505050505050565b6060806060806060806060600060608060608060608060006115cc6130dd565b60016006540360405190808252806020026020018201604052801561160b57816020015b6115f86130dd565b8152602001906001900390816115f05790505b509950600198505b60065489101561186657600089815260056020818152604092839020835160e08101855281548152845160a08101865260018301548152600283015481850152600383015460ff80821683890152600160a060020a0361010083041660608085019190915260a860020a9092041615156080830152828501919091526004830154828701529382018054865181860281018601909752808752919592948601939091908301828280156116e657602002820191906000526020600020905b815481526001909101906020018083116116d1575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561175557602002820191906000526020600020905b8154680100000000000000000267ffffffffffffffff1916815260019091019060200180831161172a575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156117d557602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161179c5790505b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561183757602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611819575b5050505050815250508a60018b0381518110151561185157fe5b60209081029091010152600190980197611613565b8951604051908082528060200260200182016040528015611891578160200160208202803883390190505b50975089516040519080825280602002602001820160405280156118bf578160200160208202803883390190505b50965089516040519080825280602002602001820160405280156118ed578160200160208202803883390190505b509550895160405190808252806020026020018201604052801561191b578160200160208202803883390190505b5094508951604051908082528060200260200182016040528015611949578160200160208202803883390190505b5093508951604051908082528060200260200182016040528015611977578160200160208202803883390190505b509250600091505b8951821015611a7e57898281518110151561199657fe5b906020019060200201519050806000015188838151811015156119b557fe5b60209081029091010152604081015187518890849081106119d257fe5b60209081029091018101919091528101515186518790849081106119f257fe5b60209081029091018101919091528181015101518551869084908110611a1457fe5b6020908102909101810191909152810151604001518451859084908110611a3757fe5b60ff9092166020928302909101820152810151606001518351849084908110611a5c57fe5b600160a060020a0390921660209283029091019091015260019091019061197f565b50959e949d50929b50909950975095509350505050565b6000611ac48260408051908101604052806009815260200160008051602061348983398151915281525061099e565b92915050565b6060806060806060806060806060806060806000611ae6613122565b600454604080518281526020808402820101909152908015611b12578160200160208202803883390190505b506004546040805182815260208084028201019091529199508015611b41578160200160208202803883390190505b506004546040805182815260208084028201019091529198508015611b70578160200160208202803883390190505b506004546040805182815260208084028201019091529197508015611b9f578160200160208202803883390190505b506004546040805182815260208084028201019091529196508015611bce578160200160208202803883390190505b506004546040805182815260208084028201019091529195508015611bfd578160200160208202803883390190505b509250600091505b600454821015611da05760036000600484815481101515611c2257fe5b600091825260208083209091015483528281019390935260409182019020815160c0810183528154808252600183015467ffffffffffffffff19680100000000000000008202169583019590955261ffff60c060020a860481169483019490945260d060020a85048416606083015260e060020a909404909216608083015260020154600160a060020a031660a08201528951909250899084908110611cc457fe5b60209081029091018101919091528101518751889084908110611ce357fe5b67ffffffffffffffff1990921660209283029091019091015260408101518651879084908110611d0f57fe5b61ffff90921660209283029091019091015260608101518551869084908110611d3457fe5b61ffff90921660209283029091019091015260808101518451859084908110611d5957fe5b61ffff90921660209283029091019091015260a08101518351849084908110611d7e57fe5b600160a060020a03909216602092830290910190910152600190910190611c05565b50959c949b5092995090975095509350915050565b6060611dbf613122565b6060600080611dcc6130dd565b6000878152600360209081526040808320815160c08101835281548152600182015467ffffffffffffffff19680100000000000000008202168286015261ffff60c060020a8204811683860181905260d060020a83048216606085015260e060020a909204811660808401819052600290940154600160a060020a031660a08401528451919093039092168083528085028301909401909252909750908015611e7f578160200160208202803883390190505b50945060009350600192505b60065483101561213a57600083815260056020818152604092839020835160e08101855281548152845160a08101865260018301548152600283015481850152600383015460ff80821683890152600160a060020a0361010083041660608085019190915260a860020a909204161515608083015282850191909152600483015482870152938201805486518186028101860190975280875291959294860193909190830182828015611f5e57602002820191906000526020600020905b81548152600190910190602001808311611f49575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015611fcd57602002820191906000526020600020905b8154680100000000000000000267ffffffffffffffff19168152600190910190602001808311611fa2575b505050505081526020016007820180548060200260200160405190810160405280929190818152602001828054801561204d57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116120145790505b50505050508152602001600882018054806020026020016040519081016040528092919081815260200182805480156120af57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612091575b5050505050815250509150600090505b81608001515181101561212f57856020015167ffffffffffffffff19168260800151828151811015156120ee57fe5b9060200190602002015167ffffffffffffffff19161415612127578151855160018601958791811061211c57fe5b602090810290910101525b6001016120bf565b600190920191611e8b565b50929695505050505050565b60008060006060806060806121596130dd565b600089815260056020818152604092839020835160e08101855281548152845160a08101865260018301548152600283015481850152600383015460ff80821683890152600160a060020a0361010083041660608085019190915260a860020a90920416151560808301528285019190915260048301548287015293820180548651818602810186019097528087529195929486019390919083018282801561222257602002820191906000526020600020905b8154815260019091019060200180831161220d575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561229157602002820191906000526020600020905b8154680100000000000000000267ffffffffffffffff19168152600190910190602001808311612266575b505050505081526020016007820180548060200260200160405190810160405280929190818152602001828054801561231157602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116122d85790505b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561237357602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612355575b5050509190925250508151919250506000106123d9576040805160e560020a62461bcd02815260206004820152601860248201527f7468657265206973206e6f207375636820636c75737465720000000000000000604482015290519081900360640190fd5b602081810151805191015160408301516060840151608085015160a086015160c090960151949e939d50919b50995097509195509350915050565b60008054600160a060020a0316331461242c57600080fd5b5060005b815181101561097557612459828281518110151561244a57fe5b90602001906020020151610cd7565b600101612430565b600054600160a060020a0316331461247857600080fd5b610c6881612ed5565b6060806060806060806060806000612497613157565b6007546040805182815260208084028201019091529080156124c3578160200160208202803883390190505b5060075460408051828152602080840282010190915291975080156124f2578160200160208202803883390190505b506007546040805182815260208084028201019091529196508015612521578160200160208202803883390190505b506007546040805182815260208084028201019091529195508015612550578160200160208202803883390190505b509250600091505b60075482101561266357600780548390811061257057fe5b60009182526020918290206040805160a081018252600390930290910180548084526001820154948401949094526002015460ff80821692840192909252600160a060020a03610100820416606084015260a860020a9004161515608082015287519092508790849081106125e157fe5b6020908102909101810191909152810151855186908490811061260057fe5b602090810290910101526040810151845185908490811061261d57fe5b60ff9092166020928302909101909101526060810151835184908490811061264157fe5b600160a060020a03909216602092830290910190910152600190910190612558565b5093989297509095509350915050565b61267d8282612688565b151561097557600080fd5b600160a060020a03166000908152602091909152604090205460ff1690565b6000806126b2613157565b6060806060806000806126c3613122565b60008060009a505b6007548b101561277857600780548c9081106126e357fe5b60009182526020918290206040805160a08101825260039093029091018054835260018101549383019390935260029092015460ff80821693830193909352600160a060020a03610100820416606083015260a860020a900490911615801560808301819052919b50906127635750896040015160ff1660028054905010155b1561276d57612778565b6001909a01996126cb565b6007548b1061278a5760009b50612ce4565b6127938b612f52565b896040015160ff166040519080825280602002602001820160405280156127c4578160200160208202803883390190505b509850896040015160ff166040519080825280602002602001820160405280156127f8578160200160208202803883390190505b509750896040015160ff1660405190808252806020026020018201604052801561282c578160200160208202803883390190505b509650896040015160ff16604051908082528060200260200182016040528015612860578160200160208202803883390190505b509550600094505b896040015160ff16851015612a1f57600280548690811061288557fe5b600091825260208083209091015480835260038252604092839020835160c08101855281548152600182015467ffffffffffffffff19680100000000000000008202169482019490945261ffff60c060020a850481169582019590955260d060020a840485166060820181905260e060020a90940490941660808501819052600290910154600160a060020a031660a085015290965091945010612a115783898681518110151561293257fe5b6020908102909101810191909152830151885189908790811061295157fe5b67ffffffffffffffff199092166020928302909101909101526080830151875188908790811061297d57fe5b61ffff90921660209283029091019091015260a083015186518790879081106129a257fe5b600160a060020a03909216602092830290910182015260008581526003909152604090206001908101805461ffff60e060020a80830482168501909116027fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff9091161790559490940193612a1a565b612a1a8561303d565b612868565b6006600081548092919060010191905055600102915042905060e060405190810160405280836000191681526020018b81526020018281526020018a81526020018981526020018881526020018781525060056000846000191660001916815260200190815260200160002060008201518160000190600019169055602082015181600101600082015181600001906000191690556020820151816001019060001916905560408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a815481600160a060020a030219169083600160a060020a0316021790555060808201518160020160156101000a81548160ff0219169083151502179055505050604082015181600401556060820151816005019080519060200190612b5a929190613185565b5060808201518051612b769160068401916020909101906131d2565b5060a08201518051612b92916007840191602090910190613246565b5060c08201518051612bae9160088401916020909101906132eb565b509050507f28c3d361196410d2059b40d53bf75ae21adebcec217c5a2564746ed2c3427fd2828b60000151838c8c8c6040518087600019166000191681526020018660001916600019168152602001858152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b83811015612c47578181015183820152602001612c2f565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015612c86578181015183820152602001612c6e565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015612cc5578181015183820152602001612cad565b50505050905001995050505050505050505060405180910390a160019b505b505050505050505050505090565b612d5c826001836040518082805190602001908083835b60208310612d285780518252601f199092019160209182019101612d09565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050613096565b81600160a060020a03167fd211483f91fc6eff862467f8de606587a30c8fc9981056f051b897a418df803a826040518080602001828103825283818151815260200191508051906020019080838360005b83811015612dc5578181015183820152602001612dad565b50505050905090810190601f168015612df25780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b612e6d826001836040518082805190602001908083835b60208310612e395780518252601f199092019160209182019101612e1a565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220929150506130b8565b81600160a060020a03167fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b7004898260405180806020018281038252838181518152602001915080519060200190808383600083811015612dc5578181015183820152602001612dad565b600160a060020a0381161515612eea57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60075460001901811461302a57600780546000198101908110612f7157fe5b9060005260206000209060030201600782815481101515612f8e57fe5b600091825260209091208254600390920201908155600180830154908201556002918201805492909101805460ff191660ff938416178082558254600160a060020a0361010091829004160274ffffffffffffffffffffffffffffffffffffffff001990911617808255915460a860020a90819004909316151590920275ff000000000000000000000000000000000000000000199091161790555b6007805460001901906109759082613359565b6002546000190181146130835760028054600019810190811061305c57fe5b906000526020600020015460028281548110151561307657fe5b6000918252602090912001555b6002805460001901906109759082613385565b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b60408051610160810190915260008152602081016130f9613157565b815260200160008152602001606081526020016060815260200160608152602001606081525090565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b8280548282559060005260206000209081019282156131c2579160200282015b828111156131c257825182556020909201916001909101906131a5565b506131ce9291506133a5565b5090565b82805482825590600052602060002090810192821561323a579160200282015b8281111561323a578251825477ffffffffffffffffffffffffffffffffffffffffffffffff1916680100000000000000009091041782556020909201916001909101906131f2565b506131ce9291506133c2565b82805482825590600052602060002090600f016010900481019282156132df5791602002820160005b838211156132af57835183826101000a81548161ffff021916908361ffff160217905550926020019260020160208160010104928301926001030261326f565b80156132dd5782816101000a81549061ffff02191690556002016020816001010492830192600103026132af565b505b506131ce9291506133f7565b82805482825590600052602060002090810192821561334d579160200282015b8281111561334d578251825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390911617825560209092019160019091019061330b565b506131ce929150613416565b815481835581811115610bd257600302816003028360005260206000209182019101610bd29190613447565b815481835581811115610bd257600083815260209020610bd29181019083015b6133bf91905b808211156131ce57600081556001016133ab565b90565b6133bf91905b808211156131ce57805477ffffffffffffffffffffffffffffffffffffffffffffffff191681556001016133c8565b6133bf91905b808211156131ce57805461ffff191681556001016133fd565b6133bf91905b808211156131ce57805473ffffffffffffffffffffffffffffffffffffffff1916815560010161341c565b6133bf91905b808211156131ce576000808255600182015560028101805475ffffffffffffffffffffffffffffffffffffffffffff1916905560030161344d560077686974656c6973740000000000000000000000000000000000000000000000a165627a7a723058201760fe1c15becedde4f3618f829675638a0da4cb67ea9e479299963858e413810029";

    public static final String FUNC_CHECKROLE = "checkRole";

    public static final String FUNC_ROLE_WHITELISTED = "ROLE_WHITELISTED";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_ADDCODE = "addCode";

    public static final String FUNC_REMOVEADDRESSESFROMWHITELIST = "removeAddressesFromWhitelist";

    public static final String FUNC_REMOVEADDRESSFROMWHITELIST = "removeAddressFromWhitelist";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_ADDADDRESSTOWHITELIST = "addAddressToWhitelist";

    public static final String FUNC_ADDNODE = "addNode";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_GETCLUSTERSNODES = "getClustersNodes";

    public static final String FUNC_GETCLUSTERSINFO = "getClustersInfo";

    public static final String FUNC_WHITELIST = "whitelist";

    public static final String FUNC_GETREADYNODES = "getReadyNodes";

    public static final String FUNC_GETNODECLUSTERS = "getNodeClusters";

    public static final String FUNC_GETCLUSTER = "getCluster";

    public static final String FUNC_ADDADDRESSESTOWHITELIST = "addAddressesToWhitelist";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_GETENQUEUEDCODES = "getEnqueuedCodes";

    public static final Event CLUSTERFORMED_EVENT = new Event("ClusterFormed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
    ;

    public static final Event CODEENQUEUED_EVENT = new Event("CodeEnqueued", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event NEWNODE_EVENT = new Event("NewNode", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event ROLEADDED_EVENT = new Event("RoleAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event ROLEREMOVED_EVENT = new Event("RoleRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event OWNERSHIPRENOUNCED_EVENT = new Event("OwnershipRenounced", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public void checkRole(Address _operator, Utf8String _role) {
        throw new RuntimeException("cannot call constant function with void return type");
    }

    public RemoteCall<Utf8String> ROLE_WHITELISTED() {
        final Function function = new Function(FUNC_ROLE_WHITELISTED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> hasRole(Address _operator, Utf8String _role) {
        final Function function = new Function(FUNC_HASROLE, 
                Arrays.<Type>asList(_operator, _role), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addCode(Bytes32 storageHash, Bytes32 storageReceipt, Uint8 clusterSize) {
        final Function function = new Function(
                FUNC_ADDCODE, 
                Arrays.<Type>asList(storageHash, storageReceipt, clusterSize), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeAddressesFromWhitelist(DynamicArray<Address> _operators) {
        final Function function = new Function(
                FUNC_REMOVEADDRESSESFROMWHITELIST, 
                Arrays.<Type>asList(_operators), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeAddressFromWhitelist(Address _operator) {
        final Function function = new Function(
                FUNC_REMOVEADDRESSFROMWHITELIST, 
                Arrays.<Type>asList(_operator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addAddressToWhitelist(Address _operator) {
        final Function function = new Function(
                FUNC_ADDADDRESSTOWHITELIST, 
                Arrays.<Type>asList(_operator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addNode(Bytes32 nodeID, Bytes24 nodeAddress, Uint16 startPort, Uint16 endPort) {
        final Function function = new Function(
                FUNC_ADDNODE, 
                Arrays.<Type>asList(nodeID, nodeAddress, startPort, endPort), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>> getClustersNodes() {
        final Function function = new Function(FUNC_GETCLUSTERSNODES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>>(
                new Callable<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>>() {
                    @Override
                    public Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Bytes24>) results.get(1), 
                                (DynamicArray<Uint16>) results.get(2), 
                                (DynamicArray<Address>) results.get(3));
                    }
                });
    }

    public RemoteCall<Tuple6<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>> getClustersInfo() {
        final Function function = new Function(FUNC_GETCLUSTERSINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint8>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple6<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>>(
                new Callable<Tuple6<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>>() {
                    @Override
                    public Tuple6<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Uint256>) results.get(1), 
                                (DynamicArray<Bytes32>) results.get(2), 
                                (DynamicArray<Bytes32>) results.get(3), 
                                (DynamicArray<Uint8>) results.get(4), 
                                (DynamicArray<Address>) results.get(5));
                    }
                });
    }

    public RemoteCall<Bool> whitelist(Address _operator) {
        final Function function = new Function(FUNC_WHITELIST, 
                Arrays.<Type>asList(_operator), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>>> getReadyNodes() {
        final Function function = new Function(FUNC_GETREADYNODES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>>>(
                new Callable<Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>>>() {
                    @Override
                    public Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Bytes24>) results.get(1), 
                                (DynamicArray<Uint16>) results.get(2), 
                                (DynamicArray<Uint16>) results.get(3), 
                                (DynamicArray<Uint16>) results.get(4), 
                                (DynamicArray<Address>) results.get(5));
                    }
                });
    }

    public RemoteCall<DynamicArray<Bytes32>> getNodeClusters(Bytes32 nodeID) {
        final Function function = new Function(FUNC_GETNODECLUSTERS, 
                Arrays.<Type>asList(nodeID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple7<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>> getCluster(Bytes32 clusterID) {
        final Function function = new Function(FUNC_GETCLUSTER, 
                Arrays.<Type>asList(clusterID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple7<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>>(
                new Callable<Tuple7<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>>() {
                    @Override
                    public Tuple7<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>(
                                (Bytes32) results.get(0), 
                                (Bytes32) results.get(1), 
                                (Uint256) results.get(2), 
                                (DynamicArray<Bytes32>) results.get(3), 
                                (DynamicArray<Bytes24>) results.get(4), 
                                (DynamicArray<Uint16>) results.get(5), 
                                (DynamicArray<Address>) results.get(6));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addAddressesToWhitelist(DynamicArray<Address> _operators) {
        final Function function = new Function(
                FUNC_ADDADDRESSESTOWHITELIST, 
                Arrays.<Type>asList(_operators), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(Address _newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(_newOwner), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>> getEnqueuedCodes() {
        final Function function = new Function(FUNC_GETENQUEUEDCODES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint8>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>>(
                new Callable<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>>() {
                    @Override
                    public Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Bytes32>) results.get(1), 
                                (DynamicArray<Uint8>) results.get(2), 
                                (DynamicArray<Address>) results.get(3));
                    }
                });
    }

    public List<ClusterFormedEventResponse> getClusterFormedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CLUSTERFORMED_EVENT, transactionReceipt);
        ArrayList<ClusterFormedEventResponse> responses = new ArrayList<ClusterFormedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ClusterFormedEventResponse typedResponse = new ClusterFormedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.clusterID = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(2);
            typedResponse.solverIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(3);
            typedResponse.solverAddrs = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(4);
            typedResponse.solverPorts = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(5);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ClusterFormedEventResponse> clusterFormedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ClusterFormedEventResponse>() {
            @Override
            public ClusterFormedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CLUSTERFORMED_EVENT, log);
                ClusterFormedEventResponse typedResponse = new ClusterFormedEventResponse();
                typedResponse.log = log;
                typedResponse.clusterID = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(2);
                typedResponse.solverIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(3);
                typedResponse.solverAddrs = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(4);
                typedResponse.solverPorts = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(5);
                return typedResponse;
            }
        });
    }

    public Flowable<ClusterFormedEventResponse> clusterFormedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CLUSTERFORMED_EVENT));
        return clusterFormedEventFlowable(filter);
    }

    public List<CodeEnqueuedEventResponse> getCodeEnqueuedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CODEENQUEUED_EVENT, transactionReceipt);
        ArrayList<CodeEnqueuedEventResponse> responses = new ArrayList<CodeEnqueuedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CodeEnqueuedEventResponse typedResponse = new CodeEnqueuedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CodeEnqueuedEventResponse> codeEnqueuedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CodeEnqueuedEventResponse>() {
            @Override
            public CodeEnqueuedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CODEENQUEUED_EVENT, log);
                CodeEnqueuedEventResponse typedResponse = new CodeEnqueuedEventResponse();
                typedResponse.log = log;
                typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<CodeEnqueuedEventResponse> codeEnqueuedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CODEENQUEUED_EVENT));
        return codeEnqueuedEventFlowable(filter);
    }

    public List<NewNodeEventResponse> getNewNodeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWNODE_EVENT, transactionReceipt);
        ArrayList<NewNodeEventResponse> responses = new ArrayList<NewNodeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewNodeEventResponse typedResponse = new NewNodeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewNodeEventResponse>() {
            @Override
            public NewNodeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWNODE_EVENT, log);
                NewNodeEventResponse typedResponse = new NewNodeEventResponse();
                typedResponse.log = log;
                typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWNODE_EVENT));
        return newNodeEventFlowable(filter);
    }

    public List<RoleAddedEventResponse> getRoleAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEADDED_EVENT, transactionReceipt);
        ArrayList<RoleAddedEventResponse> responses = new ArrayList<RoleAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAddedEventResponse typedResponse = new RoleAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.role = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleAddedEventResponse> roleAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RoleAddedEventResponse>() {
            @Override
            public RoleAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEADDED_EVENT, log);
                RoleAddedEventResponse typedResponse = new RoleAddedEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.role = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<RoleAddedEventResponse> roleAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADDED_EVENT));
        return roleAddedEventFlowable(filter);
    }

    public List<RoleRemovedEventResponse> getRoleRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEREMOVED_EVENT, transactionReceipt);
        ArrayList<RoleRemovedEventResponse> responses = new ArrayList<RoleRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRemovedEventResponse typedResponse = new RoleRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.role = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleRemovedEventResponse> roleRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RoleRemovedEventResponse>() {
            @Override
            public RoleRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEREMOVED_EVENT, log);
                RoleRemovedEventResponse typedResponse = new RoleRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.role = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<RoleRemovedEventResponse> roleRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREMOVED_EVENT));
        return roleRemovedEventFlowable(filter);
    }

    public List<OwnershipRenouncedEventResponse> getOwnershipRenouncedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, transactionReceipt);
        ArrayList<OwnershipRenouncedEventResponse> responses = new ArrayList<OwnershipRenouncedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipRenouncedEventResponse> ownershipRenouncedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipRenouncedEventResponse>() {
            @Override
            public OwnershipRenouncedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, log);
                OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipRenouncedEventResponse> ownershipRenouncedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPRENOUNCED_EVENT));
        return ownershipRenouncedEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ClusterFormedEventResponse {
        public Log log;

        public Bytes32 clusterID;

        public Bytes32 storageHash;

        public Uint256 genesisTime;

        public DynamicArray<Bytes32> solverIDs;

        public DynamicArray<Bytes24> solverAddrs;

        public DynamicArray<Uint16> solverPorts;
    }

    public static class CodeEnqueuedEventResponse {
        public Log log;

        public Bytes32 storageHash;
    }

    public static class NewNodeEventResponse {
        public Log log;

        public Bytes32 id;
    }

    public static class RoleAddedEventResponse {
        public Log log;

        public Address operator;

        public Utf8String role;
    }

    public static class RoleRemovedEventResponse {
        public Log log;

        public Address operator;

        public Utf8String role;
    }

    public static class OwnershipRenouncedEventResponse {
        public Log log;

        public Address previousOwner;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public Address previousOwner;

        public Address newOwner;
    }
}
