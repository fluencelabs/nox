/*
 * Copyright 2018 Fluence Labs Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package fluence.ethclient;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes24;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class Network extends Contract {
    private static final String BINARY = "6080604052600160075560008054600160a060020a031916331790556141078061002a6000396000f3006080604052600436106100ed5763ffffffff60e060020a6000350416630988ca8c81146100f257806318b919e91461015b578063217fe6c6146101e5578063243dcbf21461026057806324953eaa14610298578063286dd3f5146102ed578063715018a61461030e5780637a62bcff146103235780637b9417c8146103525780638da5cb5b146103735780639835b417146103a45780639914923b146104dc5780639b19251a146106e3578063bfc45a5314610704578063c7c02e4414610719578063e2683e9214610781578063e2ec6ec3146108e2578063f2fde38b14610937578063f5b3b62114610958575b600080fd5b3480156100fe57600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610159958335600160a060020a0316953695604494919390910191908190840183828082843750949750610afb9650505050505050565b005b34801561016757600080fd5b50610170610b69565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101aa578181015183820152602001610192565b50505050905090810190601f1680156101d75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f157600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261024c958335600160a060020a0316953695604494919390910191908190840183828082843750949750610b8e9650505050505050565b604080519115158252519081900360200190f35b34801561026c57600080fd5b5061015960043567ffffffffffffffff196024351661ffff604435811690606435166084351515610c01565b3480156102a457600080fd5b506040805160206004803580820135838102808601850190965280855261015995369593946024949385019291829185019084908082843750949750610fa49650505050505050565b3480156102f957600080fd5b50610159600160a060020a0360043516610ff1565b34801561031a57600080fd5b50610159611038565b34801561032f57600080fd5b506101596004803590602480359160ff60443516916064359081019101356110a4565b34801561035e57600080fd5b50610159600160a060020a03600435166112ca565b34801561037f57600080fd5b5061038861130e565b60408051600160a060020a039092168252519081900360200190f35b3480156103b057600080fd5b506103b961131d565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b838110156104055781810151838201526020016103ed565b50505050905001858103845288818151815260200191508051906020019060200280838360005b8381101561044457818101518382015260200161042c565b50505050905001858103835287818151815260200191508051906020019060200280838360005b8381101561048357818101518382015260200161046b565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156104c25781810151838201526020016104aa565b505050509050019850505050505050505060405180910390f35b3480156104e857600080fd5b506104f16118b8565b604051808060200180602001806020018060200180602001806020018060200188810388528f818151815260200191508051906020019060200280838360005b83811015610549578181015183820152602001610531565b5050505090500188810387528e818151815260200191508051906020019060200280838360005b83811015610588578181015183820152602001610570565b5050505090500188810386528d818151815260200191508051906020019060200280838360005b838110156105c75781810151838201526020016105af565b5050505090500188810385528c818151815260200191508051906020019060200280838360005b838110156106065781810151838201526020016105ee565b5050505090500188810384528b818151815260200191508051906020019060200280838360005b8381101561064557818101518382015260200161062d565b5050505090500188810383528a818151815260200191508051906020019060200280838360005b8381101561068457818101518382015260200161066c565b50505050905001888103825289818151815260200191508051906020019060200280838360005b838110156106c35781810151838201526020016106ab565b505050509050019e50505050505050505050505050505060405180910390f35b3480156106ef57600080fd5b5061024c600160a060020a0360043516611dd7565b34801561071057600080fd5b506104f1611e0c565b34801561072557600080fd5b50610731600435612149565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561076d578181015183820152602001610755565b505050509050019250505060405180910390f35b34801561078d57600080fd5b5061079960043561253b565b6040805189815260208082018a905291810188905282151560e082015261010060608201818152885191830191909152875191929091608084019160a085019160c08601916101208701918c8201910280838360005b838110156108075781810151838201526020016107ef565b50505050905001858103845289818151815260200191508051906020019060200280838360005b8381101561084657818101518382015260200161082e565b50505050905001858103835288818151815260200191508051906020019060200280838360005b8381101561088557818101518382015260200161086d565b50505050905001858103825287818151815260200191508051906020019060200280838360005b838110156108c45781810151838201526020016108ac565b505050509050019c5050505050505050505050505060405180910390f35b3480156108ee57600080fd5b50604080516020600480358082013583810280860185019096528085526101599536959394602494938501929182918501908490808284375094975061286e9650505050505050565b34801561094357600080fd5b50610159600160a060020a03600435166128bb565b34801561096457600080fd5b5061096d6128db565b6040518080602001806020018060200180602001806020018060200187810387528d818151815260200191508051906020019060200280838360005b838110156109c15781810151838201526020016109a9565b5050505090500187810386528c818151815260200191508051906020019060200280838360005b83811015610a005781810151838201526020016109e8565b5050505090500187810385528b818151815260200191508051906020019060200280838360005b83811015610a3f578181015183820152602001610a27565b5050505090500187810384528a818151815260200191508051906020019060200280838360005b83811015610a7e578181015183820152602001610a66565b50505050905001878103835289818151815260200191508051906020019060200280838360005b83811015610abd578181015183820152602001610aa5565b5050505090500187810382528881815181526020019150805190602001906020028083836000838110156108c45781810151838201526020016108ac565b610b65826001836040518082805190602001908083835b60208310610b315780518252601f199092019160209182019101610b12565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050612c29565b5050565b60408051808201909152600981526000805160206140bc833981519152602082015281565b6000610bfa836001846040518082805190602001908083835b60208310610bc65780518252601f199092019160209182019101610ba7565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050612c3e565b9392505050565b610c0a33611dd7565b1515610c60576040805160e560020a62461bcd02815260206004820152601e60248201527f5468652073656e646572206973206e6f7420696e2077686974656c6973740000604482015290519081900360640190fd5b60008581526004602052604090205415610cc4576040805160e560020a62461bcd02815260206004820152601f60248201527f54686973206e6f646520697320616c7265616479207265676973746572656400604482015290519081900360640190fd5b61ffff8083169084161115610d23576040805160e560020a62461bcd02815260206004820181905260248201527f506f72742072616e676520697320656d707479206f7220696e636f7272656374604482015290519081900360640190fd5b60e060405190810160405280866000191681526020018567ffffffffffffffff191681526020018461ffff1681526020018361ffff1681526020018461ffff16815260200133600160a060020a031681526020018215158152506004600087600019166000191681526020019081526020016000206000820151816000019060001916905560208201518160010160006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff0219169083680100000000000000009004021790555060408201518160010160186101000a81548161ffff021916908361ffff160217905550606082015181600101601a6101000a81548161ffff021916908361ffff160217905550608082015181600101601c6101000a81548161ffff021916908361ffff16021790555060a08201518160020160006101000a815481600160a060020a030219169083600160a060020a0316021790555060c08201518160020160146101000a81548160ff021916908315150217905550905050600285908060018154018082558091505090600182039060005260206000200160009091929091909150906000191690555060058590806001815401808255809150509060018203906000526020600020016000909192909190915090600019169055508015610f3a57336000908152600960205260409020805463ffffffff8082166001011663ffffffff19909116179055610f57565b6003805463ffffffff8082166001011663ffffffff199091161790555b610f6081612c5d565b15610f6a57610f57565b6040805186815290517fb0cd47a7093fb93a9ce97304d3afb8df43e02e48502e47fd5fbb6c4020d935b59181900360200190a15050505050565b60008054600160a060020a03163314610fbc57600080fd5b5060005b8151811015610b6557610fe98282815181101515610fda57fe5b90602001906020020151610ff1565b600101610fc0565b600054600160a060020a0316331461100857600080fd5b611035816040805190810160405280600981526020016000805160206140bc8339815191528152506132c7565b50565b600054600160a060020a0316331461104f57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6110ad33611dd7565b1515611103576040805160e560020a62461bcd02815260206004820152601e60248201527f5468652073656e646572206973206e6f7420696e2077686974656c6973740000604482015290519081900360640190fd5b801580611112575060ff831681145b151561118e576040805160e560020a62461bcd02815260206004820152602481018290527f6e756d626572206f662070696e6e6564206e6f6465732073686f756c6420626560448201527f207468652073616d65206173206465736972656420636c757374657253697a65606482015290519081900360840190fd5b6040805160a081018252868152602080820187905260ff861682840152336060830152825184820281810183019094528481526008936080840192879187918291908501908490808284375050509290935250508254600181810180865560009586526020958690208551600490940201928355858501519183019190915560408401516002830180546060870151600160a060020a03166101000274ffffffffffffffffffffffffffffffffffffffff001960ff90941660ff199092169190911792909216919091179055608084015180519195929350611277926003850192910190613c95565b50611289925050600083119050612c5d565b15156112c3576040805186815290517fd18fba5b22517a48b063e62f8b6acbfc4dbfba1583e929178d3fc862218544dd9181900360200190a15b5050505050565b600054600160a060020a031633146112e157600080fd5b611035816040805190810160405280600981526020016000805160206140bc8339815191528152506133d8565b600054600160a060020a031681565b60608060608060606000806000611332613ce2565b6060806060806000611342613ce2565b600060016007540360405190808252806020026020018201604052801561138357816020015b611370613ce2565b8152602001906001900390816113685790505b509b5060009a50600199505b6007548a10156116a85760018a039850600660008b6001026000191660001916815260200190815260200160002060e060405190810160405290816000820154600019166000191681526020016001820160a060405190810160405290816000820154600019166000191681526020016001820154600019166000191681526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a9004600160a060020a0316600160a060020a0316600160a060020a03168152602001600382018054806020026020016040519081016040528092919081815260200182805480156114ac57602002820191906000526020600020905b81548152600190910190602001808311611497575b5050505050815250508152602001600582015481526020016006820180548060200260200160405190810160405280929190818152602001828054801561151357602002820191906000526020600020905b815481526001909101906020018083116114fe575b505050505081526020016007820180548060200260200160405190810160405280929190818152602001828054801561158257602002820191906000526020600020905b8154680100000000000000000267ffffffffffffffff19168152600190910190602001808311611557575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561160257602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116115c95790505b505050505081526020016009820180548060200260200160405190810160405280929190818152602001828054801561166457602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611646575b5050505050815250509750878c8a81518110151561167e57fe5b9060200190602002018190525087602001516040015160ff168b019a5089806001019a505061138f565b8a6040519080825280602002602001820160405280156116d2578160200160208202803883390190505b5096508a6040519080825280602002602001820160405280156116ff578160200160208202803883390190505b5095508a60405190808252806020026020018201604052801561172c578160200160208202803883390190505b5094508a604051908082528060200260200182016040528015611759578160200160208202803883390190505b50935060009a50600092505b8b518310156118a1578b8381518110151561177c57fe5b906020019060200201519150600090505b8160800151518110156118965760608201518051829081106117ab57fe5b90602001906020020151878c8151811015156117c357fe5b6020908102909101015260808201518051829081106117de57fe5b90602001906020020151868c8151811015156117f657fe5b67ffffffffffffffff1990921660209283029091019091015260a082015180518290811061182057fe5b90602001906020020151858c81518110151561183857fe5b61ffff90921660209283029091019091015260c082015180518290811061185b57fe5b90602001906020020151848c81518110151561187357fe5b600160a060020a0390921660209283029091019091015260019a8b019a0161178d565b600190920191611765565b50949e939d50919b50995090975050505050505050565b60608060608060608060608060608060608060608060006118d7613ce2565b600160075403604051908082528060200260200182016040528015611906578160200160208202803883390190505b509850600160075403604051908082528060200260200182016040528015611938578160200160208202803883390190505b50975060016007540360405190808252806020026020018201604052801561196a578160200160208202803883390190505b50965060016007540360405190808252806020026020018201604052801561199c578160200160208202803883390190505b5095506001600754036040519080825280602002602001820160405280156119ce578160200160208202803883390190505b509450600160075403604051908082528060200260200182016040528015611a00578160200160208202803883390190505b509350600160075403604051908082528060200260200182016040528015611a32578160200160208202803883390190505b509250600191505b600160075403821015611dc057600082815260066020908152604091829020825160e08101845281548152835160a0810185526001830180548252600284015482860152600384015460ff8116838801526101009004600160a060020a031660608301526004840180548751818802810188019098528088529396949587810195939492936080860193909291830182828015611af757602002820191906000526020600020905b81548152600190910190602001808311611ae2575b50505050508152505081526020016005820154815260200160068201805480602002602001604051908101604052809291908181526020018280548015611b5e57602002820191906000526020600020905b81548152600190910190602001808311611b49575b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015611bcd57602002820191906000526020600020905b8154680100000000000000000267ffffffffffffffff19168152600190910190602001808311611ba2575b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015611c4d57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611c145790505b5050505050815260200160098201805480602002602001604051908101604052809291908181526020018280548015611caf57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611c91575b505050505081525050905080600001518983815181101515611ccd57fe5b6020908102909101015260408101518851899084908110611cea57fe5b6020908102909101810191909152810151518751889084908110611d0a57fe5b60209081029091018101919091528181015101518651879084908110611d2c57fe5b6020908102909101810191909152810151604001518551869084908110611d4f57fe5b60ff9092166020928302909101820152810151606001518451859084908110611d7457fe5b600160a060020a03909216602092830290910182015281015160800151518351600090911190849084908110611da657fe5b911515602092830290910190910152600190910190611a3a565b50969e959d50939b50919950975095509350915050565b6000611e06826040805190810160405280600981526020016000805160206140bc833981519152815250610b8e565b92915050565b6060806060806060806060806060806060806060806000611e2b613d27565b600554604080518281526020808402820101909152908015611e57578160200160208202803883390190505b50600554604080518281526020808402820101909152919a508015611e86578160200160208202803883390190505b506005546040805182815260208084028201019091529199508015611eb5578160200160208202803883390190505b506005546040805182815260208084028201019091529198508015611ee4578160200160208202803883390190505b506005546040805182815260208084028201019091529197508015611f13578160200160208202803883390190505b506005546040805182815260208084028201019091529196508015611f42578160200160208202803883390190505b506005546040805182815260208084028201019091529195508015611f71578160200160208202803883390190505b509250600091505b600554821015611dc05760046000600584815481101515611f9657fe5b600091825260208083209091015483528281019390935260409182019020815160e0810183528154808252600183015467ffffffffffffffff19680100000000000000008202169583019590955261ffff60c060020a860481169483019490945260d060020a85048416606083015260e060020a909404909216608083015260020154600160a060020a03811660a083015260ff60a060020a90910416151560c08201528a519092508a908490811061204b57fe5b6020908102909101810191909152810151885189908490811061206a57fe5b67ffffffffffffffff199092166020928302909101909101526040810151875188908490811061209657fe5b61ffff909216602092830290910190910152606081015186518790849081106120bb57fe5b61ffff909216602092830290910190910152608081015185518690849081106120e057fe5b61ffff90921660209283029091019091015260a0810151845185908490811061210557fe5b600160a060020a0390921660209283029091019091015260c0810151835184908490811061212f57fe5b911515602092830290910190910152600190910190611f79565b6060612153613d27565b6060600080612160613ce2565b6000878152600460209081526040808320815160e08101835281548152600182015467ffffffffffffffff19680100000000000000008202168286015261ffff60c060020a8204811683860181905260d060020a83048216606085015260e060020a909204811660808401819052600290940154600160a060020a03811660a085015260ff60a060020a90910416151560c08401528451919093039092168083528085028301909401909252909750908015612226578160200160208202803883390190505b50945060009350600192505b60075483101561252f57600083815260066020908152604091829020825160e08101845281548152835160a0810185526001830180548252600284015482860152600384015460ff8116838801526101009004600160a060020a0316606083015260048401805487518188028101880190985280885293969495878101959394929360808601939092918301828280156122ec57602002820191906000526020600020905b815481526001909101906020018083116122d7575b5050505050815250508152602001600582015481526020016006820180548060200260200160405190810160405280929190818152602001828054801561235357602002820191906000526020600020905b8154815260019091019060200180831161233e575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156123c257602002820191906000526020600020905b8154680100000000000000000267ffffffffffffffff19168152600190910190602001808311612397575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561244257602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116124095790505b50505050508152602001600982018054806020026020016040519081016040528092919081815260200182805480156124a457602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612486575b5050505050815250509150600090505b81608001515181101561252457856020015167ffffffffffffffff19168260800151828151811015156124e357fe5b9060200190602002015167ffffffffffffffff1916141561251c578151855160018601958791811061251157fe5b602090810290910101525b6001016124b4565b600190920191612232565b50929695505050505050565b60008060006060806060806000612550613ce2565b60008a815260066020908152604091829020825160e08101845281548152835160a0810185526001830180548252600284015482860152600384015460ff8116838801526101009004600160a060020a03166060830152600484018054875181880281018801909852808852939694958781019593949293608086019390929183018282801561260057602002820191906000526020600020905b815481526001909101906020018083116125eb575b5050505050815250508152602001600582015481526020016006820180548060200260200160405190810160405280929190818152602001828054801561266757602002820191906000526020600020905b81548152600190910190602001808311612652575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156126d657602002820191906000526020600020905b8154680100000000000000000267ffffffffffffffff191681526001909101906020018083116126ab575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561275657602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161271d5790505b50505050508152602001600982018054806020026020016040519081016040528092919081815260200182805480156127b857602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161279a575b50505091909252505081519192505060001061281e576040805160e560020a62461bcd02815260206004820152601860248201527f7468657265206973206e6f207375636820636c75737465720000000000000000604482015290519081900360640190fd5b6020808201518051918101516040840151606085015160808087015160a088015160c0890151929096015151969f50939d50919b5099509097509095509350600010915050919395975091939597565b60008054600160a060020a0316331461288657600080fd5b5060005b8151811015610b65576128b382828151811015156128a457fe5b906020019060200201516112ca565b60010161288a565b600054600160a060020a031633146128d257600080fd5b611035816134aa565b6060806060806060806000806060806060806060806128f8613d63565b60008098505b60085489101561291e5760808201515199909901986001909801976128fe565b60085460408051828152602080840282010190915290801561294a578160200160208202803883390190505b506008546040805182815260208084028201019091529199508015612979578160200160208202803883390190505b5060085460408051828152602080840282010190915291985080156129a8578160200160208202803883390190505b5060085460408051828152602080840282010190915291975080156129d7578160200160208202803883390190505b506008546040805182815260208084028201019091529196508015612a06578160200160208202803883390190505b50935089604051908082528060200260200182016040528015612a33578160200160208202803883390190505b50925060009950600098505b600854891015612c1257600880548a908110612a5757fe5b60009182526020918290206040805160a081018252600490930290910180548352600181015483850152600281015460ff811684840152600160a060020a0361010090910416606084015260038101805483518187028101870190945280845293949193608086019392830182828015612af157602002820191906000526020600020905b81548152600190910190602001808311612adc575b50505050508152505091508160000151888a815181101515612b0f57fe5b6020908102909101810191909152820151875188908b908110612b2e57fe5b602090810290910101526040820151865187908b908110612b4b57fe5b60ff9092166020928302909101909101526060820151855186908b908110612b6f57fe5b90602001906020020190600160a060020a03169081600160a060020a031681525050600082608001515111848a815181101515612ba857fe5b9115156020928302909101909101525060005b816080015151811015612c07576080820151805182908110612bd957fe5b90602001906020020151838b815181101515612bf157fe5b602090810290910101526001998a019901612bbb565b600190980197612a3f565b50959e949d50929b50909950975095509350505050565b612c338282612c3e565b1515610b6557600080fd5b600160a060020a03166000908152602091909152604090205460ff1690565b600080612c68613d63565b6060806060806000806000612c7b613d27565b60008060008e15612c9557612c8e613527565b9c50612ca0565b612c9d6136a1565b9c505b60008d12612d6957600880548e908110612cb657fe5b60009182526020918290206040805160a081018252600490930290910180548352600181015483850152600281015460ff811684840152600160a060020a0361010090910416606084015260038101805483518187028101870190945280845293949193608086019392830182828015612d5057602002820191906000526020600020905b81548152600190910190602001808311612d3b575b5050505050815250509b50612d648d6137cd565b612d72565b60009d506132b5565b8b6040015160ff16604051908082528060200260200182016040528015612da3578160200160208202803883390190505b509a508b6040015160ff16604051908082528060200260200182016040528015612dd7578160200160208202803883390190505b5099508b6040015160ff16604051908082528060200260200182016040528015612e0b578160200160208202803883390190505b5098508b6040015160ff16604051908082528060200260200182016040528015612e3f578160200160208202803883390190505b50975060009650600095505b8b6040015160ff168660ff161015612ff4576002805488908110612e6b57fe5b600091825260208083209091015480835260048252604092839020835160e08101855281548152600182015467ffffffffffffffff19680100000000000000008202169482019490945261ffff60c060020a850481169582019590955260d060020a84048516606082015260e060020a9093049093166080830152600290920154600160a060020a03811660a083015260ff60a060020a90910416151560c08201529095509350612f1c848d61389f565b1515612f2d57600190960195612fe9565b848b8760ff16815181101515612f3f57fe5b60209081029091018101919091528401518a518b9060ff8916908110612f6157fe5b67ffffffffffffffff19909216602092830290910190910152608084015189518a9060ff8916908110612f9057fe5b61ffff90921660209283029091019091015260a08401518851899060ff8916908110612fb857fe5b600160a060020a03909216602092830290910190910152612fd985886138f1565b9250821515612fe9576001909601955b600190950194612e4b565b6007600081548092919060010191905055600102915042905060e060405190810160405280836000191681526020018d81526020018281526020018c81526020018b81526020018a81526020018981525060066000846000191660001916815260200190815260200160002060008201518160000190600019169055602082015181600101600082015181600001906000191690556020820151816001019060001916905560408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a815481600160a060020a030219169083600160a060020a031602179055506080820151816003019080519060200190613103929190613c95565b505050604082015160058201556060820151805161312b916006840191602090910190613c95565b5060808201518051613147916007840191602090910190613d93565b5060a08201518051613163916008840191602090910190613e07565b5060c0820151805161317f916009840191602090910190613eac565b509050507f28c3d361196410d2059b40d53bf75ae21adebcec217c5a2564746ed2c3427fd2828d60000151838e8e8e6040518087600019166000191681526020018660001916600019168152602001858152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b83811015613218578181015183820152602001613200565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561325757818101518382015260200161323f565b50505050905001848103825285818151815260200191508051906020019060200280838360005b8381101561329657818101518382015260200161327e565b50505050905001995050505050505050505060405180910390a160019d505b50505050505050505050505050919050565b613331826001836040518082805190602001908083835b602083106132fd5780518252601f1990920191602091820191016132de565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050613a57565b81600160a060020a03167fd211483f91fc6eff862467f8de606587a30c8fc9981056f051b897a418df803a826040518080602001828103825283818151815260200191508051906020019080838360005b8381101561339a578181015183820152602001613382565b50505050905090810190601f1680156133c75780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b613442826001836040518082805190602001908083835b6020831061340e5780518252601f1990920191602091820191016133ef565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050613a79565b81600160a060020a03167fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b700489826040518080602001828103825283818151815260200191508051906020019080838360008381101561339a578181015183820152602001613382565b600160a060020a03811615156134bf57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000806000613534613d63565b6000339350600092505b60085483101561368357600880548490811061355657fe5b60009182526020918290206040805160a081018252600490930290910180548352600181015483850152600281015460ff811684840152600160a060020a03610100909104166060840152600381018054835181870281018701909452808452939491936080860193928301828280156135f057602002820191906000526020600020905b815481526001909101906020018083116135db575b50505050508152505091506000826080015151119050808015613628575083600160a060020a03168260600151600160a060020a0316145b801561365e5750600160a060020a03841660009081526009602052604090819020549083015163ffffffff90911660ff90911610155b801561366e575061366e82613a9e565b1561367857613683565b60019092019161353e565b600854831061369657600019945061369a565b8294505b5050505090565b6000806136ac613d63565b60008092505b6008548310156137b05760088054849081106136ca57fe5b60009182526020918290206040805160a081018252600490930290910180548352600181015483850152600281015460ff811684840152600160a060020a036101009091041660608401526003810180548351818702810187019094528084529394919360808601939283018282801561376457602002820191906000526020600020905b8154815260019091019060200180831161374f575b505050505081525050915060008260800151511190508015801561379b5750604082015160035460ff90911663ffffffff90911610155b156137a5576137b0565b6001909201916136b2565b60085483106137c35760001993506137c7565b8293505b50505090565b60085460001901811461388c576008805460001981019081106137ec57fe5b906000526020600020906004020160088281548110151561380957fe5b6000918252602090912082546004909202019081556001808301549082015560028083018054918301805460ff191660ff909316929092178083559054600160a060020a0361010091829004160274ffffffffffffffffffffffffffffffffffffffff0019909116179055600380830180546138889284019190613f1a565b5050505b6008805490610b65906000198301613f5a565b608081015151600090811080156138e1578360c0015180156138da57508260600151600160a060020a03168460a00151600160a060020a0316145b91506138ea565b8360c001511591505b5092915050565b60006138fb613d27565b50600083815260046020908152604091829020600180820180547fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff811660e060020a9182900461ffff908116909401841682021791829055855160e0810187528454815268010000000000000000830267ffffffffffffffff19169581019590955260c060020a820483169585019590955260d060020a81048216606085018190529490041660808301819052600290910154600160a060020a03811660a084015260a060020a900460ff16151560c083015290911015613a4e576139df83613c3c565b8060c0015115613a265760a0810151600160a060020a03166000908152600960205260409020805463ffffffff19811663ffffffff91821660001901909116179055613a45565b6003805463ffffffff19811663ffffffff918216600019019091161790555b600191506138ea565b600091506138ea565b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600080600080613aac613d27565b600080876080015151111515613b32576040805160e560020a62461bcd02815260206004820152602260248201527f636f64652073686f756c64206861766520736f6d652070696e6e6564206e6f6460448201527f6573000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60019450600093505b866080015151841015613c31576080870151805185908110613b5957fe5b60209081029091018101516000818152600483526040808220815160e08101835281548152600182015467ffffffffffffffff196801000000000000000082021696820187905261ffff60c060020a820481169483019490945260d060020a81048416606083015260e060020a9004909216608083015260020154600160a060020a03811660a083015260ff60a060020a90910416151560c0820152919550909350108015613c185750816060015161ffff16826080015161ffff1611155b9050848015613c245750805b9450600190930192613b3b565b509295945050505050565b600254600019018114613c8257600280546000198101908110613c5b57fe5b9060005260206000200154600282815481101515613c7557fe5b6000918252602090912001555b6002805490610b65906000198301613f8b565b828054828255906000526020600020908101928215613cd2579160200282015b82811115613cd25782518255602090920191600190910190613cb5565b50613cde929150613fab565b5090565b6040805161016081019091526000815260208101613cfe613d63565b815260200160008152602001606081526020016060815260200160608152602001606081525090565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040805160a081018252600080825260208201819052918101829052606080820192909252608081019190915290565b828054828255906000526020600020908101928215613dfb579160200282015b82811115613dfb578251825477ffffffffffffffffffffffffffffffffffffffffffffffff191668010000000000000000909104178255602090920191600190910190613db3565b50613cde929150613fc8565b82805482825590600052602060002090600f01601090048101928215613ea05791602002820160005b83821115613e7057835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302613e30565b8015613e9e5782816101000a81549061ffff0219169055600201602081600101049283019260010302613e70565b505b50613cde929150613ffd565b828054828255906000526020600020908101928215613f0e579160200282015b82811115613f0e578251825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909116178255602090920191600190910190613ecc565b50613cde92915061401c565b828054828255906000526020600020908101928215613cd25760005260206000209182015b82811115613cd2578254825591600101919060010190613f3f565b815481835581811115613f8657600402816004028360005260206000209182019101613f86919061404d565b505050565b815481835581811115613f8657600083815260209020613f869181019083015b613fc591905b80821115613cde5760008155600101613fb1565b90565b613fc591905b80821115613cde57805477ffffffffffffffffffffffffffffffffffffffffffffffff19168155600101613fce565b613fc591905b80821115613cde57805461ffff19168155600101614003565b613fc591905b80821115613cde57805473ffffffffffffffffffffffffffffffffffffffff19168155600101614022565b613fc591905b80821115613cde5760008082556001820181905560028201805474ffffffffffffffffffffffffffffffffffffffffff19169055614094600383018261409d565b50600401614053565b50805460008255906000526020600020908101906110359190613fab560077686974656c6973740000000000000000000000000000000000000000000000a165627a7a7230582037a0faa7d6632bff511c68b9837e48b3bf8a656b4db22ac453190b035e5d8fe50029";

    public static final String FUNC_CHECKROLE = "checkRole";

    public static final String FUNC_ROLE_WHITELISTED = "ROLE_WHITELISTED";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_ADDNODE = "addNode";

    public static final String FUNC_REMOVEADDRESSESFROMWHITELIST = "removeAddressesFromWhitelist";

    public static final String FUNC_REMOVEADDRESSFROMWHITELIST = "removeAddressFromWhitelist";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_ADDCODE = "addCode";

    public static final String FUNC_ADDADDRESSTOWHITELIST = "addAddressToWhitelist";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_GETCLUSTERSNODES = "getClustersNodes";

    public static final String FUNC_GETCLUSTERSINFO = "getClustersInfo";

    public static final String FUNC_WHITELIST = "whitelist";

    public static final String FUNC_GETREADYNODES = "getReadyNodes";

    public static final String FUNC_GETNODECLUSTERS = "getNodeClusters";

    public static final String FUNC_GETCLUSTER = "getCluster";

    public static final String FUNC_ADDADDRESSESTOWHITELIST = "addAddressesToWhitelist";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_GETENQUEUEDCODES = "getEnqueuedCodes";

    public static final Event CLUSTERFORMED_EVENT = new Event("ClusterFormed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
    ;

    public static final Event CODEENQUEUED_EVENT = new Event("CodeEnqueued", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event NEWNODE_EVENT = new Event("NewNode", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event ROLEADDED_EVENT = new Event("RoleAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event ROLEREMOVED_EVENT = new Event("RoleRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event OWNERSHIPRENOUNCED_EVENT = new Event("OwnershipRenounced", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public void checkRole(Address _operator, Utf8String _role) {
        throw new RuntimeException("cannot call constant function with void return type");
    }

    public RemoteCall<Utf8String> ROLE_WHITELISTED() {
        final Function function = new Function(FUNC_ROLE_WHITELISTED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> hasRole(Address _operator, Utf8String _role) {
        final Function function = new Function(FUNC_HASROLE, 
                Arrays.<Type>asList(_operator, _role), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addNode(Bytes32 nodeID, Bytes24 nodeAddress, Uint16 startPort, Uint16 endPort, Bool isPrivate) {
        final Function function = new Function(
                FUNC_ADDNODE, 
                Arrays.<Type>asList(nodeID, nodeAddress, startPort, endPort, isPrivate), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeAddressesFromWhitelist(DynamicArray<Address> _operators) {
        final Function function = new Function(
                FUNC_REMOVEADDRESSESFROMWHITELIST, 
                Arrays.<Type>asList(_operators), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeAddressFromWhitelist(Address _operator) {
        final Function function = new Function(
                FUNC_REMOVEADDRESSFROMWHITELIST, 
                Arrays.<Type>asList(_operator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addCode(Bytes32 storageHash, Bytes32 storageReceipt, Uint8 clusterSize, DynamicArray<Bytes32> pinnedNodes) {
        final Function function = new Function(
                FUNC_ADDCODE, 
                Arrays.<Type>asList(storageHash, storageReceipt, clusterSize, pinnedNodes), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addAddressToWhitelist(Address _operator) {
        final Function function = new Function(
                FUNC_ADDADDRESSTOWHITELIST, 
                Arrays.<Type>asList(_operator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>> getClustersNodes() {
        final Function function = new Function(FUNC_GETCLUSTERSNODES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>>(
                new Callable<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>>() {
                    @Override
                    public Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Bytes24>) results.get(1), 
                                (DynamicArray<Uint16>) results.get(2), 
                                (DynamicArray<Address>) results.get(3));
                    }
                });
    }

    public RemoteCall<Tuple7<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Bool>>> getClustersInfo() {
        final Function function = new Function(FUNC_GETCLUSTERSINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint8>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Bool>>() {}));
        return new RemoteCall<Tuple7<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Bool>>>(
                new Callable<Tuple7<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Bool>>>() {
                    @Override
                    public Tuple7<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Bool>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Bool>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Uint256>) results.get(1), 
                                (DynamicArray<Bytes32>) results.get(2), 
                                (DynamicArray<Bytes32>) results.get(3), 
                                (DynamicArray<Uint8>) results.get(4), 
                                (DynamicArray<Address>) results.get(5), 
                                (DynamicArray<Bool>) results.get(6));
                    }
                });
    }

    public RemoteCall<Bool> whitelist(Address _operator) {
        final Function function = new Function(FUNC_WHITELIST, 
                Arrays.<Type>asList(_operator), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple7<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>, DynamicArray<Bool>>> getReadyNodes() {
        final Function function = new Function(FUNC_GETREADYNODES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Bool>>() {}));
        return new RemoteCall<Tuple7<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>, DynamicArray<Bool>>>(
                new Callable<Tuple7<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>, DynamicArray<Bool>>>() {
                    @Override
                    public Tuple7<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>, DynamicArray<Bool>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>, DynamicArray<Bool>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Bytes24>) results.get(1), 
                                (DynamicArray<Uint16>) results.get(2), 
                                (DynamicArray<Uint16>) results.get(3), 
                                (DynamicArray<Uint16>) results.get(4), 
                                (DynamicArray<Address>) results.get(5), 
                                (DynamicArray<Bool>) results.get(6));
                    }
                });
    }

    public RemoteCall<DynamicArray<Bytes32>> getNodeClusters(Bytes32 nodeID) {
        final Function function = new Function(FUNC_GETNODECLUSTERS, 
                Arrays.<Type>asList(nodeID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple8<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>, Bool>> getCluster(Bytes32 clusterID) {
        final Function function = new Function(FUNC_GETCLUSTER, 
                Arrays.<Type>asList(clusterID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple8<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>, Bool>>(
                new Callable<Tuple8<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>, Bool>>() {
                    @Override
                    public Tuple8<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>, Bool> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>, Bool>(
                                (Bytes32) results.get(0), 
                                (Bytes32) results.get(1), 
                                (Uint256) results.get(2), 
                                (DynamicArray<Bytes32>) results.get(3), 
                                (DynamicArray<Bytes24>) results.get(4), 
                                (DynamicArray<Uint16>) results.get(5), 
                                (DynamicArray<Address>) results.get(6), 
                                (Bool) results.get(7));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addAddressesToWhitelist(DynamicArray<Address> _operators) {
        final Function function = new Function(
                FUNC_ADDADDRESSESTOWHITELIST, 
                Arrays.<Type>asList(_operators), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(Address _newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(_newOwner), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Bool>, DynamicArray<Bytes32>>> getEnqueuedCodes() {
        final Function function = new Function(FUNC_GETENQUEUEDCODES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint8>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Bool>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Bool>, DynamicArray<Bytes32>>>(
                new Callable<Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Bool>, DynamicArray<Bytes32>>>() {
                    @Override
                    public Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Bool>, DynamicArray<Bytes32>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Bool>, DynamicArray<Bytes32>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Bytes32>) results.get(1), 
                                (DynamicArray<Uint8>) results.get(2), 
                                (DynamicArray<Address>) results.get(3), 
                                (DynamicArray<Bool>) results.get(4), 
                                (DynamicArray<Bytes32>) results.get(5));
                    }
                });
    }

    public List<ClusterFormedEventResponse> getClusterFormedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CLUSTERFORMED_EVENT, transactionReceipt);
        ArrayList<ClusterFormedEventResponse> responses = new ArrayList<ClusterFormedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ClusterFormedEventResponse typedResponse = new ClusterFormedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.clusterID = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(2);
            typedResponse.solverIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(3);
            typedResponse.solverAddrs = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(4);
            typedResponse.solverPorts = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(5);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ClusterFormedEventResponse> clusterFormedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ClusterFormedEventResponse>() {
            @Override
            public ClusterFormedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CLUSTERFORMED_EVENT, log);
                ClusterFormedEventResponse typedResponse = new ClusterFormedEventResponse();
                typedResponse.log = log;
                typedResponse.clusterID = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(2);
                typedResponse.solverIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(3);
                typedResponse.solverAddrs = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(4);
                typedResponse.solverPorts = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(5);
                return typedResponse;
            }
        });
    }

    public Flowable<ClusterFormedEventResponse> clusterFormedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CLUSTERFORMED_EVENT));
        return clusterFormedEventFlowable(filter);
    }

    public List<CodeEnqueuedEventResponse> getCodeEnqueuedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CODEENQUEUED_EVENT, transactionReceipt);
        ArrayList<CodeEnqueuedEventResponse> responses = new ArrayList<CodeEnqueuedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CodeEnqueuedEventResponse typedResponse = new CodeEnqueuedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CodeEnqueuedEventResponse> codeEnqueuedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CodeEnqueuedEventResponse>() {
            @Override
            public CodeEnqueuedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CODEENQUEUED_EVENT, log);
                CodeEnqueuedEventResponse typedResponse = new CodeEnqueuedEventResponse();
                typedResponse.log = log;
                typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<CodeEnqueuedEventResponse> codeEnqueuedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CODEENQUEUED_EVENT));
        return codeEnqueuedEventFlowable(filter);
    }

    public List<NewNodeEventResponse> getNewNodeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWNODE_EVENT, transactionReceipt);
        ArrayList<NewNodeEventResponse> responses = new ArrayList<NewNodeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewNodeEventResponse typedResponse = new NewNodeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewNodeEventResponse>() {
            @Override
            public NewNodeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWNODE_EVENT, log);
                NewNodeEventResponse typedResponse = new NewNodeEventResponse();
                typedResponse.log = log;
                typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWNODE_EVENT));
        return newNodeEventFlowable(filter);
    }

    public List<RoleAddedEventResponse> getRoleAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEADDED_EVENT, transactionReceipt);
        ArrayList<RoleAddedEventResponse> responses = new ArrayList<RoleAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAddedEventResponse typedResponse = new RoleAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.role = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleAddedEventResponse> roleAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RoleAddedEventResponse>() {
            @Override
            public RoleAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEADDED_EVENT, log);
                RoleAddedEventResponse typedResponse = new RoleAddedEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.role = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<RoleAddedEventResponse> roleAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADDED_EVENT));
        return roleAddedEventFlowable(filter);
    }

    public List<RoleRemovedEventResponse> getRoleRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEREMOVED_EVENT, transactionReceipt);
        ArrayList<RoleRemovedEventResponse> responses = new ArrayList<RoleRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRemovedEventResponse typedResponse = new RoleRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.role = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleRemovedEventResponse> roleRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RoleRemovedEventResponse>() {
            @Override
            public RoleRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEREMOVED_EVENT, log);
                RoleRemovedEventResponse typedResponse = new RoleRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.role = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<RoleRemovedEventResponse> roleRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREMOVED_EVENT));
        return roleRemovedEventFlowable(filter);
    }

    public List<OwnershipRenouncedEventResponse> getOwnershipRenouncedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, transactionReceipt);
        ArrayList<OwnershipRenouncedEventResponse> responses = new ArrayList<OwnershipRenouncedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipRenouncedEventResponse> ownershipRenouncedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipRenouncedEventResponse>() {
            @Override
            public OwnershipRenouncedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, log);
                OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipRenouncedEventResponse> ownershipRenouncedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPRENOUNCED_EVENT));
        return ownershipRenouncedEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ClusterFormedEventResponse {
        public Log log;

        public Bytes32 clusterID;

        public Bytes32 storageHash;

        public Uint256 genesisTime;

        public DynamicArray<Bytes32> solverIDs;

        public DynamicArray<Bytes24> solverAddrs;

        public DynamicArray<Uint16> solverPorts;
    }

    public static class CodeEnqueuedEventResponse {
        public Log log;

        public Bytes32 storageHash;
    }

    public static class NewNodeEventResponse {
        public Log log;

        public Bytes32 id;
    }

    public static class RoleAddedEventResponse {
        public Log log;

        public Address operator;

        public Utf8String role;
    }

    public static class RoleRemovedEventResponse {
        public Log log;

        public Address operator;

        public Utf8String role;
    }

    public static class OwnershipRenouncedEventResponse {
        public Log log;

        public Address previousOwner;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public Address previousOwner;

        public Address newOwner;
    }
}
