package fluence.ethclient;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes24;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class Network extends Contract {
    private static final String BINARY = "60806040526001600555600160075534801561001a57600080fd5b506133ed8061002a6000396000f3006080604052600436106100c45763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631cd1d5c781146100c9578063243dcbf2146100e6578063299cf8cd1461011e5780633b5aa5421461014d578063499db7b3146101b257806350c946fe146101c7578063880680bc1461027a578063a5d432281461043c578063acb952c214610466578063ae6229e71461047e578063c7c02e4414610496578063e2683e92146104ae578063e9a40412146105c7575b600080fd5b3480156100d557600080fd5b506100e4600435602435610678565b005b3480156100f257600080fd5b506100e460043567ffffffffffffffff196024351661ffff604435811690606435166084351515610ca2565b34801561012a57600080fd5b506100e46004803590602480359160ff604435169160643590810191013561119d565b34801561015957600080fd5b50610162611867565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561019e578181015183820152602001610186565b505050509050019250505060405180910390f35b3480156101be57600080fd5b506101626118c1565b3480156101d357600080fd5b506101df600435611918565b6040805167ffffffffffffffff198816815261ffff80881660208084019190915290871692820192909252600160a060020a0385166060820152831515608082015260c060a0820181815284519183019190915283519192909160e0840191858101910280838360005b83811015610261578181015183820152602001610249565b5050505090500197505050505050505060405180910390f35b34801561028657600080fd5b5061028f611a37565b6040518080602001806020018060200180602001806020018060200187810387528d818151815260200191508051906020019060200280838360005b838110156102e35781810151838201526020016102cb565b5050505090500187810386528c818151815260200191508051906020019060200280838360005b8381101561032257818101518382015260200161030a565b5050505090500187810385528b818151815260200191508051906020019060200280838360005b83811015610361578181015183820152602001610349565b5050505090500187810384528a818151815260200191508051906020019060200280838360005b838110156103a0578181015183820152602001610388565b50505050905001878103835289818151815260200191508051906020019060200280838360005b838110156103df5781810151838201526020016103c7565b50505050905001878103825288818151815260200191508051906020019060200280838360005b8381101561041e578181015183820152602001610406565b505050509050019c5050505050505050505050505060405180910390f35b34801561044857600080fd5b50610454600435611d9c565b60408051918252519081900360200190f35b34801561047257600080fd5b50610454600435611dbb565b34801561048a57600080fd5b50610454600435611dc9565b3480156104a257600080fd5b50610162600435611dd7565b3480156104ba57600080fd5b506104c6600435611e3d565b604080518a815260208082018b905260ff8a1692820192909252600160a060020a038816606082015260a0810186905260c081018590526101206080820181815288519183019190915287519192909160e08401916101008501916101408601918b8101910280838360005b8381101561054a578181015183820152602001610532565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015610589578181015183820152602001610571565b50505050905001848103825285818151815260200191508051906020019060200280838360008381101561041e578181015183820152602001610406565b3480156105d357600080fd5b506105df6004356120c6565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561062357818101518382015260200161060b565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561066257818101518382015260200161064a565b5050505090500194505050505060405180910390f35b6106806130b8565b600061068a6130ef565b600084151561089d57600092505b60065460ff84161015610780576006805460ff85169081106106b657fe5b60009182526020918290206040805160c081018252600590930290910180548352600181015483850152600281015483830152600381015460ff81166060850152600160a060020a036101009091041660808401526004810180548351818702810187019094528084529394919360a08601939283018282801561075a57602002820191906000526020600020905b81548152600190910190602001808311610745575b50505091909252505081519195505086141561077557610780565b600190920191610698565b60065460ff841610610802576040805160e560020a62461bcd02815260206004820152602160248201527f6572726f722064656c6574696e67206170703a20617070206e6f7420666f756e60448201527f6400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6080840151600160a060020a0316331461088c576040805160e560020a62461bcd02815260206004820152603160248201527f6572726f722064656c6574696e67206170703a20796f75206d757374206f776e60448201527f2061707020746f2064656c657465206974000000000000000000000000000000606482015290519081900360840190fd5b6108988360ff166123aa565b610c5f565b600085815260036020818152604092839020835160a0808201865282548252855160c08101875260018401805482526002850154828701529584015481880152600484015460ff811660608301526101009004600160a060020a0316608082015260058401805488518188028101880190995280895293979496888701969295909493860193909283018282801561095557602002820191906000526020600020905b81548152600190910190602001808311610940575b505050505081525050815260200160068201548152602001600782018054806020026020016040519081016040528092919081815260200182805480156109bc57602002820191906000526020600020905b815481526001909101906020018083116109a7575b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015610a3c57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411610a035790505b5050509190925250508151919350501515610ac7576040805160e560020a62461bcd02815260206004820152602560248201527f6572726f722064656c6574696e67206170703a20636c7573746572206e6f742060448201527f666f756e64000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6020820151518614610b49576040805160e560020a62461bcd02815260206004820152602d60248201527f6572726f722064656c6574696e67206170703a20636c757374657220686f737460448201527f7320616e6f746865722061707000000000000000000000000000000000000000606482015290519081900360840190fd5b602082015160800151600160a060020a03163314610bd7576040805160e560020a62461bcd02815260206004820152603160248201527f6572726f722064656c6574696e67206170703a20796f75206d757374206f776e60448201527f2061707020746f2064656c657465206974000000000000000000000000000000606482015290519081900360840190fd5b610be0856124ec565b9050801515610c5f576040805160e560020a62461bcd02815260206004820152603960248201527f6572726f722064656c6574696e67206170703a20636c7573746572206e6f742060448201527f666f756e6420696e20636c757374657249647320617272617900000000000000606482015290519081900360840190fd5b604080518781526020810187905281517f6682c99a294f920f5c1a42bc58e106c1b1a1099d33024e1778dc14e9d23e17f7929181900390910190a1505050505050565b610caa613126565b6000610cb46130b8565b60008881526001602052604090205415610d18576040805160e560020a62461bcd02815260206004820152601f60248201527f54686973206e6f646520697320616c7265616479207265676973746572656400604482015290519081900360640190fd5b61ffff8086169087161115610d77576040805160e560020a62461bcd02815260206004820181905260248201527f506f72742072616e676520697320656d707479206f7220696e636f7272656374604482015290519081900360640190fd5b6040805160e08101825289815267ffffffffffffffff19891660208083019190915261ffff808a16838501528816606083015233608083015286151560a083015282516000808252918101909352909160c08301915090526000898152600160208181526040928390208451815584820151928101805494860151606087015177ffffffffffffffffffffffffffffffffffffffffffffffff19909616680100000000000000009095049490941779ffff000000000000000000000000000000000000000000000000191660c060020a61ffff95861602177fffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffff1660d060020a949095169390930293909317909155608083015160028301805460a086015173ffffffffffffffffffffffffffffffffffffffff19909116600160a060020a039093169290921774ff0000000000000000000000000000000000000000191660a060020a9215159290920291909117905560c083015180519396508693610f039260038501920190613164565b5050600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0189905550831515610f7557600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563018890555b6040805189815290517fb0cd47a7093fb93a9ce97304d3afb8df43e02e48502e47fd5fbb6c4020d935b59181900360200190a1600091505b600654821015611193576006805483908110610fc557fe5b60009182526020918290206040805160c081018252600590930290910180548352600181015483850152600281015483830152600381015460ff81166060850152600160a060020a036101009091041660808401526004810180548351818702810187019094528084529394919360a08601939283018282801561106957602002820191906000526020600020905b81548152600190910190602001808311611054575b505050505081525050905061107d81612651565b156111875761108b826123aa565b600088815260016020818152604092839020835160e081018552815481529281015467ffffffffffffffff19680100000000000000008202168484015261ffff60c060020a820481168587015260d060020a9091041660608401526002810154600160a060020a038116608085015260ff60a060020a90910416151560a08401526003810180548551818502810185019096528086529394919360c086019383018282801561115a57602002820191906000526020600020905b81548152600190910190602001808311611145575b5050505050815250509250826060015161ffff16836040015161ffff16111561118257611193565b61118e565b6001909101905b610fad565b5050505050505050565b6000806111a8613126565b60006111b26130b8565b600060ff891611611233576040805160e560020a62461bcd02815260206004820152602660248201527f436c75737465722073697a65206d757374206265206120706f7369746976652060448201527f6e756d6265720000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60ff88168611156112da576040805160e560020a62461bcd02815260206004820152604860248201527f6e756d626572206f662070696e546f206e6f6465732073686f756c642062652060448201527f6c657373206f7220657175616c20746f20746865206465736972656420636c7560648201527f7374657253697a65000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600094505b60ff85168611156115c157868660ff87168181106112f957fe5b6020908102929092013560008181526001808552604091829020825160e081018452815481529181015467ffffffffffffffff19680100000000000000008202168388015261ffff60c060020a820481168486015260d060020a9091041660608301526002810154600160a060020a038116608084015260ff60a060020a90910416151560a0830152600381018054845181890281018901909552808552949a50919590945060c0860193908301828280156113d557602002820191906000526020600020905b815481526001909101906020018083116113c0575b505050919092525050506080810151909350600160a060020a03161515611446576040805160e560020a62461bcd02815260206004820181905260248201527f43616e2070696e206f6e6c7920746f2072656769737465726564206e6f646573604482015290519081900360640190fd5b6080830151600160a060020a031633146114aa576040805160e560020a62461bcd02815260206004820152601d60248201527f43616e2070696e206f6e6c7920746f206e6f64657320796f75206f776e000000604482015290519081900360640190fd5b600091505b60ff808616908316116115b65760ff858116908316146115ab57868660ff84168181106114d857fe5b602002919091013585141590506115ab576040805160e560020a62461bcd02815260206004820152606860248201527f4e6f64652069647320746f2070696e20746f206d75737420626520756e69717560448201527f652c206f746865727769736520746865206465706c6f796d656e74207265737560648201527f6c7420636f756c6420626520756e7072656469637461626c6520616e6420756e60848201527f657870656374656400000000000000000000000000000000000000000000000060a482015290519081900360c40190fd5b6001909101906114af565b6001909401936112df565b6040805160c0810182526007805460018101909155815260208082018d90528183018c905260ff8b16606083015233608083015282518982028181018301909452898152919260a0840192918b918b91829190850190849080828437820191505050505050815250905061163481612651565b151561185b576006805460018101808355600092909252825160059091027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f81019182556020808501517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4083015560408501517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4183015560608501517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d42830180546080880151600160a060020a03166101000274ffffffffffffffffffffffffffffffffffffffff001960ff90941660ff19909216919091179290921691909117905560a08501518051869493611771937ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d43909101920190613164565b505050507fd06cd11078f142450ff9608ee48936c79f15b10735ba71247d9a9e06ce829fa2816000015182602001518360400151846060015185608001518660a00151604051808760001916600019168152602001866000191660001916815260200185600019166000191681526020018460ff1660ff16815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b8381101561184257818101518382015260200161182a565b5050505090500197505050505050505060405180910390a15b50505050505050505050565b606060028054806020026020016040519081016040528092919081815260200182805480156118b657602002820191906000526020600020905b815481526001909101906020018083116118a1575b505050505090505b90565b606060048054806020026020016040519081016040528092919081815260200182805480156118b65760200282019190600052602060002090815481526001909101906020018083116118a1575050505050905090565b6000806000806000606061192a613126565b600088815260016020818152604092839020835160e081018552815481529281015467ffffffffffffffff19680100000000000000008202168484015261ffff60c060020a820481168587015260d060020a9091041660608401526002810154600160a060020a038116608085015260ff60a060020a90910416151560a08401526003810180548551818502810185019096528086529394919360c08601938301828280156119f957602002820191906000526020600020905b815481526001909101906020018083116119e4575b50505091909252505050602081015160408201516060830151608084015160a085015160c090950151939d929c50909a509850919650945092505050565b60608060608060608060608060608060606000806060611a556130b8565b6006546040805182815260208084028201019091526000918015611a83578160200160208202803883390190505b50600654604080518281526020808402820101909152919b508015611ab2578160200160208202803883390190505b50600654604080518281526020808402820101909152919a508015611ae1578160200160208202803883390190505b506006546040805182815260208084028201019091529199508015611b10578160200160208202803883390190505b506006546040805182815260208084028201019091529198508015611b3f578160200160208202803883390190505b50955060009450600093505b600654841015611b87576006805485908110611b6357fe5b60009182526020909120600460059092020101549490940193600190930192611b4b565b84604051908082528060200260200182016040528015611bb1578160200160208202803883390190505b50925060009450600093505b600654841015611d82576006805485908110611bd557fe5b60009182526020918290206040805160c081018252600590930290910180548352600181015483850152600281015483830152600381015460ff81166060850152600160a060020a036101009091041660808401526004810180548351818702810187019094528084529394919360a086019392830182828015611c7957602002820191906000526020600020905b81548152600190910190602001808311611c64575b505050505081525050915081602001518a85815181101515611c9757fe5b60209081029091010152815189518a9086908110611cb157fe5b6020908102909101015260608201518851899086908110611cce57fe5b60ff90921660209283029091019091015260808201518751889086908110611cf257fe5b600160a060020a0390921660209283029091019091015260a0820151518651879086908110611d1d57fe5b602090810290910101525060005b8160a0015151811015611d775760a0820151805182908110611d4957fe5b906020019060200201518386815181101515611d6157fe5b6020908102909101015260019485019401611d2b565b600190930192611bbd565b50979e969d50949b50929950909750919550919350505050565b6004805482908110611daa57fe5b600091825260209091200154905081565b6002805482908110611daa57fe5b6000805482908110611daa57fe5b600081815260016020908152604091829020600301805483518184028101840190945280845260609392830182828015611e3157602002820191906000526020600020905b81548152600190910190602001808311611e1c575b50505050509050919050565b6000806000806060600080606080611e536130ef565b60008b815260036020818152604092839020835160a0808201865282548252855160c08101875260018401805482526002850154828701529584015481880152600484015460ff811660608301526101009004600160a060020a03166080820152600584018054885181880281018801909952808952939794968887019692959094938601939092830182828015611f0b57602002820191906000526020600020905b81548152600190910190602001808311611ef6575b50505050508152505081526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020018280548015611f7257602002820191906000526020600020905b81548152600190910190602001808311611f5d575b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015611ff257602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611fb95790505b505050919092525050815191925050600010612058576040805160e560020a62461bcd02815260206004820152601860248201527f7468657265206973206e6f207375636820636c75737465720000000000000000604482015290519081900360640190fd5b806020015160200151816020015160400151826020015160600151836020015160800151846020015160a00151856020015160000151866040015187606001518860800151849450819150809050995099509950995099509950995099509950509193959799909294969850565b6060806120d16130ef565b6000848152600360208181526040808420815160a0808201845282548252835160c08101855260018401805482526002850154828801529684015481860152600484015460ff8116606080840191909152610100909104600160a060020a031660808301526005850180548751818a0281018a01909852808852919998949795968887019693959486019390929083018282801561218f57602002820191906000526020600020905b8154815260019091019060200180831161217a575b505050505081525050815260200160068201548152602001600782018054806020026020016040519081016040528092919081815260200182805480156121f657602002820191906000526020600020905b815481526001909101906020018083116121e1575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561227657602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161223d5790505b5050509190925250508151919450506000106122dc576040805160e560020a62461bcd02815260206004820152601860248201527f7468657265206973206e6f207375636820636c75737465720000000000000000604482015290519081900360640190fd5b82606001515160405190808252806020026020018201604052801561230b578160200160208202803883390190505b509150600090505b8260600151518160ff161015612399576001600084606001518360ff1681518110151561233c57fe5b602090810290910181015182528101919091526040016000206001015482516801000000000000000090910290839060ff841690811061237857fe5b67ffffffffffffffff19909216602092830290910190910152600101612313565b506080909101519094909350915050565b600654600019018114612473576006805460001981019081106123c957fe5b90600052602060002090600502016006828154811015156123e657fe5b600091825260209091208254600590920201908155600180830154908201556002808301549082015560038083018054918301805460ff191660ff909316929092178083559054600160a060020a0361010091829004160274ffffffffffffffffffffffffffffffffffffffff00199091161790556004808301805461246f92840191906131b1565b5050505b60068054600019810190811061248557fe5b600091825260208220600590910201818155600181018290556002810182905560038101805474ffffffffffffffffffffffffffffffffffffffffff19169055906124d360048301826131f1565b505060068054906124e8906000198301613212565b5050565b60045460009081905b808260ff161015612536576004805485919060ff851690811061251457fe5b600091825260209091200154141561252b57612536565b6001909101906124f5565b60ff82168111612549576000925061264a565b60ff82166000198201146125935760048054600019830190811061256957fe5b906000526020600020015460048360ff1681548110151561258657fe5b6000918252602090912001555b6004805460001983019081106125a557fe5b600091825260208220015560048054906125c3906000198301613243565b5060008481526003602081905260408220828155600181018381556002820184905591810183905560048101805474ffffffffffffffffffffffffffffffffffffffffff1916905591908161261b60058501826131f1565b5050600682016000905560078201600061263591906131f1565b612643600883016000613267565b5050600192505b5050919050565b60008060606000612660613126565b60008060009550876060015160ff166040519080825280602002602001820160405280156126a857816020015b612695613126565b81526020019060019003908161268d5790505b5060a08901515160608a015160005492975060ff1603116129d157600093505b8760a00151518460ff16101561282657600160008960a001518660ff168151811015156126f157fe5b60209081029091018101518252818101929092526040908101600020815160e08101835281548152600182015467ffffffffffffffff19680100000000000000008202168286015261ffff60c060020a820481168386015260d060020a9091041660608201526002820154600160a060020a038116608083015260ff60a060020a90910416151560a08201526003820180548451818702810187019095528085529194929360c08601939092908301828280156127ce57602002820191906000526020600020905b815481526001909101906020018083116127b9575b5050505050815250509250826060015161ffff16836040015161ffff1611156127fa57600096506129fb565b82858760ff1681518110151561280c57fe5b6020908102909101015260019586019593909301926126c8565b600091505b600054821080156128455750876060015160ff168660ff16105b156129d15760016000808481548110151561285c57fe5b600091825260208083209091015483528281019390935260409182019020815160e08101835281548152600182015467ffffffffffffffff19680100000000000000008202168286015261ffff60c060020a820481168386015260d060020a9091041660608201526002820154600160a060020a038116608083015260ff60a060020a90910416151560a08201526003820180548451818702810187019095528085529194929360c086019390929083018282801561293b57602002820191906000526020600020905b81548152600190910190602001808311612926575b505050505081525050925060009050600093505b84518460ff16108015612960575080155b156129985782518551869060ff871690811061297857fe5b6020908102909101015151141561298d575060015b60019093019261294f565b80156129a3576129c6565b82858760ff168151811015156129b557fe5b602090810290910101526001909501945b60019091019061282b565b876060015160ff168660ff1614156129f6576129ed8886612a06565b600196506129fb565b600096505b505050505050919050565b600060608060606000612a17613126565b60008751896060015160ff16141515612aa0576040805160e560020a62461bcd02815260206004820152602e60248201527f54686572652073686f756c6420626520656e6f756768206e6f64657320746f2060448201527f666f726d206120636c7573746572000000000000000000000000000000000000606482015290519081900360840190fd5b600580546001810190915560608a01516040805160ff9092168083526020808202840101909152919850908015612ae1578160200160208202803883390190505b509550886060015160ff16604051908082528060200260200182016040528015612b15578160200160208202803883390190505b509450886060015160ff16604051908082528060200260200182016040528015612b49578160200160208202803883390190505b509350600092505b886060015160ff168360ff161015612c3657878360ff16815181101515612b7457fe5b9060200190602002015191508160000151868460ff16815181101515612b9657fe5b60209081029091018101919091528201518551869060ff8616908110612bb857fe5b67ffffffffffffffff1990921660209283029091019091015260408201518451859060ff8616908110612be757fe5b61ffff9092166020928302909101909101528151612c0490612ebb565b508151600090815260016020818152604083206003018054808401825590845292209091018890559290920191612b51565b506040805160a0818101835288825260208083018c81524284860181905260608086018c905260808087018b905260008e815260038087529089902088518155945180516001870190815581880151600288015599810151918601919091559182015160048501805492840151600160a060020a03166101000274ffffffffffffffffffffffffffffffffffffffff001960ff90931660ff1990941693909317919091169190911790559384015180519196929493612cfd92600587019290910190613164565b5050506040820151600682015560608201518051612d25916007840191602090910190613164565b5060808201518051612d4191600884019160209091019061328c565b50506004805460018101825560009182527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018990558a5160208c810151604080518d81528084018590529081018290526060810187905260e0608082018181528d51918301919091528c517f41274d102f128e98f572a161a708c7afbb805a7e29f10f6ff747bc22dc31cb2c97508e96939489948f948f948f949193909260a085019260c08601926101008701928a820192909102908190849084905b83811015612e17578181015183820152602001612dff565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015612e56578181015183820152602001612e3e565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015612e95578181015183820152602001612e7d565b505050509050019a505050505050505050505060405180910390a1505050505050505050565b6000612ec5613126565b6000838152600160208181526040808420808401805479ffff00000000000000000000000000000000000000000000000019811660c060020a9182900461ffff908116909701871682021791829055835160e0810185528354815268010000000000000000830267ffffffffffffffff19168187015290820486168185015260d060020a90910490941660608501526002810154600160a060020a038116608086015260a060020a900460ff16151560a0850152600381018054835181860281018601909452808452919360c08601939290830182828015612fc757602002820191906000526020600020905b81548152600190910190602001808311612fb2575b5050505050815250509150816060015161ffff16826040015161ffff161115613039575060005b600054811015613030578151600080548390811061300857fe5b60009182526020909120015414156130285761302381613042565b613030565b600101612fee565b6001925061264a565b6000925061264a565b6000546000190181146130885760008054600019810190811061306157fe5b906000526020600020015460008281548110151561307b57fe5b6000918252602090912001555b60008054600019810190811061309a57fe5b600091825260208220018190558054906124e8906000198301613243565b6040805160c0810182526000808252602082018190529181018290526060808201839052608082019290925260a081019190915290565b604080516101408101909152600081526020810161310b6130b8565b81526020016000815260200160608152602001606081525090565b6040805160e08101825260008082526020820181905291810182905260608082018390526080820183905260a082019290925260c081019190915290565b8280548282559060005260206000209081019282156131a1579160200282015b828111156131a15782518255602090920191600190910190613184565b506131ad929150613331565b5090565b8280548282559060005260206000209081019282156131a15760005260206000209182015b828111156131a15782548255916001019190600101906131d6565b508054600082559060005260206000209081019061320f9190613331565b50565b81548183558181111561323e5760050281600502836000526020600020918201910161323e919061334b565b505050565b81548183558181111561323e5760008381526020902061323e918101908301613331565b50805460008255600f01601090049060005260206000209081019061320f9190613331565b82805482825590600052602060002090600f016010900481019282156133255791602002820160005b838211156132f557835183826101000a81548161ffff021916908361ffff16021790555092602001926002016020816001010492830192600103026132b5565b80156133235782816101000a81549061ffff02191690556002016020816001010492830192600103026132f5565b505b506131ad9291506133a2565b6118be91905b808211156131ad5760008155600101613337565b6118be91905b808211156131ad576000808255600182018190556002820181905560038201805474ffffffffffffffffffffffffffffffffffffffffff1916905561339960048301826131f1565b50600501613351565b6118be91905b808211156131ad57805461ffff191681556001016133a85600a165627a7a72305820e37bbeb25870b46222c3cc0a2bcb36da352cd9015517a619f3fa4f4f72689ccb0029";

    public static final String FUNC_DELETEAPP = "deleteApp";

    public static final String FUNC_ADDNODE = "addNode";

    public static final String FUNC_ADDAPP = "addApp";

    public static final String FUNC_GETNODESIDS = "getNodesIds";

    public static final String FUNC_GETCLUSTERSIDS = "getClustersIds";

    public static final String FUNC_GETNODE = "getNode";

    public static final String FUNC_GETENQUEUEDAPPS = "getEnqueuedApps";

    public static final String FUNC_CLUSTERSIDS = "clustersIds";

    public static final String FUNC_NODESIDS = "nodesIds";

    public static final String FUNC_READYNODES = "readyNodes";

    public static final String FUNC_GETNODECLUSTERS = "getNodeClusters";

    public static final String FUNC_GETCLUSTER = "getCluster";

    public static final String FUNC_GETCLUSTERWORKERS = "getClusterWorkers";

    public static final Event CLUSTERFORMED_EVENT = new Event("ClusterFormed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
    ;

    public static final Event APPENQUEUED_EVENT = new Event("AppEnqueued", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
    ;

    public static final Event NEWNODE_EVENT = new Event("NewNode", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event APPDELETED_EVENT = new Event("AppDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
    ;

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> deleteApp(Bytes32 appID, Bytes32 clusterID) {
        final Function function = new Function(
                FUNC_DELETEAPP, 
                Arrays.<Type>asList(appID, clusterID), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addNode(Bytes32 nodeID, Bytes24 nodeAddress, Uint16 startPort, Uint16 endPort, Bool isPrivate) {
        final Function function = new Function(
                FUNC_ADDNODE, 
                Arrays.<Type>asList(nodeID, nodeAddress, startPort, endPort, isPrivate), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addApp(Bytes32 storageHash, Bytes32 storageReceipt, Uint8 clusterSize, DynamicArray<Bytes32> pinToNodes) {
        final Function function = new Function(
                FUNC_ADDAPP, 
                Arrays.<Type>asList(storageHash, storageReceipt, clusterSize, pinToNodes), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<DynamicArray<Bytes32>> getNodesIds() {
        final Function function = new Function(FUNC_GETNODESIDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Bytes32>> getClustersIds() {
        final Function function = new Function(FUNC_GETCLUSTERSIDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>>> getNode(Bytes32 nodeID) {
        final Function function = new Function(FUNC_GETNODE, 
                Arrays.<Type>asList(nodeID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes24>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint16>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>>>(
                new Callable<Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>>>() {
                    @Override
                    public Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Bytes32>>(
                                (Bytes24) results.get(0), 
                                (Uint16) results.get(1), 
                                (Uint16) results.get(2), 
                                (Address) results.get(3), 
                                (Bool) results.get(4), 
                                (DynamicArray<Bytes32>) results.get(5));
                    }
                });
    }

    public RemoteCall<Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Uint256>, DynamicArray<Bytes32>>> getEnqueuedApps() {
        final Function function = new Function(FUNC_GETENQUEUEDAPPS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint8>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Uint256>, DynamicArray<Bytes32>>>(
                new Callable<Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Uint256>, DynamicArray<Bytes32>>>() {
                    @Override
                    public Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Uint256>, DynamicArray<Bytes32>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>, DynamicArray<Uint256>, DynamicArray<Bytes32>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Bytes32>) results.get(1), 
                                (DynamicArray<Uint8>) results.get(2), 
                                (DynamicArray<Address>) results.get(3), 
                                (DynamicArray<Uint256>) results.get(4), 
                                (DynamicArray<Bytes32>) results.get(5));
                    }
                });
    }

    public RemoteCall<Bytes32> clustersIds(Uint256 param0) {
        final Function function = new Function(FUNC_CLUSTERSIDS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> nodesIds(Uint256 param0) {
        final Function function = new Function(FUNC_NODESIDS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> readyNodes(Uint256 param0) {
        final Function function = new Function(FUNC_READYNODES, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Bytes32>> getNodeClusters(Bytes32 nodeID) {
        final Function function = new Function(FUNC_GETNODECLUSTERS, 
                Arrays.<Type>asList(nodeID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple9<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>>> getCluster(Bytes32 clusterID) {
        final Function function = new Function(FUNC_GETCLUSTER, 
                Arrays.<Type>asList(clusterID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
        return new RemoteCall<Tuple9<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>>>(
                new Callable<Tuple9<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>>>() {
                    @Override
                    public Tuple9<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>>(
                                (Bytes32) results.get(0), 
                                (Bytes32) results.get(1), 
                                (Uint8) results.get(2), 
                                (Address) results.get(3), 
                                (DynamicArray<Bytes32>) results.get(4), 
                                (Bytes32) results.get(5), 
                                (Uint256) results.get(6), 
                                (DynamicArray<Bytes32>) results.get(7), 
                                (DynamicArray<Uint16>) results.get(8));
                    }
                });
    }

    public RemoteCall<Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>> getClusterWorkers(Bytes32 clusterID) {
        final Function function = new Function(FUNC_GETCLUSTERWORKERS, 
                Arrays.<Type>asList(clusterID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
        return new RemoteCall<Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>>(
                new Callable<Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>>() {
                    @Override
                    public Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>(
                                (DynamicArray<Bytes24>) results.get(0), 
                                (DynamicArray<Uint16>) results.get(1));
                    }
                });
    }

    public List<ClusterFormedEventResponse> getClusterFormedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CLUSTERFORMED_EVENT, transactionReceipt);
        ArrayList<ClusterFormedEventResponse> responses = new ArrayList<ClusterFormedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ClusterFormedEventResponse typedResponse = new ClusterFormedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.clusterID = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(2);
            typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(3);
            typedResponse.nodeIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(4);
            typedResponse.nodeAddresses = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(5);
            typedResponse.ports = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(6);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ClusterFormedEventResponse> clusterFormedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ClusterFormedEventResponse>() {
            @Override
            public ClusterFormedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CLUSTERFORMED_EVENT, log);
                ClusterFormedEventResponse typedResponse = new ClusterFormedEventResponse();
                typedResponse.log = log;
                typedResponse.clusterID = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(2);
                typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(3);
                typedResponse.nodeIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(4);
                typedResponse.nodeAddresses = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(5);
                typedResponse.ports = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(6);
                return typedResponse;
            }
        });
    }

    public Flowable<ClusterFormedEventResponse> clusterFormedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CLUSTERFORMED_EVENT));
        return clusterFormedEventFlowable(filter);
    }

    public List<AppEnqueuedEventResponse> getAppEnqueuedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPENQUEUED_EVENT, transactionReceipt);
        ArrayList<AppEnqueuedEventResponse> responses = new ArrayList<AppEnqueuedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppEnqueuedEventResponse typedResponse = new AppEnqueuedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.storageReceipt = (Bytes32) eventValues.getNonIndexedValues().get(2);
            typedResponse.clusterSize = (Uint8) eventValues.getNonIndexedValues().get(3);
            typedResponse.owner = (Address) eventValues.getNonIndexedValues().get(4);
            typedResponse.pinToNodes = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(5);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppEnqueuedEventResponse> appEnqueuedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AppEnqueuedEventResponse>() {
            @Override
            public AppEnqueuedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPENQUEUED_EVENT, log);
                AppEnqueuedEventResponse typedResponse = new AppEnqueuedEventResponse();
                typedResponse.log = log;
                typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.storageReceipt = (Bytes32) eventValues.getNonIndexedValues().get(2);
                typedResponse.clusterSize = (Uint8) eventValues.getNonIndexedValues().get(3);
                typedResponse.owner = (Address) eventValues.getNonIndexedValues().get(4);
                typedResponse.pinToNodes = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(5);
                return typedResponse;
            }
        });
    }

    public Flowable<AppEnqueuedEventResponse> appEnqueuedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPENQUEUED_EVENT));
        return appEnqueuedEventFlowable(filter);
    }

    public List<NewNodeEventResponse> getNewNodeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWNODE_EVENT, transactionReceipt);
        ArrayList<NewNodeEventResponse> responses = new ArrayList<NewNodeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewNodeEventResponse typedResponse = new NewNodeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewNodeEventResponse>() {
            @Override
            public NewNodeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWNODE_EVENT, log);
                NewNodeEventResponse typedResponse = new NewNodeEventResponse();
                typedResponse.log = log;
                typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWNODE_EVENT));
        return newNodeEventFlowable(filter);
    }

    public List<AppDeletedEventResponse> getAppDeletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPDELETED_EVENT, transactionReceipt);
        ArrayList<AppDeletedEventResponse> responses = new ArrayList<AppDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppDeletedEventResponse typedResponse = new AppDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.clusterID = (Bytes32) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppDeletedEventResponse> appDeletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AppDeletedEventResponse>() {
            @Override
            public AppDeletedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPDELETED_EVENT, log);
                AppDeletedEventResponse typedResponse = new AppDeletedEventResponse();
                typedResponse.log = log;
                typedResponse.appID = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.clusterID = (Bytes32) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<AppDeletedEventResponse> appDeletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPDELETED_EVENT));
        return appDeletedEventFlowable(filter);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ClusterFormedEventResponse {
        public Log log;

        public Bytes32 clusterID;

        public Bytes32 appID;

        public Bytes32 storageHash;

        public Uint256 genesisTime;

        public DynamicArray<Bytes32> nodeIDs;

        public DynamicArray<Bytes24> nodeAddresses;

        public DynamicArray<Uint16> ports;
    }

    public static class AppEnqueuedEventResponse {
        public Log log;

        public Bytes32 appID;

        public Bytes32 storageHash;

        public Bytes32 storageReceipt;

        public Uint8 clusterSize;

        public Address owner;

        public DynamicArray<Bytes32> pinToNodes;
    }

    public static class NewNodeEventResponse {
        public Log log;

        public Bytes32 id;
    }

    public static class AppDeletedEventResponse {
        public Log log;

        public Bytes32 appID;

        public Bytes32 clusterID;
    }
}
