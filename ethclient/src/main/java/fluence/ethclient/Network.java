/*
 * Copyright 2018 Fluence Labs Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package fluence.ethclient;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes24;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class Network extends Contract {
    private static final String BINARY = "60806040526007805467ffffffffffffffff1916600117905560008054600160a060020a031916331790556130a7806100396000396000f3006080604052600436106100e55763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663243dcbf281146100ea578063299cf8cd1461012457806329a7e871146101535780633b5aa542146101885780633e5a4664146101ed57806350c946fe1461020f578063640ae968146102c25780637f7dcdbf146103fb578063a15fe6cb14610424578063a48dd35714610446578063acb952c21461045e578063ae1a793314610488578063ae6229e7146104a0578063bb8d6b44146104b8578063d8088cb7146104cd578063f12a796b14610588575b600080fd5b3480156100f657600080fd5b5061012260043567ffffffffffffffff196024351661ffff6044358116906064351660843515156105a0565b005b34801561013057600080fd5b506101226004803590602480359160ff6044351691606435908101910135610a94565b34801561015f57600080fd5b5061016b60043561115c565b6040805167ffffffffffffffff9092168252519081900360200190f35b34801561019457600080fd5b5061019d611198565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101d95781810151838201526020016101c1565b505050509050019250505060405180910390f35b3480156101f957600080fd5b5061012267ffffffffffffffff600435166111f2565b34801561021b57600080fd5b50610227600435611452565b6040805167ffffffffffffffff198816815261ffff80881660208084019190915290871692820192909252600160a060020a0385166060820152831515608082015260c060a0820181815284519183019190915283519192909160e0840191858101910280838360005b838110156102a9578181015183820152602001610291565b5050505090500197505050505050505060405180910390f35b3480156102ce57600080fd5b506102e467ffffffffffffffff600435166115b5565b6040805189815260208082018a905260ff891692820192909252600160a060020a038716606082015260a081018590526101006080820181815287519183019190915286519192909160c084019160e08501916101208601918a8101910280838360005b83811015610360578181015183820152602001610348565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561039f578181015183820152602001610387565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156103de5781810151838201526020016103c6565b505050509050019b50505050505050505050505060405180910390f35b34801561040757600080fd5b5061041061182a565b604080519115158252519081900360200190f35b34801561043057600080fd5b5061012267ffffffffffffffff6004351661183b565b34801561045257600080fd5b5061016b6004356119cb565b34801561046a57600080fd5b506104766004356119d9565b60408051918252519081900360200190f35b34801561049457600080fd5b5061019d6004356119f8565b3480156104ac57600080fd5b50610476600435611a91565b3480156104c457600080fd5b5061019d611a9f565b3480156104d957600080fd5b506104ef67ffffffffffffffff60043516611b2a565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561053357818101518382015260200161051b565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561057257818101518382015260200161055a565b5050505090500194505050505060405180910390f35b34801561059457600080fd5b50610122600435611e30565b6105a8612d09565b6000868152600260205260408120548190819015610610576040805160e560020a62461bcd02815260206004820152601f60248201527f54686973206e6f646520697320616c7265616479207265676973746572656400604482015290519081900360640190fd5b61ffff808716908816111561066f576040805160e560020a62461bcd02815260206004820181905260248201527f506f72742072616e676520697320656d707479206f7220696e636f7272656374604482015290519081900360640190fd5b6040805160e0810182528a815267ffffffffffffffff198a1660208083019190915261ffff808b16838501528916606083015233608083015287151560a083015282516000808252918101909352909160c083019150905260008a815260026020818152604092839020845181558482015160018201805495870151606088015177ffffffffffffffffffffffffffffffffffffffffffffffff19909716680100000000000000009093049290921779ffff000000000000000000000000000000000000000000000000191660c060020a61ffff93841602177fffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffff1660d060020a9290961691909102949094179093556080840151918301805460a086015173ffffffffffffffffffffffffffffffffffffffff19909116600160a060020a039094169390931774ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000931515939093029290921790915560c08301518051939750879361080d9260038501920190612d47565b5050600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b018a905550841515610881576001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018990555b604080518a815290517fb0cd47a7093fb93a9ce97304d3afb8df43e02e48502e47fd5fbb6c4020d935b59181900360200190a1600092505b600654831015610a895760068054849081106108d157fe5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff169150600460008367ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020905061092f816120c1565b15610a7d5761093d836122d1565b600089815260026020818152604092839020835160e08101855281548152600182015467ffffffffffffffff19680100000000000000008202168285015261ffff60c060020a820481168388015260d060020a90910416606082015292810154600160a060020a038116608085015260ff7401000000000000000000000000000000000000000090910416151560a08401526003810180548551818502810185019096528086529394919360c0860193830182828015610a5057602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff1681526020019060080190602082600701049283019260010382029150808411610a0b5790505b5050505050815250509350836060015161ffff16846040015161ffff161115610a7857610a89565b610a84565b6001909201915b6108b9565b505050505050505050565b600080600080610aa2612e02565b600060ff891611610b23576040805160e560020a62461bcd02815260206004820152602660248201527f436c75737465722073697a65206d757374206265206120706f7369746976652060448201527f6e756d6265720000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60ff8816861115610bca576040805160e560020a62461bcd02815260206004820152604860248201527f6e756d626572206f662070696e546f206e6f6465732073686f756c642062652060448201527f6c657373206f7220657175616c20746f20746865206465736972656420636c7560648201527f7374657253697a65000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600094505b60ff8516861115610de757868660ff8716818110610be957fe5b602090810292909201356000818152600293849052604090209283015490965091945050600160a060020a03161515610c6c576040805160e560020a62461bcd02815260206004820181905260248201527f43616e2070696e206f6e6c7920746f2072656769737465726564206e6f646573604482015290519081900360640190fd5b6002830154600160a060020a03163314610cd0576040805160e560020a62461bcd02815260206004820152601d60248201527f43616e2070696e206f6e6c7920746f206e6f64657320796f75206f776e000000604482015290519081900360640190fd5b600091505b60ff80861690831611610ddc5760ff85811690831614610dd157868660ff8416818110610cfe57fe5b60200291909101358514159050610dd1576040805160e560020a62461bcd02815260206004820152606860248201527f4e6f64652069647320746f2070696e20746f206d75737420626520756e69717560448201527f652c206f746865727769736520746865206465706c6f796d656e74207265737560648201527f6c7420636f756c6420626520756e7072656469637461626c6520616e6420756e60848201527f657870656374656400000000000000000000000000000000000000000000000060a482015290519081900360c40190fd5b600190910190610cd5565b600190940193610bcf565b6040805160e0810182526007805467ffffffffffffffff198116600167ffffffffffffffff92831690810190921617909155815260208082018d90528183018c905260ff8b16606083015233608083015282518982028082018301909452898152919260a0840192918b918b9182919085019084908082843750505092845250506040805160608082018352600080835283518181526020808201865280850191909152845182815280820186528486015295860192909252855167ffffffffffffffff90811683526004808752928490208751815467ffffffffffffffff19169216919091178155868601516001820155928601516002840155850151600383018054608088015160ff1990911660ff9093169290921774ffffffffffffffffffffffffffffffffffffffff001916610100600160a060020a039093169290920291909117905560a0850151805195965086959294610f4e945091850192910190612e48565b5060c08201518051600583019081556020808301518051610f759260068701920190612e48565b5060408201518051610f91916002840191602090910190612e91565b505083516005805460018101825560009182527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0600480830491909101805460039093166008026101000a67ffffffffffffffff818102199094169584160294909417909355865116815260209190915260409020611014935091506120c19050565b15156111505780516006805460018101825560009182527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f6004820401805460039092166008026101000a67ffffffffffffffff81810219909316948316029390931790925582516020808501516040808701516060808901516080808b015160a0808d015187519c8b168d528c8a01899052968c0186905260ff8416948c0194909452600160a060020a038116918b019190915260c0928a018381528551938b019390935284517fce7ec10f09e76cfcbd5189287ad4ca85c8093a5e9c998dd49c1fc91e9372e14a9a9899969894979296919594939260e085019286820192909102908190849084905b8381101561113757818101518382015260200161111f565b5050505090500197505050505050505060405180910390a15b50505050505050505050565b600680548290811061116a57fe5b9060005260206000209060049182820401919006600802915054906101000a900467ffffffffffffffff1681565b606060038054806020026020016040519081016040528092919081815260200182805480156111e757602002820191906000526020600020905b815481526001909101906020018083116111d2575b505050505090505b90565b67ffffffffffffffff80821660009081526004602052604090208054909116151561128d576040805160e560020a62461bcd02815260206004820152602560248201527f6572726f722064656c6574696e67206170703a20636c7573746572206e6f742060448201527f666f756e64000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b805467ffffffffffffffff838116911614611318576040805160e560020a62461bcd02815260206004820152602d60248201527f6572726f722064656c6574696e67206170703a20636c757374657220686f737460448201527f7320616e6f746865722061707000000000000000000000000000000000000000606482015290519081900360840190fd5b60038101546101009004600160a060020a031633148061133b575061133b61182a565b15156113b7576040805160e560020a62461bcd02815260206004820152603160248201527f6572726f722064656c6574696e67206170703a20796f75206d757374206f776e60448201527f2061707020746f2064656c657465206974000000000000000000000000000000606482015290519081900360840190fd5b60058101541515611438576040805160e560020a62461bcd02815260206004820152603860248201527f6572726f722064656c6574696e67206170703a20617070206d7573742062652060448201527f6465706c6f7965642c2075736520646571756575654170700000000000000000606482015290519081900360840190fd5b61144582600683016122df565b61144e826123c6565b5050565b60008060008060006060611464612d09565b600088815260026020818152604092839020835160e08101855281548152600182015467ffffffffffffffff19680100000000000000008202168285015261ffff60c060020a820481168388015260d060020a90910416606082015292810154600160a060020a038116608085015260ff7401000000000000000000000000000000000000000090910416151560a08401526003810180548551818502810185019096528086529394919360c086019383018282801561157757602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff16815260200190600801906020826007010492830192600103820291508084116115325790505b50505091909252505050602081015160408201516060830151608084015160a085015160c090950151939d929c50909a509850919650945092505050565b600080600080606060006060806115ca612e02565b67ffffffffffffffff8a8116600090815260046020818152604092839020835160e08101855281549095168552600181015485830152600281015485850152600381015460ff811660608701526101009004600160a060020a031660808601529182018054845181840281018401909552808552929360a0860193909283018282801561167757602002820191906000526020600020905b81548152600190910190602001808311611662575b50505050508152602001600582016060604051908101604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156116eb57602002820191906000526020600020905b815481526001909101906020018083116116d6575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561176b57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116117325790505b505050919092525050509052508051909150600067ffffffffffffffff909116116117e0576040805160e560020a62461bcd02815260206004820152601460248201527f7468657265206973206e6f207375636820617070000000000000000000000000604482015290519081900360640190fd5b6020808201516040808401516060850151608086015160a087015160c0880151805197810151950151959f50929d50909b5099509750919550909350915050919395975091939597565b600054600160a060020a0316331490565b6000611848826006612531565b60065490915081106118ca576040805160e560020a62461bcd02815260206004820152602160248201527f6572726f722064656c6574696e67206170703a20617070206e6f7420666f756e60448201527f6400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b67ffffffffffffffff82166000908152600460205260409020600301546101009004600160a060020a0316331480611905575061190561182a565b1515611981576040805160e560020a62461bcd02815260206004820152603560248201527f6572726f722064656c6574696e67206170703a20796f75206d757374206f776e60448201527f207468652061707020746f2064656c6574652069740000000000000000000000606482015290519081900360840190fd5b61198a816122d1565b6040805167ffffffffffffffff8416815290517f93c6558a217e194f0c05348341de04838e90f82cf45ff17f4fa6e094c005e2a59181900360200190a15050565b600580548290811061116a57fe5b60038054829081106119e757fe5b600091825260209091200154905081565b600081815260026020908152604091829020600301805483518184028101840190945280845260609392830182828015611a8557602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff1681526020019060080190602082600701049283019260010382029150808411611a405790505b50505050509050919050565b60018054829081106119e757fe5b606060058054806020026020016040519081016040528092919081815260200182805480156111e757602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff1681526020019060080190602082600701049283019260010382029150808411611adc5790505050505050905090565b606080611b35612e02565b67ffffffffffffffff8481166000908152600460208181526040808420815160e08101835281549096168652600181015486840152600281015486830152600381015460ff8116606080890191909152610100909104600160a060020a031660808801529381018054835181860281018601909452808452949694919360a08601939290830182828015611be957602002820191906000526020600020905b81548152600190910190602001808311611bd4575b5050505050815260200160058201606060405190810160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015611c5d57602002820191906000526020600020905b81548152600190910190602001808311611c48575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015611cdd57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611ca45790505b505050919092525050509052508051909350600067ffffffffffffffff90911611611d52576040805160e560020a62461bcd02815260206004820152601460248201527f7468657265206973206e6f207375636820617070000000000000000000000000604482015290519081900360640190fd5b8260c001516020015151604051908082528060200260200182016040528015611d85578160200160208202803883390190505b509150600090505b8260c0015160200151518160ff161015611e1b57600260008460c00151602001518360ff16815181101515611dbe57fe5b602090810290910181015182528101919091526040016000206001015482516801000000000000000090910290839060ff8416908110611dfa57fe5b67ffffffffffffffff19909216602092830290910190910152600101611d8d565b5060c090910151604001519094909350915050565b600081815260026020526040812080549091901515611ebf576040805160e560020a62461bcd02815260206004820152602360248201527f6572726f722064656c6574696e67206e6f64653a206e6f6465206e6f7420666f60448201527f756e640000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6002820154600160a060020a0316331480611edd5750611edd61182a565b1515611f59576040805160e560020a62461bcd02815260206004820152603360248201527f6572726f722064656c6574696e67206e6f64653a20796f75206d757374206f7760448201527f6e206e6f646520746f2064656c65746520697400000000000000000000000000606482015290519081900360840190fd5b611f668383600301612599565b611f718360016126b8565b600154909150811015611f8757611f87816126f4565b611f928360036126b8565b6003549091508110612014576040805160e560020a62461bcd02815260206004820152603560248201527f6572726f722064656c6574696e67206e6f64653a206e6f6465206e6f7420666f60448201527f756e6420696e206e6f6465734964732061727261790000000000000000000000606482015290519081900360840190fd5b61201d816126ff565b600083815260026020819052604082208281556001810180547fffffffff00000000000000000000000000000000000000000000000000000000169055908101805474ffffffffffffffffffffffffffffffffffffffffff19169055906120876003830182612f36565b50506040805184815290517f56f9f72fa95bd700bf86a48601b950acaf6ab5ca05de316259979fba59b8d5289181900360200190a1505050565b60038101546040805160ff909216808352602080820284010190915260009182916060918391829182918291908015612104578160200160208202803883390190505b50600489015460038a015460015492975060ff16031161229c57600093505b600488015460ff851610156121be5760026000896004018660ff1681548110151561214a57fe5b600091825260208083209091015483528201929092526040019020600181015490935061ffff60d060020a8204811660c060020a90920416111561219157600096506122c6565b82548551869060ff89169081106121a457fe5b602090810290910101526001958601959390930192612123565b600091505b600154821080156121de5750600388015460ff908116908716105b1561229c57600260006001848154811015156121f657fe5b60009182526020808320909101548352820192909252604001812090945092508390505b84518460ff1610801561222b575080155b156122625782548551869060ff871690811061224357fe5b602090810290910101511415612257575060015b60019093019261221a565b801561226d57612291565b82548551869060ff891690811061228057fe5b602090810290910101526001909501945b6001909101906121c3565b600388015460ff878116911614156122c1576122b8888661270a565b600196506122c6565b600096505b505050505050919050565b6122dc816006612b20565b50565b600080805b83548310156123bf576002600085858154811015156122ff57fe5b60009182526020808320909101548352820192909252604001902060030191506123298583612531565b845490915081106123aa576040805160e560020a62461bcd02815260206004820152603060248201527f6572726f722064656c6574696e67206170703a20617070206e6f7420666f756e60448201527f6420696e206e6f64652e61707049447300000000000000000000000000000000606482015290519081900360840190fd5b6123b48183612b20565b6001909201916122e4565b5050505050565b60006123d3826005612531565b6005549091508110612455576040805160e560020a62461bcd02815260206004820152603160248201527f6572726f722064656c6574696e67206170703a20617070206e6f7420666f756e60448201527f6420696e20617070494473206172726179000000000000000000000000000000606482015290519081900360840190fd5b612460816005612b20565b67ffffffffffffffff821660009081526004602081905260408220805467ffffffffffffffff19168155600181018390556002810183905560038101805474ffffffffffffffffffffffffffffffffffffffffff1916905591906124c690830182612f5b565b600060058301818155906124dd6006850182612f5b565b6124eb600283016000612f79565b50506040805167ffffffffffffffff8616815290517f4004c75935d50bd2b602b22e64c75f10fdf3144b978dbfbcd54464208d69dc8b9350908190036020019150a15050565b6000805b8254811015612592578367ffffffffffffffff16838281548110151561255757fe5b6000918252602090912060048204015460039091166008026101000a900467ffffffffffffffff16141561258a57612592565b600101612535565b9392505050565b6000808080805b85548510156126af5785858154811015156125b757fe5b6000918252602080832060048084049091015460039093166008026101000a90920467ffffffffffffffff16808452919052604090912060060180549195509350915061260487846126b8565b9050818110612683576040805160e560020a62461bcd02815260206004820152603360248201527f6572726f722064656c6574696e67206e6f64653a206e6f64654944207761736e60448201527f277420666f756e6420696e206e6f646549447300000000000000000000000000606482015290519081900360840190fd5b816001141561269a57612695846123c6565b6126a4565b6126a48184612c03565b6001909401936125a0565b50505050505050565b6000805b825481101561259257825484908490839081106126d557fe5b60009182526020909120015414156126ec57612592565b6001016126bc565b6122dc816001612c03565b6122dc816003612c03565b80516003830154606091829182916000918291829160ff161461279d576040805160e560020a62461bcd02815260206004820152602e60248201527f54686572652073686f756c6420626520656e6f756768206e6f64657320746f2060448201527f666f726d206120636c7573746572000000000000000000000000000000000000606482015290519081900360840190fd5b60038801546040805160ff909216808352602080820284010190915280156127cf578160200160208202803883390190505b5060038901546040805160ff9092168083526020808202840101909152919750908015612806578160200160208202803883390190505b5060038901546040805160ff909216808352602080820284010190915291965090801561283d578160200160208202803883390190505b509350600092505b600388015460ff90811690841610156129865760026000888560ff1681518110151561286d57fe5b602090810290910181015182528101919091526040016000208054875191935090879060ff861690811061289d57fe5b60209081029091010152600182015485516801000000000000000090910290869060ff86169081106128cb57fe5b67ffffffffffffffff1992909216602092830291909101909101526001820154845160c060020a90910461ffff1690859060ff861690811061290957fe5b61ffff909216602092830290910190910152815461292690612c6d565b508154600090815260026020908152604082208a5460039182018054600181810183559186529390942060048404018054600894909316939093026101000a67ffffffffffffffff91821681029102199091161790559290920191612845565b506040805160608101825242808252602080830189905292820186905260058a018181558851919390916129c29160068d0191908b0190612e48565b50604082015180516129de916002840191602090910190612e91565b5050885460018a01546040805167ffffffffffffffff909316808452602080850184905291840186905260c0606085018181528c51918601919091528b517f7aa86cdaf7e7251d43811c638493b7fb1962ee1288abe130f604ca2c84538ec49650919487938d938d938d93929091608084019160a085019160e0860191808a01910280838360005b83811015612a7e578181015183820152602001612a66565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015612abd578181015183820152602001612aa5565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015612afc578181015183820152602001612ae4565b50505050905001995050505050505050505060405180910390a15050505050505050565b805460001901828114612baf578181815481101515612b3b57fe5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff168284815481101515612b7357fe5b90600052602060002090600491828204019190066008026101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b8181815481101515612bbd57fe5b90600052602060002090600491828204019190066008026101000a81549067ffffffffffffffff021916905581805480919060019003612bfd9190612f9e565b50505050565b805460001901828114612c44578181815481101515612c1e57fe5b90600052602060002001548284815481101515612c3757fe5b6000918252602090912001555b8181815481101515612c5257fe5b60009182526020822001558154612bfd836000198301612fd7565b60008181526002602052604081206001808201805461ffff60c060020a80830482169094018116840279ffff000000000000000000000000000000000000000000000000199092169190911791829055849260d060020a830482169204161115612cfd578154612cde9060016126b8565b600154909150811015612cf457612cf4816126f4565b60019250612d02565b600092505b5050919050565b6040805160e08101825260008082526020820181905291810182905260608082018390526080820183905260a082019290925260c081019190915290565b82805482825590600052602060002090600301600490048101928215612df25791602002820160005b83821115612dbc57835183826101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509260200192600801602081600701049283019260010302612d70565b8015612df05782816101000a81549067ffffffffffffffff0219169055600801602081600701049283019260010302612dbc565b505b50612dfe929150612ffb565b5090565b60408051610120810182526000808252602082018190529181018290526060808201839052608082019290925260a081019190915260c08101612e43613020565b905290565b828054828255906000526020600020908101928215612e85579160200282015b82811115612e855782518255602090920191600190910190612e68565b50612dfe929150613042565b82805482825590600052602060002090600f01601090048101928215612f2a5791602002820160005b83821115612efa57835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302612eba565b8015612f285782816101000a81549061ffff0219169055600201602081600101049283019260010302612efa565b505b50612dfe92915061305c565b5080546000825560030160049004906000526020600020908101906122dc9190613042565b50805460008255906000526020600020908101906122dc9190613042565b50805460008255600f0160109004906000526020600020908101906122dc9190613042565b815481835581811115612fd2576003016004900481600301600490048360005260206000209182019101612fd29190613042565b505050565b815481835581811115612fd257600083815260209020612fd2918101908301613042565b6111ef91905b80821115612dfe57805467ffffffffffffffff19168155600101613001565b6060604051908101604052806000815260200160608152602001606081525090565b6111ef91905b80821115612dfe5760008155600101613048565b6111ef91905b80821115612dfe57805461ffff191681556001016130625600a165627a7a72305820b55816a7f04aa1a6eb4b0a6757464cb6a68d448a55d8d32ea58235f464fa637e0029";

    public static final String FUNC_ADDNODE = "addNode";

    public static final String FUNC_ADDAPP = "addApp";

    public static final String FUNC_ENQUEUEDAPPS = "enqueuedApps";

    public static final String FUNC_GETNODESIDS = "getNodesIds";

    public static final String FUNC_DELETEAPP = "deleteApp";

    public static final String FUNC_GETNODE = "getNode";

    public static final String FUNC_GETAPP = "getApp";

    public static final String FUNC_ISCONTRACTOWNER = "isContractOwner";

    public static final String FUNC_DEQUEUEAPP = "dequeueApp";

    public static final String FUNC_APPIDS = "appIDs";

    public static final String FUNC_NODESIDS = "nodesIds";

    public static final String FUNC_GETNODEAPPS = "getNodeApps";

    public static final String FUNC_READYNODES = "readyNodes";

    public static final String FUNC_GETAPPIDS = "getAppIDs";

    public static final String FUNC_GETAPPWORKERS = "getAppWorkers";

    public static final String FUNC_DELETENODE = "deleteNode";

    public static final Event APPDEPLOYED_EVENT = new Event("AppDeployed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
    ;

    public static final Event APPENQUEUED_EVENT = new Event("AppEnqueued", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
    ;

    public static final Event NEWNODE_EVENT = new Event("NewNode", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event NODEDELETED_EVENT = new Event("NodeDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event APPDEQUEUED_EVENT = new Event("AppDequeued", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
    ;

    public static final Event APPDELETED_EVENT = new Event("AppDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
    ;

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> addNode(Bytes32 nodeID, Bytes24 nodeAddress, Uint16 startPort, Uint16 endPort, Bool isPrivate) {
        final Function function = new Function(
                FUNC_ADDNODE, 
                Arrays.<Type>asList(nodeID, nodeAddress, startPort, endPort, isPrivate), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addApp(Bytes32 storageHash, Bytes32 storageReceipt, Uint8 clusterSize, DynamicArray<Bytes32> pinToNodes) {
        final Function function = new Function(
                FUNC_ADDAPP, 
                Arrays.<Type>asList(storageHash, storageReceipt, clusterSize, pinToNodes), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint64> enqueuedApps(Uint256 param0) {
        final Function function = new Function(FUNC_ENQUEUEDAPPS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Bytes32>> getNodesIds() {
        final Function function = new Function(FUNC_GETNODESIDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> deleteApp(Uint64 appID) {
        final Function function = new Function(
                FUNC_DELETEAPP, 
                Arrays.<Type>asList(appID), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Uint64>>> getNode(Bytes32 nodeID) {
        final Function function = new Function(FUNC_GETNODE, 
                Arrays.<Type>asList(nodeID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes24>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint16>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<DynamicArray<Uint64>>() {}));
        return new RemoteCall<Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Uint64>>>(
                new Callable<Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Uint64>>>() {
                    @Override
                    public Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Uint64>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<Bytes24, Uint16, Uint16, Address, Bool, DynamicArray<Uint64>>(
                                (Bytes24) results.get(0), 
                                (Uint16) results.get(1), 
                                (Uint16) results.get(2), 
                                (Address) results.get(3), 
                                (Bool) results.get(4), 
                                (DynamicArray<Uint64>) results.get(5));
                    }
                });
    }

    public RemoteCall<Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>>> getApp(Uint64 appID) {
        final Function function = new Function(FUNC_GETAPP, 
                Arrays.<Type>asList(appID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
        return new RemoteCall<Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>>>(
                new Callable<Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>>>() {
                    @Override
                    public Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<Bytes32, Bytes32, Uint8, Address, DynamicArray<Bytes32>, Uint256, DynamicArray<Bytes32>, DynamicArray<Uint16>>(
                                (Bytes32) results.get(0), 
                                (Bytes32) results.get(1), 
                                (Uint8) results.get(2), 
                                (Address) results.get(3), 
                                (DynamicArray<Bytes32>) results.get(4), 
                                (Uint256) results.get(5), 
                                (DynamicArray<Bytes32>) results.get(6), 
                                (DynamicArray<Uint16>) results.get(7));
                    }
                });
    }

    public RemoteCall<Bool> isContractOwner() {
        final Function function = new Function(FUNC_ISCONTRACTOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> dequeueApp(Uint64 appID) {
        final Function function = new Function(
                FUNC_DEQUEUEAPP, 
                Arrays.<Type>asList(appID), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint64> appIDs(Uint256 param0) {
        final Function function = new Function(FUNC_APPIDS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> nodesIds(Uint256 param0) {
        final Function function = new Function(FUNC_NODESIDS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Uint64>> getNodeApps(Bytes32 nodeID) {
        final Function function = new Function(FUNC_GETNODEAPPS, 
                Arrays.<Type>asList(nodeID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint64>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> readyNodes(Uint256 param0) {
        final Function function = new Function(FUNC_READYNODES, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Uint64>> getAppIDs() {
        final Function function = new Function(FUNC_GETAPPIDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint64>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>> getAppWorkers(Uint64 appID) {
        final Function function = new Function(FUNC_GETAPPWORKERS, 
                Arrays.<Type>asList(appID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
        return new RemoteCall<Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>>(
                new Callable<Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>>() {
                    @Override
                    public Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<DynamicArray<Bytes24>, DynamicArray<Uint16>>(
                                (DynamicArray<Bytes24>) results.get(0), 
                                (DynamicArray<Uint16>) results.get(1));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> deleteNode(Bytes32 nodeID) {
        final Function function = new Function(
                FUNC_DELETENODE, 
                Arrays.<Type>asList(nodeID), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<AppDeployedEventResponse> getAppDeployedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPDEPLOYED_EVENT, transactionReceipt);
        ArrayList<AppDeployedEventResponse> responses = new ArrayList<AppDeployedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppDeployedEventResponse typedResponse = new AppDeployedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appID = (Uint64) eventValues.getNonIndexedValues().get(0);
            typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(2);
            typedResponse.nodeIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(3);
            typedResponse.nodeAddresses = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(4);
            typedResponse.ports = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(5);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppDeployedEventResponse> appDeployedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AppDeployedEventResponse>() {
            @Override
            public AppDeployedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPDEPLOYED_EVENT, log);
                AppDeployedEventResponse typedResponse = new AppDeployedEventResponse();
                typedResponse.log = log;
                typedResponse.appID = (Uint64) eventValues.getNonIndexedValues().get(0);
                typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(2);
                typedResponse.nodeIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(3);
                typedResponse.nodeAddresses = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(4);
                typedResponse.ports = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(5);
                return typedResponse;
            }
        });
    }

    public Flowable<AppDeployedEventResponse> appDeployedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPDEPLOYED_EVENT));
        return appDeployedEventFlowable(filter);
    }

    public List<AppEnqueuedEventResponse> getAppEnqueuedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPENQUEUED_EVENT, transactionReceipt);
        ArrayList<AppEnqueuedEventResponse> responses = new ArrayList<AppEnqueuedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppEnqueuedEventResponse typedResponse = new AppEnqueuedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appID = (Uint64) eventValues.getNonIndexedValues().get(0);
            typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.storageReceipt = (Bytes32) eventValues.getNonIndexedValues().get(2);
            typedResponse.clusterSize = (Uint8) eventValues.getNonIndexedValues().get(3);
            typedResponse.owner = (Address) eventValues.getNonIndexedValues().get(4);
            typedResponse.pinToNodes = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(5);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppEnqueuedEventResponse> appEnqueuedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AppEnqueuedEventResponse>() {
            @Override
            public AppEnqueuedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPENQUEUED_EVENT, log);
                AppEnqueuedEventResponse typedResponse = new AppEnqueuedEventResponse();
                typedResponse.log = log;
                typedResponse.appID = (Uint64) eventValues.getNonIndexedValues().get(0);
                typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.storageReceipt = (Bytes32) eventValues.getNonIndexedValues().get(2);
                typedResponse.clusterSize = (Uint8) eventValues.getNonIndexedValues().get(3);
                typedResponse.owner = (Address) eventValues.getNonIndexedValues().get(4);
                typedResponse.pinToNodes = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(5);
                return typedResponse;
            }
        });
    }

    public Flowable<AppEnqueuedEventResponse> appEnqueuedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPENQUEUED_EVENT));
        return appEnqueuedEventFlowable(filter);
    }

    public List<NewNodeEventResponse> getNewNodeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWNODE_EVENT, transactionReceipt);
        ArrayList<NewNodeEventResponse> responses = new ArrayList<NewNodeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewNodeEventResponse typedResponse = new NewNodeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewNodeEventResponse>() {
            @Override
            public NewNodeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWNODE_EVENT, log);
                NewNodeEventResponse typedResponse = new NewNodeEventResponse();
                typedResponse.log = log;
                typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWNODE_EVENT));
        return newNodeEventFlowable(filter);
    }

    public List<NodeDeletedEventResponse> getNodeDeletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NODEDELETED_EVENT, transactionReceipt);
        ArrayList<NodeDeletedEventResponse> responses = new ArrayList<NodeDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NodeDeletedEventResponse typedResponse = new NodeDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NodeDeletedEventResponse> nodeDeletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NodeDeletedEventResponse>() {
            @Override
            public NodeDeletedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NODEDELETED_EVENT, log);
                NodeDeletedEventResponse typedResponse = new NodeDeletedEventResponse();
                typedResponse.log = log;
                typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<NodeDeletedEventResponse> nodeDeletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NODEDELETED_EVENT));
        return nodeDeletedEventFlowable(filter);
    }

    public List<AppDequeuedEventResponse> getAppDequeuedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPDEQUEUED_EVENT, transactionReceipt);
        ArrayList<AppDequeuedEventResponse> responses = new ArrayList<AppDequeuedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppDequeuedEventResponse typedResponse = new AppDequeuedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appID = (Uint64) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppDequeuedEventResponse> appDequeuedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AppDequeuedEventResponse>() {
            @Override
            public AppDequeuedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPDEQUEUED_EVENT, log);
                AppDequeuedEventResponse typedResponse = new AppDequeuedEventResponse();
                typedResponse.log = log;
                typedResponse.appID = (Uint64) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<AppDequeuedEventResponse> appDequeuedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPDEQUEUED_EVENT));
        return appDequeuedEventFlowable(filter);
    }

    public List<AppDeletedEventResponse> getAppDeletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPDELETED_EVENT, transactionReceipt);
        ArrayList<AppDeletedEventResponse> responses = new ArrayList<AppDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AppDeletedEventResponse typedResponse = new AppDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.appID = (Uint64) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AppDeletedEventResponse> appDeletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AppDeletedEventResponse>() {
            @Override
            public AppDeletedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPDELETED_EVENT, log);
                AppDeletedEventResponse typedResponse = new AppDeletedEventResponse();
                typedResponse.log = log;
                typedResponse.appID = (Uint64) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<AppDeletedEventResponse> appDeletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPDELETED_EVENT));
        return appDeletedEventFlowable(filter);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class AppDeployedEventResponse {
        public Log log;

        public Uint64 appID;

        public Bytes32 storageHash;

        public Uint256 genesisTime;

        public DynamicArray<Bytes32> nodeIDs;

        public DynamicArray<Bytes24> nodeAddresses;

        public DynamicArray<Uint16> ports;
    }

    public static class AppEnqueuedEventResponse {
        public Log log;

        public Uint64 appID;

        public Bytes32 storageHash;

        public Bytes32 storageReceipt;

        public Uint8 clusterSize;

        public Address owner;

        public DynamicArray<Bytes32> pinToNodes;
    }

    public static class NewNodeEventResponse {
        public Log log;

        public Bytes32 id;
    }

    public static class NodeDeletedEventResponse {
        public Log log;

        public Bytes32 id;
    }

    public static class AppDequeuedEventResponse {
        public Log log;

        public Uint64 appID;
    }

    public static class AppDeletedEventResponse {
        public Log log;

        public Uint64 appID;
    }
}
