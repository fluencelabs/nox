/*
 * Copyright 2018 Fluence Labs Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package fluence.ethclient;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes24;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class Network extends Contract {
    private static final String BINARY = "6080604052600160075560008054600160a060020a03191633179055613dfa8061002a6000396000f3006080604052600436106100ed5763ffffffff60e060020a6000350416630988ca8c81146100f257806318b919e91461015b578063217fe6c6146101e5578063243dcbf21461026057806324953eaa14610298578063286dd3f5146102ed578063715018a61461030e5780637a62bcff146103235780637b9417c8146103525780638da5cb5b146103735780639835b417146103a45780639914923b146104dc5780639b19251a1461069e578063bfc45a53146106bf578063c7c02e44146106d4578063e2683e921461073c578063e2ec6ec314610893578063f2fde38b146108e8578063f5b3b62114610909575b600080fd5b3480156100fe57600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610159958335600160a060020a031695369560449491939091019190819084018382808284375094975061091e9650505050505050565b005b34801561016757600080fd5b5061017061098c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101aa578181015183820152602001610192565b50505050905090810190601f1680156101d75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f157600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261024c958335600160a060020a03169536956044949193909101919081908401838280828437509497506109b19650505050505050565b604080519115158252519081900360200190f35b34801561026c57600080fd5b5061015960043567ffffffffffffffff196024351661ffff604435811690606435166084351515610a24565b3480156102a457600080fd5b506040805160206004803580820135838102808601850190965280855261015995369593946024949385019291829185019084908082843750949750610dc79650505050505050565b3480156102f957600080fd5b50610159600160a060020a0360043516610e14565b34801561031a57600080fd5b50610159610e5b565b34801561032f57600080fd5b506101596004803590602480359160ff6044351691606435908101910135610ec7565b34801561035e57600080fd5b50610159600160a060020a03600435166110ed565b34801561037f57600080fd5b50610388611131565b60408051600160a060020a039092168252519081900360200190f35b3480156103b057600080fd5b506103b9611140565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b838110156104055781810151838201526020016103ed565b50505050905001858103845288818151815260200191508051906020019060200280838360005b8381101561044457818101518382015260200161042c565b50505050905001858103835287818151815260200191508051906020019060200280838360005b8381101561048357818101518382015260200161046b565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156104c25781810151838201526020016104aa565b505050509050019850505050505050505060405180910390f35b3480156104e857600080fd5b506104f16116db565b6040518080602001806020018060200180602001806020018060200187810387528d818151815260200191508051906020019060200280838360005b8381101561054557818101518382015260200161052d565b5050505090500187810386528c818151815260200191508051906020019060200280838360005b8381101561058457818101518382015260200161056c565b5050505090500187810385528b818151815260200191508051906020019060200280838360005b838110156105c35781810151838201526020016105ab565b5050505090500187810384528a818151815260200191508051906020019060200280838360005b838110156106025781810151838201526020016105ea565b50505050905001878103835289818151815260200191508051906020019060200280838360005b83811015610641578181015183820152602001610629565b50505050905001878103825288818151815260200191508051906020019060200280838360005b83811015610680578181015183820152602001610668565b505050509050019c5050505050505050505050505060405180910390f35b3480156106aa57600080fd5b5061024c600160a060020a0360043516611c12565b3480156106cb57600080fd5b506104f1611c47565b3480156106e057600080fd5b506106ec600435611f45565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610728578181015183820152602001610710565b505050509050019250505060405180910390f35b34801561074857600080fd5b50610754600435612337565b60408051888152602080820189905291810187905260e060608201818152875191830191909152865191929091608084019160a085019160c08601916101008701918b8201910280838360005b838110156107b95781810151838201526020016107a1565b50505050905001858103845288818151815260200191508051906020019060200280838360005b838110156107f85781810151838201526020016107e0565b50505050905001858103835287818151815260200191508051906020019060200280838360005b8381101561083757818101518382015260200161081f565b50505050905001858103825286818151815260200191508051906020019060200280838360005b8381101561087657818101518382015260200161085e565b505050509050019b50505050505050505050505060405180910390f35b34801561089f57600080fd5b5060408051602060048035808201358381028086018501909652808552610159953695939460249493850192918291850190849080828437509497506126539650505050505050565b3480156108f457600080fd5b50610159600160a060020a03600435166126a0565b34801561091557600080fd5b506103b96126c0565b610988826001836040518082805190602001908083835b602083106109545780518252601f199092019160209182019101610935565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220929150506128f9565b5050565b6040805180820190915260098152600080516020613daf833981519152602082015281565b6000610a1d836001846040518082805190602001908083835b602083106109e95780518252601f1990920191602091820191016109ca565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092209291505061290e565b9392505050565b610a2d33611c12565b1515610a83576040805160e560020a62461bcd02815260206004820152601e60248201527f5468652073656e646572206973206e6f7420696e2077686974656c6973740000604482015290519081900360640190fd5b60008581526004602052604090205415610ae7576040805160e560020a62461bcd02815260206004820152601f60248201527f54686973206e6f646520697320616c7265616479207265676973746572656400604482015290519081900360640190fd5b61ffff8083169084161115610b46576040805160e560020a62461bcd02815260206004820181905260248201527f506f72742072616e676520697320656d707479206f7220696e636f7272656374604482015290519081900360640190fd5b60e060405190810160405280866000191681526020018567ffffffffffffffff191681526020018461ffff1681526020018361ffff1681526020018461ffff16815260200133600160a060020a031681526020018215158152506004600087600019166000191681526020019081526020016000206000820151816000019060001916905560208201518160010160006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff0219169083680100000000000000009004021790555060408201518160010160186101000a81548161ffff021916908361ffff160217905550606082015181600101601a6101000a81548161ffff021916908361ffff160217905550608082015181600101601c6101000a81548161ffff021916908361ffff16021790555060a08201518160020160006101000a815481600160a060020a030219169083600160a060020a0316021790555060c08201518160020160146101000a81548160ff021916908315150217905550905050600285908060018154018082558091505090600182039060005260206000200160009091929091909150906000191690555060058590806001815401808255809150509060018203906000526020600020016000909192909190915090600019169055508015610d5d57336000908152600960205260409020805463ffffffff8082166001011663ffffffff19909116179055610d7a565b6003805463ffffffff8082166001011663ffffffff199091161790555b610d838161292d565b15610d8d57610d7a565b6040805186815290517fb0cd47a7093fb93a9ce97304d3afb8df43e02e48502e47fd5fbb6c4020d935b59181900360200190a15050505050565b60008054600160a060020a03163314610ddf57600080fd5b5060005b815181101561098857610e0c8282815181101515610dfd57fe5b90602001906020020151610e14565b600101610de3565b600054600160a060020a03163314610e2b57600080fd5b610e5881604080519081016040528060098152602001600080516020613daf833981519152815250612f98565b50565b600054600160a060020a03163314610e7257600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b610ed033611c12565b1515610f26576040805160e560020a62461bcd02815260206004820152601e60248201527f5468652073656e646572206973206e6f7420696e2077686974656c6973740000604482015290519081900360640190fd5b801580610f35575060ff831681145b1515610fb1576040805160e560020a62461bcd02815260206004820152602481018290527f6e756d626572206f662070696e6e6564206e6f6465732073686f756c6420626560448201527f207468652073616d65206173206465736972656420636c757374657253697a65606482015290519081900360840190fd5b6040805160a081018252868152602080820187905260ff861682840152336060830152825184820281810183019094528481526008936080840192879187918291908501908490808284375050509290935250508254600181810180865560009586526020958690208551600490940201928355858501519183019190915560408401516002830180546060870151600160a060020a03166101000274ffffffffffffffffffffffffffffffffffffffff001960ff90941660ff19909216919091179290921691909117905560808401518051919592935061109a926003850192910190613988565b506110ac92505060008311905061292d565b15156110e6576040805186815290517fd18fba5b22517a48b063e62f8b6acbfc4dbfba1583e929178d3fc862218544dd9181900360200190a15b5050505050565b600054600160a060020a0316331461110457600080fd5b610e5881604080519081016040528060098152602001600080516020613daf8339815191528152506130a9565b600054600160a060020a031681565b606080606080606060008060006111556139d5565b60608060608060006111656139d5565b60006001600754036040519080825280602002602001820160405280156111a657816020015b6111936139d5565b81526020019060019003908161118b5790505b509b5060009a50600199505b6007548a10156114cb5760018a039850600660008b6001026000191660001916815260200190815260200160002060e060405190810160405290816000820154600019166000191681526020016001820160a060405190810160405290816000820154600019166000191681526020016001820154600019166000191681526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a9004600160a060020a0316600160a060020a0316600160a060020a03168152602001600382018054806020026020016040519081016040528092919081815260200182805480156112cf57602002820191906000526020600020905b815481526001909101906020018083116112ba575b5050505050815250508152602001600582015481526020016006820180548060200260200160405190810160405280929190818152602001828054801561133657602002820191906000526020600020905b81548152600190910190602001808311611321575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156113a557602002820191906000526020600020905b8154680100000000000000000267ffffffffffffffff1916815260019091019060200180831161137a575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561142557602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116113ec5790505b505050505081526020016009820180548060200260200160405190810160405280929190818152602001828054801561148757602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611469575b5050505050815250509750878c8a8151811015156114a157fe5b9060200190602002018190525087602001516040015160ff168b019a5089806001019a50506111b2565b8a6040519080825280602002602001820160405280156114f5578160200160208202803883390190505b5096508a604051908082528060200260200182016040528015611522578160200160208202803883390190505b5095508a60405190808252806020026020018201604052801561154f578160200160208202803883390190505b5094508a60405190808252806020026020018201604052801561157c578160200160208202803883390190505b50935060009a50600092505b8b518310156116c4578b8381518110151561159f57fe5b906020019060200201519150600090505b8160800151518110156116b95760608201518051829081106115ce57fe5b90602001906020020151878c8151811015156115e657fe5b60209081029091010152608082015180518290811061160157fe5b90602001906020020151868c81518110151561161957fe5b67ffffffffffffffff1990921660209283029091019091015260a082015180518290811061164357fe5b90602001906020020151858c81518110151561165b57fe5b61ffff90921660209283029091019091015260c082015180518290811061167e57fe5b90602001906020020151848c81518110151561169657fe5b600160a060020a0390921660209283029091019091015260019a8b019a016115b0565b600190920191611588565b50949e939d50919b50995090975050505050505050565b6060806060806060806060600060608060608060608060006116fb6139d5565b60016007540360405190808252806020026020018201604052801561173a57816020015b6117276139d5565b81526020019060019003908161171f5790505b509950600198505b6007548910156119e357600089815260066020908152604091829020825160e08101845281548152835160a0810185526001830180548252600284015482860152600384015460ff8116838801526101009004600160a060020a0316606083015260048401805487518188028101880190985280885293969495878101959394929360808601939092918301828280156117fc57602002820191906000526020600020905b815481526001909101906020018083116117e7575b5050505050815250508152602001600582015481526020016006820180548060200260200160405190810160405280929190818152602001828054801561186357602002820191906000526020600020905b8154815260019091019060200180831161184e575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156118d257602002820191906000526020600020905b8154680100000000000000000267ffffffffffffffff191681526001909101906020018083116118a7575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561195257602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116119195790505b50505050508152602001600982018054806020026020016040519081016040528092919081815260200182805480156119b457602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611996575b5050505050815250508a60018b038151811015156119ce57fe5b60209081029091010152600190980197611742565b8951604051908082528060200260200182016040528015611a0e578160200160208202803883390190505b5097508951604051908082528060200260200182016040528015611a3c578160200160208202803883390190505b5096508951604051908082528060200260200182016040528015611a6a578160200160208202803883390190505b5095508951604051908082528060200260200182016040528015611a98578160200160208202803883390190505b5094508951604051908082528060200260200182016040528015611ac6578160200160208202803883390190505b5093508951604051908082528060200260200182016040528015611af4578160200160208202803883390190505b509250600091505b8951821015611bfb578982815181101515611b1357fe5b90602001906020020151905080600001518883815181101515611b3257fe5b6020908102909101015260408101518751889084908110611b4f57fe5b6020908102909101810191909152810151518651879084908110611b6f57fe5b60209081029091018101919091528181015101518551869084908110611b9157fe5b6020908102909101810191909152810151604001518451859084908110611bb457fe5b60ff9092166020928302909101820152810151606001518351849084908110611bd957fe5b600160a060020a03909216602092830290910190910152600190910190611afc565b50959e949d50929b50909950975095509350505050565b6000611c4182604080519081016040528060098152602001600080516020613daf8339815191528152506109b1565b92915050565b6060806060806060806060806060806060806000611c63613a1a565b600554604080518281526020808402820101909152908015611c8f578160200160208202803883390190505b506005546040805182815260208084028201019091529199508015611cbe578160200160208202803883390190505b506005546040805182815260208084028201019091529198508015611ced578160200160208202803883390190505b506005546040805182815260208084028201019091529197508015611d1c578160200160208202803883390190505b506005546040805182815260208084028201019091529196508015611d4b578160200160208202803883390190505b506005546040805182815260208084028201019091529195508015611d7a578160200160208202803883390190505b509250600091505b600554821015611f305760046000600584815481101515611d9f57fe5b600091825260208083209091015483528281019390935260409182019020815160e0810183528154808252600183015467ffffffffffffffff19680100000000000000008202169583019590955261ffff60c060020a860481169483019490945260d060020a85048416606083015260e060020a909404909216608083015260020154600160a060020a03811660a083015260ff60a060020a90910416151560c08201528951909250899084908110611e5457fe5b60209081029091018101919091528101518751889084908110611e7357fe5b67ffffffffffffffff1990921660209283029091019091015260408101518651879084908110611e9f57fe5b61ffff90921660209283029091019091015260608101518551869084908110611ec457fe5b61ffff90921660209283029091019091015260808101518451859084908110611ee957fe5b61ffff90921660209283029091019091015260a08101518351849084908110611f0e57fe5b600160a060020a03909216602092830290910190910152600190910190611d82565b50959c949b5092995090975095509350915050565b6060611f4f613a1a565b6060600080611f5c6139d5565b6000878152600460209081526040808320815160e08101835281548152600182015467ffffffffffffffff19680100000000000000008202168286015261ffff60c060020a8204811683860181905260d060020a83048216606085015260e060020a909204811660808401819052600290940154600160a060020a03811660a085015260ff60a060020a90910416151560c08401528451919093039092168083528085028301909401909252909750908015612022578160200160208202803883390190505b50945060009350600192505b60075483101561232b57600083815260066020908152604091829020825160e08101845281548152835160a0810185526001830180548252600284015482860152600384015460ff8116838801526101009004600160a060020a0316606083015260048401805487518188028101880190985280885293969495878101959394929360808601939092918301828280156120e857602002820191906000526020600020905b815481526001909101906020018083116120d3575b5050505050815250508152602001600582015481526020016006820180548060200260200160405190810160405280929190818152602001828054801561214f57602002820191906000526020600020905b8154815260019091019060200180831161213a575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156121be57602002820191906000526020600020905b8154680100000000000000000267ffffffffffffffff19168152600190910190602001808311612193575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561223e57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116122055790505b50505050508152602001600982018054806020026020016040519081016040528092919081815260200182805480156122a057602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612282575b5050505050815250509150600090505b81608001515181101561232057856020015167ffffffffffffffff19168260800151828151811015156122df57fe5b9060200190602002015167ffffffffffffffff19161415612318578151855160018601958791811061230d57fe5b602090810290910101525b6001016122b0565b60019092019161202e565b50929695505050505050565b600080600060608060608061234a6139d5565b600089815260066020908152604091829020825160e08101845281548152835160a0810185526001830180548252600284015482860152600384015460ff8116838801526101009004600160a060020a0316606083015260048401805487518188028101880190985280885293969495878101959394929360808601939092918301828280156123fa57602002820191906000526020600020905b815481526001909101906020018083116123e5575b5050505050815250508152602001600582015481526020016006820180548060200260200160405190810160405280929190818152602001828054801561246157602002820191906000526020600020905b8154815260019091019060200180831161244c575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156124d057602002820191906000526020600020905b8154680100000000000000000267ffffffffffffffff191681526001909101906020018083116124a5575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561255057602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116125175790505b50505050508152602001600982018054806020026020016040519081016040528092919081815260200182805480156125b257602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612594575b505050919092525050815191925050600010612618576040805160e560020a62461bcd02815260206004820152601860248201527f7468657265206973206e6f207375636820636c75737465720000000000000000604482015290519081900360640190fd5b602081810151805191015160408301516060840151608085015160a086015160c090960151949e939d50919b50995097509195509350915050565b60008054600160a060020a0316331461266b57600080fd5b5060005b815181101561098857612698828281518110151561268957fe5b906020019060200201516110ed565b60010161266f565b600054600160a060020a031633146126b757600080fd5b610e588161317b565b60608060608060608060608060006126d6613a56565b600854604080518281526020808402820101909152908015612702578160200160208202803883390190505b506008546040805182815260208084028201019091529197508015612731578160200160208202803883390190505b506008546040805182815260208084028201019091529196508015612760578160200160208202803883390190505b50600854604080518281526020808402820101909152919550801561278f578160200160208202803883390190505b509250600091505b6008548210156128e95760088054839081106127af57fe5b60009182526020918290206040805160a081018252600490930290910180548352600181015483850152600281015460ff811684840152600160a060020a036101009091041660608401526003810180548351818702810187019094528084529394919360808601939283018282801561284957602002820191906000526020600020905b81548152600190910190602001808311612834575b50505050508152505090508060000151868381518110151561286757fe5b6020908102909101810191909152810151855186908490811061288657fe5b60209081029091010152604081015184518590849081106128a357fe5b60ff909216602092830290910190910152606081015183518490849081106128c757fe5b600160a060020a03909216602092830290910190910152600190910190612797565b5093989297509095509350915050565b612903828261290e565b151561098857600080fd5b600160a060020a03166000908152602091909152604090205460ff1690565b600080612938613a56565b606080606080600080600061294b613a1a565b60008060008e156129655761295e6131f8565b9c50612970565b61296d613372565b9c505b60008d1315612a3a57600880548e90811061298757fe5b60009182526020918290206040805160a081018252600490930290910180548352600181015483850152600281015460ff811684840152600160a060020a0361010090910416606084015260038101805483518187028101870190945280845293949193608086019392830182828015612a2157602002820191906000526020600020905b81548152600190910190602001808311612a0c575b5050505050815250509b50612a358d61349e565b612a43565b60009d50612f86565b8b6040015160ff16604051908082528060200260200182016040528015612a74578160200160208202803883390190505b509a508b6040015160ff16604051908082528060200260200182016040528015612aa8578160200160208202803883390190505b5099508b6040015160ff16604051908082528060200260200182016040528015612adc578160200160208202803883390190505b5098508b6040015160ff16604051908082528060200260200182016040528015612b10578160200160208202803883390190505b50975060009650600095505b8b6040015160ff168660ff161015612cc5576002805488908110612b3c57fe5b600091825260208083209091015480835260048252604092839020835160e08101855281548152600182015467ffffffffffffffff19680100000000000000008202169482019490945261ffff60c060020a850481169582019590955260d060020a84048516606082015260e060020a9093049093166080830152600290920154600160a060020a03811660a083015260ff60a060020a90910416151560c08201529095509350612bed848d613570565b1515612bfe57600190960195612cba565b848b8760ff16815181101515612c1057fe5b60209081029091018101919091528401518a518b9060ff8916908110612c3257fe5b67ffffffffffffffff19909216602092830290910190910152608084015189518a9060ff8916908110612c6157fe5b61ffff90921660209283029091019091015260a08401518851899060ff8916908110612c8957fe5b600160a060020a03909216602092830290910190910152612caa85886135c2565b9250821515612cba576001909601955b600190950194612b1c565b6007600081548092919060010191905055600102915042905060e060405190810160405280836000191681526020018d81526020018281526020018c81526020018b81526020018a81526020018981525060066000846000191660001916815260200190815260200160002060008201518160000190600019169055602082015181600101600082015181600001906000191690556020820151816001019060001916905560408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a815481600160a060020a030219169083600160a060020a031602179055506080820151816003019080519060200190612dd4929190613988565b5050506040820151600582015560608201518051612dfc916006840191602090910190613988565b5060808201518051612e18916007840191602090910190613a86565b5060a08201518051612e34916008840191602090910190613afa565b5060c08201518051612e50916009840191602090910190613b9f565b509050507f28c3d361196410d2059b40d53bf75ae21adebcec217c5a2564746ed2c3427fd2828d60000151838e8e8e6040518087600019166000191681526020018660001916600019168152602001858152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b83811015612ee9578181015183820152602001612ed1565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015612f28578181015183820152602001612f10565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015612f67578181015183820152602001612f4f565b50505050905001995050505050505050505060405180910390a160019d505b50505050505050505050505050919050565b613002826001836040518082805190602001908083835b60208310612fce5780518252601f199092019160209182019101612faf565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050613728565b81600160a060020a03167fd211483f91fc6eff862467f8de606587a30c8fc9981056f051b897a418df803a826040518080602001828103825283818151815260200191508051906020019080838360005b8381101561306b578181015183820152602001613053565b50505050905090810190601f1680156130985780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b613113826001836040518082805190602001908083835b602083106130df5780518252601f1990920191602091820191016130c0565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092209291505061374a565b81600160a060020a03167fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b700489826040518080602001828103825283818151815260200191508051906020019080838360008381101561306b578181015183820152602001613053565b600160a060020a038116151561319057600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000806000613205613a56565b6000339350600092505b60085483101561335457600880548490811061322757fe5b60009182526020918290206040805160a081018252600490930290910180548352600181015483850152600281015460ff811684840152600160a060020a03610100909104166060840152600381018054835181870281018701909452808452939491936080860193928301828280156132c157602002820191906000526020600020905b815481526001909101906020018083116132ac575b505050505081525050915060008260800151511190508080156132f9575083600160a060020a03168260600151600160a060020a0316145b801561332f5750600160a060020a03841660009081526009602052604090819020549083015163ffffffff90911660ff90911610155b801561333f575061333f8261376f565b1561334957613354565b60019092019161320f565b600854831061336757600019945061336b565b8294505b5050505090565b60008061337d613a56565b60008092505b60085483101561348157600880548490811061339b57fe5b60009182526020918290206040805160a081018252600490930290910180548352600181015483850152600281015460ff811684840152600160a060020a036101009091041660608401526003810180548351818702810187019094528084529394919360808601939283018282801561343557602002820191906000526020600020905b81548152600190910190602001808311613420575b505050505081525050915060008260800151511190508015801561346c5750604082015160035460ff90911663ffffffff90911610155b1561347657613481565b600190920191613383565b6008548310613494576000199350613498565b8293505b50505090565b60085460001901811461355d576008805460001981019081106134bd57fe5b90600052602060002090600402016008828154811015156134da57fe5b6000918252602090912082546004909202019081556001808301549082015560028083018054918301805460ff191660ff909316929092178083559054600160a060020a0361010091829004160274ffffffffffffffffffffffffffffffffffffffff0019909116179055600380830180546135599284019190613c0d565b5050505b6008805490610988906000198301613c4d565b608081015151600090811080156135b2578360c0015180156135ab57508260600151600160a060020a03168460a00151600160a060020a0316145b91506135bb565b8360c001511591505b5092915050565b60006135cc613a1a565b50600083815260046020908152604091829020600180820180547fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff811660e060020a9182900461ffff908116909401841682021791829055855160e0810187528454815268010000000000000000830267ffffffffffffffff19169581019590955260c060020a820483169585019590955260d060020a81048216606085018190529490041660808301819052600290910154600160a060020a03811660a084015260a060020a900460ff16151560c08301529091101561371f576136b08361390d565b8060c00151156136f75760a0810151600160a060020a03166000908152600960205260409020805463ffffffff19811663ffffffff91821660001901909116179055613716565b6003805463ffffffff19811663ffffffff918216600019019091161790555b600191506135bb565b600091506135bb565b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b60008060008061377d613a1a565b600080876080015151111515613803576040805160e560020a62461bcd02815260206004820152602260248201527f636f64652073686f756c64206861766520736f6d652070696e6e6564206e6f6460448201527f6573000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60019450600093505b86608001515184101561390257608087015180518590811061382a57fe5b60209081029091018101516000818152600483526040808220815160e08101835281548152600182015467ffffffffffffffff196801000000000000000082021696820187905261ffff60c060020a820481169483019490945260d060020a81048416606083015260e060020a9004909216608083015260020154600160a060020a03811660a083015260ff60a060020a90910416151560c08201529195509093501080156138e95750816060015161ffff16826080015161ffff1611155b90508480156138f55750805b945060019093019261380c565b509295945050505050565b6002546000190181146139535760028054600019810190811061392c57fe5b906000526020600020015460028281548110151561394657fe5b6000918252602090912001555b6002805490613966906000198301613c7e565b50506003805463ffffffff19811663ffffffff91821660001901909116179055565b8280548282559060005260206000209081019282156139c5579160200282015b828111156139c557825182556020909201916001909101906139a8565b506139d1929150613c9e565b5090565b60408051610160810190915260008152602081016139f1613a56565b815260200160008152602001606081526020016060815260200160608152602001606081525090565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040805160a081018252600080825260208201819052918101829052606080820192909252608081019190915290565b828054828255906000526020600020908101928215613aee579160200282015b82811115613aee578251825477ffffffffffffffffffffffffffffffffffffffffffffffff191668010000000000000000909104178255602090920191600190910190613aa6565b506139d1929150613cbb565b82805482825590600052602060002090600f01601090048101928215613b935791602002820160005b83821115613b6357835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302613b23565b8015613b915782816101000a81549061ffff0219169055600201602081600101049283019260010302613b63565b505b506139d1929150613cf0565b828054828255906000526020600020908101928215613c01579160200282015b82811115613c01578251825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909116178255602090920191600190910190613bbf565b506139d1929150613d0f565b8280548282559060005260206000209081019282156139c55760005260206000209182015b828111156139c5578254825591600101919060010190613c32565b815481835581811115613c7957600402816004028360005260206000209182019101613c799190613d40565b505050565b815481835581811115613c7957600083815260209020613c799181019083015b613cb891905b808211156139d15760008155600101613ca4565b90565b613cb891905b808211156139d157805477ffffffffffffffffffffffffffffffffffffffffffffffff19168155600101613cc1565b613cb891905b808211156139d157805461ffff19168155600101613cf6565b613cb891905b808211156139d157805473ffffffffffffffffffffffffffffffffffffffff19168155600101613d15565b613cb891905b808211156139d15760008082556001820181905560028201805474ffffffffffffffffffffffffffffffffffffffffff19169055613d876003830182613d90565b50600401613d46565b5080546000825590600052602060002090810190610e589190613c9e560077686974656c6973740000000000000000000000000000000000000000000000a165627a7a723058201f922c779ca713b3350db9149797ed4b87a9617a6215f2e79fef052ef3bc23f50029";

    public static final String FUNC_CHECKROLE = "checkRole";

    public static final String FUNC_ROLE_WHITELISTED = "ROLE_WHITELISTED";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_ADDNODE = "addNode";

    public static final String FUNC_REMOVEADDRESSESFROMWHITELIST = "removeAddressesFromWhitelist";

    public static final String FUNC_REMOVEADDRESSFROMWHITELIST = "removeAddressFromWhitelist";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_ADDCODE = "addCode";

    public static final String FUNC_ADDADDRESSTOWHITELIST = "addAddressToWhitelist";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_GETCLUSTERSNODES = "getClustersNodes";

    public static final String FUNC_GETCLUSTERSINFO = "getClustersInfo";

    public static final String FUNC_WHITELIST = "whitelist";

    public static final String FUNC_GETREADYNODES = "getReadyNodes";

    public static final String FUNC_GETNODECLUSTERS = "getNodeClusters";

    public static final String FUNC_GETCLUSTER = "getCluster";

    public static final String FUNC_ADDADDRESSESTOWHITELIST = "addAddressesToWhitelist";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_GETENQUEUEDCODES = "getEnqueuedCodes";

    public static final Event CLUSTERFORMED_EVENT = new Event("ClusterFormed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
    ;

    public static final Event CODEENQUEUED_EVENT = new Event("CodeEnqueued", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event NEWNODE_EVENT = new Event("NewNode", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event ROLEADDED_EVENT = new Event("RoleAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event ROLEREMOVED_EVENT = new Event("RoleRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event OWNERSHIPRENOUNCED_EVENT = new Event("OwnershipRenounced", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public void checkRole(Address _operator, Utf8String _role) {
        throw new RuntimeException("cannot call constant function with void return type");
    }

    public RemoteCall<Utf8String> ROLE_WHITELISTED() {
        final Function function = new Function(FUNC_ROLE_WHITELISTED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> hasRole(Address _operator, Utf8String _role) {
        final Function function = new Function(FUNC_HASROLE, 
                Arrays.<Type>asList(_operator, _role), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addNode(Bytes32 nodeID, Bytes24 nodeAddress, Uint16 startPort, Uint16 endPort, Bool isPrivate) {
        final Function function = new Function(
                FUNC_ADDNODE, 
                Arrays.<Type>asList(nodeID, nodeAddress, startPort, endPort, isPrivate), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeAddressesFromWhitelist(DynamicArray<Address> _operators) {
        final Function function = new Function(
                FUNC_REMOVEADDRESSESFROMWHITELIST, 
                Arrays.<Type>asList(_operators), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeAddressFromWhitelist(Address _operator) {
        final Function function = new Function(
                FUNC_REMOVEADDRESSFROMWHITELIST, 
                Arrays.<Type>asList(_operator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addCode(Bytes32 storageHash, Bytes32 storageReceipt, Uint8 clusterSize, DynamicArray<Bytes32> pinnedNodes) {
        final Function function = new Function(
                FUNC_ADDCODE, 
                Arrays.<Type>asList(storageHash, storageReceipt, clusterSize, pinnedNodes), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addAddressToWhitelist(Address _operator) {
        final Function function = new Function(
                FUNC_ADDADDRESSTOWHITELIST, 
                Arrays.<Type>asList(_operator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>> getClustersNodes() {
        final Function function = new Function(FUNC_GETCLUSTERSNODES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>>(
                new Callable<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>>() {
                    @Override
                    public Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Bytes24>) results.get(1), 
                                (DynamicArray<Uint16>) results.get(2), 
                                (DynamicArray<Address>) results.get(3));
                    }
                });
    }

    public RemoteCall<Tuple6<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>> getClustersInfo() {
        final Function function = new Function(FUNC_GETCLUSTERSINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint8>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple6<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>>(
                new Callable<Tuple6<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>>() {
                    @Override
                    public Tuple6<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Uint256>) results.get(1), 
                                (DynamicArray<Bytes32>) results.get(2), 
                                (DynamicArray<Bytes32>) results.get(3), 
                                (DynamicArray<Uint8>) results.get(4), 
                                (DynamicArray<Address>) results.get(5));
                    }
                });
    }

    public RemoteCall<Bool> whitelist(Address _operator) {
        final Function function = new Function(FUNC_WHITELIST, 
                Arrays.<Type>asList(_operator), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>>> getReadyNodes() {
        final Function function = new Function(FUNC_GETREADYNODES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>>>(
                new Callable<Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>>>() {
                    @Override
                    public Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Bytes24>) results.get(1), 
                                (DynamicArray<Uint16>) results.get(2), 
                                (DynamicArray<Uint16>) results.get(3), 
                                (DynamicArray<Uint16>) results.get(4), 
                                (DynamicArray<Address>) results.get(5));
                    }
                });
    }

    public RemoteCall<DynamicArray<Bytes32>> getNodeClusters(Bytes32 nodeID) {
        final Function function = new Function(FUNC_GETNODECLUSTERS, 
                Arrays.<Type>asList(nodeID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple7<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>> getCluster(Bytes32 clusterID) {
        final Function function = new Function(FUNC_GETCLUSTER, 
                Arrays.<Type>asList(clusterID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple7<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>>(
                new Callable<Tuple7<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>>() {
                    @Override
                    public Tuple7<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>(
                                (Bytes32) results.get(0), 
                                (Bytes32) results.get(1), 
                                (Uint256) results.get(2), 
                                (DynamicArray<Bytes32>) results.get(3), 
                                (DynamicArray<Bytes24>) results.get(4), 
                                (DynamicArray<Uint16>) results.get(5), 
                                (DynamicArray<Address>) results.get(6));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addAddressesToWhitelist(DynamicArray<Address> _operators) {
        final Function function = new Function(
                FUNC_ADDADDRESSESTOWHITELIST, 
                Arrays.<Type>asList(_operators), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(Address _newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(_newOwner), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>> getEnqueuedCodes() {
        final Function function = new Function(FUNC_GETENQUEUEDCODES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint8>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>>(
                new Callable<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>>() {
                    @Override
                    public Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Bytes32>) results.get(1), 
                                (DynamicArray<Uint8>) results.get(2), 
                                (DynamicArray<Address>) results.get(3));
                    }
                });
    }

    public List<ClusterFormedEventResponse> getClusterFormedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CLUSTERFORMED_EVENT, transactionReceipt);
        ArrayList<ClusterFormedEventResponse> responses = new ArrayList<ClusterFormedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ClusterFormedEventResponse typedResponse = new ClusterFormedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.clusterID = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(2);
            typedResponse.solverIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(3);
            typedResponse.solverAddrs = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(4);
            typedResponse.solverPorts = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(5);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ClusterFormedEventResponse> clusterFormedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ClusterFormedEventResponse>() {
            @Override
            public ClusterFormedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CLUSTERFORMED_EVENT, log);
                ClusterFormedEventResponse typedResponse = new ClusterFormedEventResponse();
                typedResponse.log = log;
                typedResponse.clusterID = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(2);
                typedResponse.solverIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(3);
                typedResponse.solverAddrs = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(4);
                typedResponse.solverPorts = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(5);
                return typedResponse;
            }
        });
    }

    public Flowable<ClusterFormedEventResponse> clusterFormedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CLUSTERFORMED_EVENT));
        return clusterFormedEventFlowable(filter);
    }

    public List<CodeEnqueuedEventResponse> getCodeEnqueuedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CODEENQUEUED_EVENT, transactionReceipt);
        ArrayList<CodeEnqueuedEventResponse> responses = new ArrayList<CodeEnqueuedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CodeEnqueuedEventResponse typedResponse = new CodeEnqueuedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CodeEnqueuedEventResponse> codeEnqueuedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CodeEnqueuedEventResponse>() {
            @Override
            public CodeEnqueuedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CODEENQUEUED_EVENT, log);
                CodeEnqueuedEventResponse typedResponse = new CodeEnqueuedEventResponse();
                typedResponse.log = log;
                typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<CodeEnqueuedEventResponse> codeEnqueuedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CODEENQUEUED_EVENT));
        return codeEnqueuedEventFlowable(filter);
    }

    public List<NewNodeEventResponse> getNewNodeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWNODE_EVENT, transactionReceipt);
        ArrayList<NewNodeEventResponse> responses = new ArrayList<NewNodeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewNodeEventResponse typedResponse = new NewNodeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewNodeEventResponse>() {
            @Override
            public NewNodeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWNODE_EVENT, log);
                NewNodeEventResponse typedResponse = new NewNodeEventResponse();
                typedResponse.log = log;
                typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWNODE_EVENT));
        return newNodeEventFlowable(filter);
    }

    public List<RoleAddedEventResponse> getRoleAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEADDED_EVENT, transactionReceipt);
        ArrayList<RoleAddedEventResponse> responses = new ArrayList<RoleAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAddedEventResponse typedResponse = new RoleAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.role = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleAddedEventResponse> roleAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RoleAddedEventResponse>() {
            @Override
            public RoleAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEADDED_EVENT, log);
                RoleAddedEventResponse typedResponse = new RoleAddedEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.role = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<RoleAddedEventResponse> roleAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADDED_EVENT));
        return roleAddedEventFlowable(filter);
    }

    public List<RoleRemovedEventResponse> getRoleRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEREMOVED_EVENT, transactionReceipt);
        ArrayList<RoleRemovedEventResponse> responses = new ArrayList<RoleRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRemovedEventResponse typedResponse = new RoleRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.role = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleRemovedEventResponse> roleRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RoleRemovedEventResponse>() {
            @Override
            public RoleRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEREMOVED_EVENT, log);
                RoleRemovedEventResponse typedResponse = new RoleRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.role = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<RoleRemovedEventResponse> roleRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREMOVED_EVENT));
        return roleRemovedEventFlowable(filter);
    }

    public List<OwnershipRenouncedEventResponse> getOwnershipRenouncedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, transactionReceipt);
        ArrayList<OwnershipRenouncedEventResponse> responses = new ArrayList<OwnershipRenouncedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipRenouncedEventResponse> ownershipRenouncedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipRenouncedEventResponse>() {
            @Override
            public OwnershipRenouncedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, log);
                OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipRenouncedEventResponse> ownershipRenouncedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPRENOUNCED_EVENT));
        return ownershipRenouncedEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ClusterFormedEventResponse {
        public Log log;

        public Bytes32 clusterID;

        public Bytes32 storageHash;

        public Uint256 genesisTime;

        public DynamicArray<Bytes32> solverIDs;

        public DynamicArray<Bytes24> solverAddrs;

        public DynamicArray<Uint16> solverPorts;
    }

    public static class CodeEnqueuedEventResponse {
        public Log log;

        public Bytes32 storageHash;
    }

    public static class NewNodeEventResponse {
        public Log log;

        public Bytes32 id;
    }

    public static class RoleAddedEventResponse {
        public Log log;

        public Address operator;

        public Utf8String role;
    }

    public static class RoleRemovedEventResponse {
        public Log log;

        public Address operator;

        public Utf8String role;
    }

    public static class OwnershipRenouncedEventResponse {
        public Log log;

        public Address previousOwner;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public Address previousOwner;

        public Address newOwner;
    }
}
