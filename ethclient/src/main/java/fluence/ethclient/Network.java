package fluence.ethclient;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes24;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class Network extends Contract {
    private static final String BINARY = "6080604052600160075560008054600160a060020a03191633179055613b2e8061002a6000396000f3006080604052600436106100ed5763ffffffff60e060020a6000350416630988ca8c81146100f257806318b919e91461015b578063217fe6c6146101e5578063243dcbf21461026057806324953eaa14610298578063286dd3f5146102ed578063715018a61461030e5780637b9417c8146103235780638da5cb5b146103445780639835b417146103755780639914923b146104ad5780639b19251a1461066f578063bfc45a5314610690578063c7c02e44146106a5578063c87e8f1c1461070d578063e2683e9214610733578063e2ec6ec31461088a578063f2fde38b146108df578063f5b3b62114610900575b600080fd5b3480156100fe57600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610159958335600160a060020a03169536956044949193909101919081908401838280828437509497506109159650505050505050565b005b34801561016757600080fd5b50610170610983565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101aa578181015183820152602001610192565b50505050905090810190601f1680156101d75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f157600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261024c958335600160a060020a03169536956044949193909101919081908401838280828437509497506109a89650505050505050565b604080519115158252519081900360200190f35b34801561026c57600080fd5b5061015960043567ffffffffffffffff196024351661ffff604435811690606435166084351515610a1b565b3480156102a457600080fd5b506040805160206004803580820135838102808601850190965280855261015995369593946024949385019291829185019084908082843750949750610dd19650505050505050565b3480156102f957600080fd5b50610159600160a060020a0360043516610e1e565b34801561031a57600080fd5b50610159610e65565b34801561032f57600080fd5b50610159600160a060020a0360043516610ed1565b34801561035057600080fd5b50610359610f15565b60408051600160a060020a039092168252519081900360200190f35b34801561038157600080fd5b5061038a610f24565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b838110156103d65781810151838201526020016103be565b50505050905001858103845288818151815260200191508051906020019060200280838360005b838110156104155781810151838201526020016103fd565b50505050905001858103835287818151815260200191508051906020019060200280838360005b8381101561045457818101518382015260200161043c565b50505050905001858103825286818151815260200191508051906020019060200280838360005b8381101561049357818101518382015260200161047b565b505050509050019850505050505050505060405180910390f35b3480156104b957600080fd5b506104c2611481565b6040518080602001806020018060200180602001806020018060200187810387528d818151815260200191508051906020019060200280838360005b838110156105165781810151838201526020016104fe565b5050505090500187810386528c818151815260200191508051906020019060200280838360005b8381101561055557818101518382015260200161053d565b5050505090500187810385528b818151815260200191508051906020019060200280838360005b8381101561059457818101518382015260200161057c565b5050505090500187810384528a818151815260200191508051906020019060200280838360005b838110156105d35781810151838201526020016105bb565b50505050905001878103835289818151815260200191508051906020019060200280838360005b838110156106125781810151838201526020016105fa565b50505050905001878103825288818151815260200191508051906020019060200280838360005b83811015610651578181015183820152602001610639565b505050509050019c5050505050505050505050505060405180910390f35b34801561067b57600080fd5b5061024c600160a060020a036004351661196c565b34801561069c57600080fd5b506104c26119a3565b3480156106b157600080fd5b506106bd600435611cb2565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156106f95781810151838201526020016106e1565b505050509050019250505060405180910390f35b34801561071957600080fd5b5061015960043560243560ff604435166064351515612069565b34801561073f57600080fd5b5061074b600435612233565b60408051888152602080820189905291810187905260e060608201818152875191830191909152865191929091608084019160a085019160c08601916101008701918b8201910280838360005b838110156107b0578181015183820152602001610798565b50505050905001858103845288818151815260200191508051906020019060200280838360005b838110156107ef5781810151838201526020016107d7565b50505050905001858103835287818151815260200191508051906020019060200280838360005b8381101561082e578181015183820152602001610816565b50505050905001858103825286818151815260200191508051906020019060200280838360005b8381101561086d578181015183820152602001610855565b505050509050019b50505050505050505050505060405180910390f35b34801561089657600080fd5b5060408051602060048035808201358381028086018501909652808552610159953695939460249493850192918291850190849080828437509497506125039650505050505050565b3480156108eb57600080fd5b50610159600160a060020a0360043516612550565b34801561090c57600080fd5b5061038a612570565b61097f826001836040518082805190602001908083835b6020831061094b5780518252601f19909201916020918201910161092c565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050612762565b5050565b6040805180820190915260098152600080516020613ae3833981519152602082015281565b6000610a14836001846040518082805190602001908083835b602083106109e05780518252601f1990920191602091820191016109c1565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050612777565b9392505050565b610a243361196c565b1515610a7a576040805160e560020a62461bcd02815260206004820152601e60248201527f5468652073656e646572206973206e6f7420696e2077686974656c6973740000604482015290519081900360640190fd5b60008581526004602052604090205415610ade576040805160e560020a62461bcd02815260206004820152601f60248201527f54686973206e6f646520697320616c7265616479207265676973746572656400604482015290519081900360640190fd5b61ffff8083169084161115610b3d576040805160e560020a62461bcd02815260206004820181905260248201527f506f72742072616e676520697320656d707479206f7220696e636f7272656374604482015290519081900360640190fd5b60e060405190810160405280866000191681526020018567ffffffffffffffff191681526020018461ffff1681526020018361ffff1681526020018461ffff16815260200133600160a060020a031681526020018215158152506004600087600019166000191681526020019081526020016000206000820151816000019060001916905560208201518160010160006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff0219169083680100000000000000009004021790555060408201518160010160186101000a81548161ffff021916908361ffff160217905550606082015181600101601a6101000a81548161ffff021916908361ffff160217905550608082015181600101601c6101000a81548161ffff021916908361ffff16021790555060a08201518160020160006101000a815481600160a060020a030219169083600160a060020a0316021790555060c08201518160020160146101000a81548160ff021916908315150217905550905050600285908060018154018082558091505090600182039060005260206000200160009091929091909150906000191690555060058590806001815401808255809150509060018203906000526020600020016000909192909190915090600019169055508015610d6857336000908152600960205260409020805463ffffffff8082166001011663ffffffff199091161790555b610d5933612796565b15610d6357610d50565b610d97565b6003805463ffffffff8082166001011663ffffffff199091161790555b610d8d612c6e565b15610d9757610d85565b6040805186815290517fb0cd47a7093fb93a9ce97304d3afb8df43e02e48502e47fd5fbb6c4020d935b59181900360200190a15050505050565b60008054600160a060020a03163314610de957600080fd5b5060005b815181101561097f57610e168282815181101515610e0757fe5b90602001906020020151610e1e565b600101610ded565b600054600160a060020a03163314610e3557600080fd5b610e6281604080519081016040528060098152602001600080516020613ae3833981519152815250613320565b50565b600054600160a060020a03163314610e7c57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a03163314610ee857600080fd5b610e6281604080519081016040528060098152602001600080516020613ae3833981519152815250613431565b600054600160a060020a031681565b60608060608060606000806000610f3961372b565b6060806060806000610f4961372b565b6000600160075403604051908082528060200260200182016040528015610f8a57816020015b610f7761372b565b815260200190600190039081610f6f5790505b509b5060009a50600199505b6007548a10156112715760018a039850600660008b6001026000191660001916815260200190815260200160002060e060405190810160405290816000820154600019166000191681526020016001820160a060405190810160405290816000820154600019166000191681526020016001820154600019166000191681526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a9004600160a060020a0316600160a060020a0316600160a060020a031681526020016002820160159054906101000a900460ff161515151581525050815260200160048201548152602001600582018054806020026020016040519081016040528092919081815260200182805480156110dc57602002820191906000526020600020905b815481526001909101906020018083116110c7575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561114b57602002820191906000526020600020905b8154680100000000000000000267ffffffffffffffff19168152600190910190602001808311611120575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156111cb57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116111925790505b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561122d57602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161120f575b5050505050815250509750878c8a81518110151561124757fe5b9060200190602002018190525087602001516040015160ff168b019a5089806001019a5050610f96565b8a60405190808252806020026020018201604052801561129b578160200160208202803883390190505b5096508a6040519080825280602002602001820160405280156112c8578160200160208202803883390190505b5095508a6040519080825280602002602001820160405280156112f5578160200160208202803883390190505b5094508a604051908082528060200260200182016040528015611322578160200160208202803883390190505b50935060009a50600092505b8b5183101561146a578b8381518110151561134557fe5b906020019060200201519150600090505b81608001515181101561145f57606082015180518290811061137457fe5b90602001906020020151878c81518110151561138c57fe5b6020908102909101015260808201518051829081106113a757fe5b90602001906020020151868c8151811015156113bf57fe5b67ffffffffffffffff1990921660209283029091019091015260a08201518051829081106113e957fe5b90602001906020020151858c81518110151561140157fe5b61ffff90921660209283029091019091015260c082015180518290811061142457fe5b90602001906020020151848c81518110151561143c57fe5b600160a060020a0390921660209283029091019091015260019a8b019a01611356565b60019092019161132e565b50949e939d50919b50995090975050505050505050565b6060806060806060806060600060608060608060608060006114a161372b565b6001600754036040519080825280602002602001820160405280156114e057816020015b6114cd61372b565b8152602001906001900390816114c55790505b509950600198505b60075489101561173d57600089815260066020908152604091829020825160e08101845281548152835160a08101855260018301548152600283015481850152600383015460ff80821683880152600160a060020a0361010083041660608085019190915260a860020a90920416151560808301528285019190915260048301548286015260058301805486518187028101870190975280875292959394918601939290918301828280156115bd57602002820191906000526020600020905b815481526001909101906020018083116115a8575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561162c57602002820191906000526020600020905b8154680100000000000000000267ffffffffffffffff19168152600190910190602001808311611601575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156116ac57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116116735790505b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561170e57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116116f0575b5050505050815250508a60018b0381518110151561172857fe5b602090810290910101526001909801976114e8565b8951604051908082528060200260200182016040528015611768578160200160208202803883390190505b5097508951604051908082528060200260200182016040528015611796578160200160208202803883390190505b50965089516040519080825280602002602001820160405280156117c4578160200160208202803883390190505b50955089516040519080825280602002602001820160405280156117f2578160200160208202803883390190505b5094508951604051908082528060200260200182016040528015611820578160200160208202803883390190505b509350895160405190808252806020026020018201604052801561184e578160200160208202803883390190505b509250600091505b895182101561195557898281518110151561186d57fe5b9060200190602002015190508060000151888381518110151561188c57fe5b60209081029091010152604081015187518890849081106118a957fe5b60209081029091018101919091528101515186518790849081106118c957fe5b602090810290910181019190915281810151015185518690849081106118eb57fe5b602090810290910181019190915281015160400151845185908490811061190e57fe5b60ff909216602092830290910182015281015160600151835184908490811061193357fe5b600160a060020a03909216602092830290910190910152600190910190611856565b50959e949d50929b50909950975095509350505050565b600061199b82604080519081016040528060098152602001600080516020613ae38339815191528152506109a8565b90505b919050565b60608060608060608060608060608060608060006119bf613770565b6005546040805182815260208084028201019091529080156119eb578160200160208202803883390190505b506005546040805182815260208084028201019091529199508015611a1a578160200160208202803883390190505b506005546040805182815260208084028201019091529198508015611a49578160200160208202803883390190505b506005546040805182815260208084028201019091529197508015611a78578160200160208202803883390190505b506005546040805182815260208084028201019091529196508015611aa7578160200160208202803883390190505b506005546040805182815260208084028201019091529195508015611ad6578160200160208202803883390190505b509250600091505b600554821015611c9d5760046000600584815481101515611afb57fe5b600091825260208083209091015483528281019390935260409182019020815160e0810183528154808252600183015467ffffffffffffffff19680100000000000000008202169583019590955261ffff60c060020a860481169483019490945260d060020a85048416606083015260e060020a909404909216608083015260020154600160a060020a03811660a083015260ff7401000000000000000000000000000000000000000090910416151560c08201528951909250899084908110611bc157fe5b60209081029091018101919091528101518751889084908110611be057fe5b67ffffffffffffffff1990921660209283029091019091015260408101518651879084908110611c0c57fe5b61ffff90921660209283029091019091015260608101518551869084908110611c3157fe5b61ffff90921660209283029091019091015260808101518451859084908110611c5657fe5b61ffff90921660209283029091019091015260a08101518351849084908110611c7b57fe5b600160a060020a03909216602092830290910190910152600190910190611ade565b50959c949b5092995090975095509350915050565b6060611cbc613770565b6060600080611cc961372b565b6000878152600460209081526040808320815160e08101835281548152600182015467ffffffffffffffff19680100000000000000008202168286015261ffff60c060020a8204811683860181905260d060020a83048216606085015260e060020a909204811660808401819052600290940154600160a060020a03811660a085015260ff7401000000000000000000000000000000000000000090910416151560c08401528451919093039092168083528085028301909401909252909750908015611da0578160200160208202803883390190505b50945060009350600192505b60075483101561205d57600083815260066020908152604091829020825160e08101845281548152835160a08101855260018301548152600283015481850152600383015460ff80821683880152600160a060020a0361010083041660608085019190915260a860020a9092041615156080830152828501919091526004830154828601526005830180548651818702810187019097528087529295939491860193929091830182828015611e8157602002820191906000526020600020905b81548152600190910190602001808311611e6c575b5050505050815260200160068201805480602002602001604051908101604052809291908181526020018280548015611ef057602002820191906000526020600020905b8154680100000000000000000267ffffffffffffffff19168152600190910190602001808311611ec5575b5050505050815260200160078201805480602002602001604051908101604052809291908181526020018280548015611f7057602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611f375790505b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015611fd257602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611fb4575b5050505050815250509150600090505b81608001515181101561205257856020015167ffffffffffffffff191682608001518281518110151561201157fe5b9060200190602002015167ffffffffffffffff1916141561204a578151855160018601958791811061203f57fe5b602090810290910101525b600101611fe2565b600190920191611dac565b50929695505050505050565b6120723361196c565b15156120c8576040805160e560020a62461bcd02815260206004820152601e60248201527f5468652073656e646572206973206e6f7420696e2077686974656c6973740000604482015290519081900360640190fd5b6040805160a0810182528581526020810185815260ff80861693830193845233606084019081528515156080850190815260088054600181018255600091909152945160039095027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee381019590955592517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee485015593517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee5909301805494519251151560a860020a0275ff00000000000000000000000000000000000000000019600160a060020a03949094166101000274ffffffffffffffffffffffffffffffffffffffff00199590931660ff19909616959095179390931617169190911790556121f381613503565b151561222d576040805185815290517fd18fba5b22517a48b063e62f8b6acbfc4dbfba1583e929178d3fc862218544dd9181900360200190a15b50505050565b600080600060608060608061224661372b565b600089815260066020908152604091829020825160e08101845281548152835160a08101855260018301548152600283015481850152600383015460ff80821683880152600160a060020a0361010083041660608085019190915260a860020a909204161515608083015282850191909152600483015482860152600583018054865181870281018701909752808752929593949186019392909183018282801561231157602002820191906000526020600020905b815481526001909101906020018083116122fc575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561238057602002820191906000526020600020905b8154680100000000000000000267ffffffffffffffff19168152600190910190602001808311612355575b505050505081526020016007820180548060200260200160405190810160405280929190818152602001828054801561240057602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116123c75790505b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561246257602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612444575b5050509190925250508151919250506000106124c8576040805160e560020a62461bcd02815260206004820152601860248201527f7468657265206973206e6f207375636820636c75737465720000000000000000604482015290519081900360640190fd5b602081810151805191015160408301516060840151608085015160a086015160c090960151949e939d50919b50995097509195509350915050565b60008054600160a060020a0316331461251b57600080fd5b5060005b815181101561097f57612548828281518110151561253957fe5b90602001906020020151610ed1565b60010161251f565b600054600160a060020a0316331461256757600080fd5b610e6281613523565b60608060608060608060608060006125866137ac565b6008546040805182815260208084028201019091529080156125b2578160200160208202803883390190505b5060085460408051828152602080840282010190915291975080156125e1578160200160208202803883390190505b506008546040805182815260208084028201019091529196508015612610578160200160208202803883390190505b50600854604080518281526020808402820101909152919550801561263f578160200160208202803883390190505b509250600091505b60085482101561275257600880548390811061265f57fe5b60009182526020918290206040805160a081018252600390930290910180548084526001820154948401949094526002015460ff80821692840192909252600160a060020a03610100820416606084015260a860020a9004161515608082015287519092508790849081106126d057fe5b602090810290910181019190915281015185518690849081106126ef57fe5b602090810290910101526040810151845185908490811061270c57fe5b60ff9092166020928302909101909101526060810151835184908490811061273057fe5b600160a060020a03909216602092830290910190910152600190910190612647565b5093989297509095509350915050565b61276c8282612777565b151561097f57600080fd5b600160a060020a03166000908152602091909152604090205460ff1690565b6000806127a16137ac565b60608060608060008060006127b4613770565b600099505b6008548a10156128a457600880548b9081106127d157fe5b60009182526020918290206040805160a08101825260039093029091018054835260018101549383019390935260029092015460ff80821693830193909352600160a060020a03610100820416606083015260a860020a900490911615801560808301819052919a5061285957508b600160a060020a03168960600151600160a060020a0316145b801561288f5750600160a060020a038c166000908152600960205260409081902054908a015163ffffffff90911660ff90911610155b15612899576128a4565b6001909901986127b9565b6008548a106128b65760009a50612c5f565b6128bf8a6135a0565b886040015160ff166040519080825280602002602001820160405280156128f0578160200160208202803883390190505b509750886040015160ff16604051908082528060200260200182016040528015612924578160200160208202803883390190505b509650886040015160ff16604051908082528060200260200182016040528015612958578160200160208202803883390190505b509550886040015160ff1660405190808252806020026020018201604052801561298c578160200160208202803883390190505b50945060009350600092505b886040015160ff168360ff161015612c5f5760028054859081106129b857fe5b600091825260208083209091015480835260048252604092839020835160e08101855281548152600182015467ffffffffffffffff19680100000000000000008202169482019490945261ffff60c060020a850481169582019590955260d060020a84048516606082015260e060020a9093049093166080830152600290920154600160a060020a03811660a083015260ff740100000000000000000000000000000000000000009091041615801560c0830152919350915080612a9257508b600160a060020a03168160a00151600160a060020a031614155b15612aa257600190930192612c54565b81888460ff16815181101515612ab457fe5b60209081029091018101919091528101518751889060ff8616908110612ad657fe5b67ffffffffffffffff1990921660209283029091019091015260808101518651879060ff8616908110612b0557fe5b61ffff90921660209283029091019091015260a08101518551869060ff8616908110612b2d57fe5b90602001906020020190600160a060020a03169081600160a060020a031681525050600460008360001916600019168152602001908152602001600020600101601c81819054906101000a900461ffff168092919060010191906101000a81548161ffff021916908361ffff16021790555050600960008d600160a060020a0316600160a060020a03168152602001908152602001600020600081819054906101000a900463ffffffff16809291906001900391906101000a81548163ffffffff021916908363ffffffff16021790555050806060015161ffff16600460008460001916600019168152602001908152602001600020600101601c9054906101000a900461ffff1661ffff161115612c4d57612c488461368b565b612c54565b6001909301925b600190920191612998565b50505050505050505050919050565b600080612c796137ac565b6060806060806000806000612c8c613770565b60008060009b505b6008548c1015612d4857600880548d908110612cac57fe5b60009182526020918290206040805160a08101825260039093029091018054835260018101549383019390935260029092015460ff80821693830193909352600160a060020a03610100820416606083015260a860020a900490911615801560808301819052919c5090612d33575060408b015160035460ff90911663ffffffff90911610155b15612d3d57612d48565b6001909b019a612c94565b6008548c10612d5a5760009c50613311565b612d638c6135a0565b8a6040015160ff16604051908082528060200260200182016040528015612d94578160200160208202803883390190505b5099508a6040015160ff16604051908082528060200260200182016040528015612dc8578160200160208202803883390190505b5098508a6040015160ff16604051908082528060200260200182016040528015612dfc578160200160208202803883390190505b5097508a6040015160ff16604051908082528060200260200182016040528015612e30578160200160208202803883390190505b50965060009550600094505b8a6040015160ff168560ff16101561304c576002805487908110612e5c57fe5b600091825260208083209091015480835260048252604092839020835160e08101855281548152600182015467ffffffffffffffff19680100000000000000008202169482019490945261ffff60c060020a850481169582019590955260d060020a84048516606082015260e060020a9093049093166080830152600290920154600160a060020a03811660a083015260ff740100000000000000000000000000000000000000009091041615801560c08301529195509350612f2457600190950194613041565b838a8660ff16815181101515612f3657fe5b602090810290910181019190915283015189518a9060ff8816908110612f5857fe5b67ffffffffffffffff1990921660209283029091019091015260808301518851899060ff8816908110612f8757fe5b61ffff90921660209283029091019091015260a08301518751889060ff8816908110612faf57fe5b600160a060020a03909216602092830290910182015260008581526004909152604090206001908101805461ffff60e060020a8083048216909401811684027fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092169190911791829055606086015181169290910416111561303a576130358661368b565b613041565b6001909501945b600190940193612e3c565b6007600081548092919060010191905055600102915042905060e060405190810160405280836000191681526020018c81526020018281526020018b81526020018a81526020018981526020018881525060066000846000191660001916815260200190815260200160002060008201518160000190600019169055602082015181600101600082015181600001906000191690556020820151816001019060001916905560408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a815481600160a060020a030219169083600160a060020a0316021790555060808201518160020160156101000a81548160ff02191690831515021790555050506040820151816004015560608201518160050190805190602001906131879291906137da565b50608082015180516131a3916006840191602090910190613827565b5060a082015180516131bf91600784019160209091019061389b565b5060c082015180516131db916008840191602090910190613940565b509050507f28c3d361196410d2059b40d53bf75ae21adebcec217c5a2564746ed2c3427fd2828c60000151838d8d8d6040518087600019166000191681526020018660001916600019168152602001858152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b8381101561327457818101518382015260200161325c565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156132b357818101518382015260200161329b565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156132f25781810151838201526020016132da565b50505050905001995050505050505050505060405180910390a160019c505b50505050505050505050505090565b61338a826001836040518082805190602001908083835b602083106133565780518252601f199092019160209182019101613337565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220929150506136e4565b81600160a060020a03167fd211483f91fc6eff862467f8de606587a30c8fc9981056f051b897a418df803a826040518080602001828103825283818151815260200191508051906020019080838360005b838110156133f35781810151838201526020016133db565b50505050905090810190601f1680156134205780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b61349b826001836040518082805190602001908083835b602083106134675780518252601f199092019160209182019101613448565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050613706565b81600160a060020a03167fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b70048982604051808060200182810382528381815181526020019150805190602001908083836000838110156133f35781810151838201526020016133db565b6000811561351b5761351433612796565b905061199e565b613514612c6e565b600160a060020a038116151561353857600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600854600019018114613678576008805460001981019081106135bf57fe5b90600052602060002090600302016008828154811015156135dc57fe5b600091825260209091208254600390920201908155600180830154908201556002918201805492909101805460ff191660ff938416178082558254600160a060020a0361010091829004160274ffffffffffffffffffffffffffffffffffffffff001990911617808255915460a860020a90819004909316151590920275ff000000000000000000000000000000000000000000199091161790555b60088054600019019061097f90826139ae565b6002546000190181146136d1576002805460001981019081106136aa57fe5b90600052602060002001546002828154811015156136c457fe5b6000918252602090912001555b60028054600019019061097f90826139df565b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b60408051610160810190915260008152602081016137476137ac565b815260200160008152602001606081526020016060815260200160608152602001606081525090565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b828054828255906000526020600020908101928215613817579160200282015b8281111561381757825182556020909201916001909101906137fa565b506138239291506139ff565b5090565b82805482825590600052602060002090810192821561388f579160200282015b8281111561388f578251825477ffffffffffffffffffffffffffffffffffffffffffffffff191668010000000000000000909104178255602090920191600190910190613847565b50613823929150613a1c565b82805482825590600052602060002090600f016010900481019282156139345791602002820160005b8382111561390457835183826101000a81548161ffff021916908361ffff16021790555092602001926002016020816001010492830192600103026138c4565b80156139325782816101000a81549061ffff0219169055600201602081600101049283019260010302613904565b505b50613823929150613a51565b8280548282559060005260206000209081019282156139a2579160200282015b828111156139a2578251825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909116178255602090920191600190910190613960565b50613823929150613a70565b8154818355818111156139da576003028160030283600052602060002091820191016139da9190613aa1565b505050565b8154818355818111156139da576000838152602090206139da9181019083015b613a1991905b808211156138235760008155600101613a05565b90565b613a1991905b8082111561382357805477ffffffffffffffffffffffffffffffffffffffffffffffff19168155600101613a22565b613a1991905b8082111561382357805461ffff19168155600101613a57565b613a1991905b8082111561382357805473ffffffffffffffffffffffffffffffffffffffff19168155600101613a76565b613a1991905b80821115613823576000808255600182015560028101805475ffffffffffffffffffffffffffffffffffffffffffff19169055600301613aa7560077686974656c6973740000000000000000000000000000000000000000000000a165627a7a723058205c4df70d85af49feb1a7b89f58b401ead6cbe05efd3ae0856cabd3af79de99870029";

    public static final String FUNC_CHECKROLE = "checkRole";

    public static final String FUNC_ROLE_WHITELISTED = "ROLE_WHITELISTED";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_ADDNODE = "addNode";

    public static final String FUNC_REMOVEADDRESSESFROMWHITELIST = "removeAddressesFromWhitelist";

    public static final String FUNC_REMOVEADDRESSFROMWHITELIST = "removeAddressFromWhitelist";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_ADDADDRESSTOWHITELIST = "addAddressToWhitelist";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_GETCLUSTERSNODES = "getClustersNodes";

    public static final String FUNC_GETCLUSTERSINFO = "getClustersInfo";

    public static final String FUNC_WHITELIST = "whitelist";

    public static final String FUNC_GETREADYNODES = "getReadyNodes";

    public static final String FUNC_GETNODECLUSTERS = "getNodeClusters";

    public static final String FUNC_ADDCODE = "addCode";

    public static final String FUNC_GETCLUSTER = "getCluster";

    public static final String FUNC_ADDADDRESSESTOWHITELIST = "addAddressesToWhitelist";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_GETENQUEUEDCODES = "getEnqueuedCodes";

    public static final Event CLUSTERFORMED_EVENT = new Event("ClusterFormed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
    ;

    public static final Event CODEENQUEUED_EVENT = new Event("CodeEnqueued", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event NEWNODE_EVENT = new Event("NewNode", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event ROLEADDED_EVENT = new Event("RoleAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event ROLEREMOVED_EVENT = new Event("RoleRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event OWNERSHIPRENOUNCED_EVENT = new Event("OwnershipRenounced", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public void checkRole(Address _operator, Utf8String _role) {
        throw new RuntimeException("cannot call constant function with void return type");
    }

    public RemoteCall<Utf8String> ROLE_WHITELISTED() {
        final Function function = new Function(FUNC_ROLE_WHITELISTED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> hasRole(Address _operator, Utf8String _role) {
        final Function function = new Function(FUNC_HASROLE, 
                Arrays.<Type>asList(_operator, _role), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addNode(Bytes32 nodeID, Bytes24 nodeAddress, Uint16 startPort, Uint16 endPort, Bool isPrivate) {
        final Function function = new Function(
                FUNC_ADDNODE, 
                Arrays.<Type>asList(nodeID, nodeAddress, startPort, endPort, isPrivate), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeAddressesFromWhitelist(DynamicArray<Address> _operators) {
        final Function function = new Function(
                FUNC_REMOVEADDRESSESFROMWHITELIST, 
                Arrays.<Type>asList(_operators), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeAddressFromWhitelist(Address _operator) {
        final Function function = new Function(
                FUNC_REMOVEADDRESSFROMWHITELIST, 
                Arrays.<Type>asList(_operator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addAddressToWhitelist(Address _operator) {
        final Function function = new Function(
                FUNC_ADDADDRESSTOWHITELIST, 
                Arrays.<Type>asList(_operator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>> getClustersNodes() {
        final Function function = new Function(FUNC_GETCLUSTERSNODES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>>(
                new Callable<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>>() {
                    @Override
                    public Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Bytes24>) results.get(1), 
                                (DynamicArray<Uint16>) results.get(2), 
                                (DynamicArray<Address>) results.get(3));
                    }
                });
    }

    public RemoteCall<Tuple6<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>> getClustersInfo() {
        final Function function = new Function(FUNC_GETCLUSTERSINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint8>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple6<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>>(
                new Callable<Tuple6<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>>() {
                    @Override
                    public Tuple6<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Uint256>) results.get(1), 
                                (DynamicArray<Bytes32>) results.get(2), 
                                (DynamicArray<Bytes32>) results.get(3), 
                                (DynamicArray<Uint8>) results.get(4), 
                                (DynamicArray<Address>) results.get(5));
                    }
                });
    }

    public RemoteCall<Bool> whitelist(Address _operator) {
        final Function function = new Function(FUNC_WHITELIST, 
                Arrays.<Type>asList(_operator), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>>> getReadyNodes() {
        final Function function = new Function(FUNC_GETREADYNODES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>>>(
                new Callable<Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>>>() {
                    @Override
                    public Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Bytes24>) results.get(1), 
                                (DynamicArray<Uint16>) results.get(2), 
                                (DynamicArray<Uint16>) results.get(3), 
                                (DynamicArray<Uint16>) results.get(4), 
                                (DynamicArray<Address>) results.get(5));
                    }
                });
    }

    public RemoteCall<DynamicArray<Bytes32>> getNodeClusters(Bytes32 nodeID) {
        final Function function = new Function(FUNC_GETNODECLUSTERS, 
                Arrays.<Type>asList(nodeID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addCode(Bytes32 storageHash, Bytes32 storageReceipt, Uint8 clusterSize, Bool isPrivate) {
        final Function function = new Function(
                FUNC_ADDCODE, 
                Arrays.<Type>asList(storageHash, storageReceipt, clusterSize, isPrivate), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple7<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>> getCluster(Bytes32 clusterID) {
        final Function function = new Function(FUNC_GETCLUSTER, 
                Arrays.<Type>asList(clusterID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple7<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>>(
                new Callable<Tuple7<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>>() {
                    @Override
                    public Tuple7<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>(
                                (Bytes32) results.get(0), 
                                (Bytes32) results.get(1), 
                                (Uint256) results.get(2), 
                                (DynamicArray<Bytes32>) results.get(3), 
                                (DynamicArray<Bytes24>) results.get(4), 
                                (DynamicArray<Uint16>) results.get(5), 
                                (DynamicArray<Address>) results.get(6));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addAddressesToWhitelist(DynamicArray<Address> _operators) {
        final Function function = new Function(
                FUNC_ADDADDRESSESTOWHITELIST, 
                Arrays.<Type>asList(_operators), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(Address _newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(_newOwner), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>> getEnqueuedCodes() {
        final Function function = new Function(FUNC_GETENQUEUEDCODES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint8>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>>(
                new Callable<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>>() {
                    @Override
                    public Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Bytes32>) results.get(1), 
                                (DynamicArray<Uint8>) results.get(2), 
                                (DynamicArray<Address>) results.get(3));
                    }
                });
    }

    public List<ClusterFormedEventResponse> getClusterFormedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CLUSTERFORMED_EVENT, transactionReceipt);
        ArrayList<ClusterFormedEventResponse> responses = new ArrayList<ClusterFormedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ClusterFormedEventResponse typedResponse = new ClusterFormedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.clusterID = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(2);
            typedResponse.solverIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(3);
            typedResponse.solverAddrs = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(4);
            typedResponse.solverPorts = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(5);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ClusterFormedEventResponse> clusterFormedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ClusterFormedEventResponse>() {
            @Override
            public ClusterFormedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CLUSTERFORMED_EVENT, log);
                ClusterFormedEventResponse typedResponse = new ClusterFormedEventResponse();
                typedResponse.log = log;
                typedResponse.clusterID = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(2);
                typedResponse.solverIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(3);
                typedResponse.solverAddrs = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(4);
                typedResponse.solverPorts = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(5);
                return typedResponse;
            }
        });
    }

    public Flowable<ClusterFormedEventResponse> clusterFormedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CLUSTERFORMED_EVENT));
        return clusterFormedEventFlowable(filter);
    }

    public List<CodeEnqueuedEventResponse> getCodeEnqueuedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CODEENQUEUED_EVENT, transactionReceipt);
        ArrayList<CodeEnqueuedEventResponse> responses = new ArrayList<CodeEnqueuedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CodeEnqueuedEventResponse typedResponse = new CodeEnqueuedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CodeEnqueuedEventResponse> codeEnqueuedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CodeEnqueuedEventResponse>() {
            @Override
            public CodeEnqueuedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CODEENQUEUED_EVENT, log);
                CodeEnqueuedEventResponse typedResponse = new CodeEnqueuedEventResponse();
                typedResponse.log = log;
                typedResponse.storageHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<CodeEnqueuedEventResponse> codeEnqueuedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CODEENQUEUED_EVENT));
        return codeEnqueuedEventFlowable(filter);
    }

    public List<NewNodeEventResponse> getNewNodeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWNODE_EVENT, transactionReceipt);
        ArrayList<NewNodeEventResponse> responses = new ArrayList<NewNodeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewNodeEventResponse typedResponse = new NewNodeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewNodeEventResponse>() {
            @Override
            public NewNodeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWNODE_EVENT, log);
                NewNodeEventResponse typedResponse = new NewNodeEventResponse();
                typedResponse.log = log;
                typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWNODE_EVENT));
        return newNodeEventFlowable(filter);
    }

    public List<RoleAddedEventResponse> getRoleAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEADDED_EVENT, transactionReceipt);
        ArrayList<RoleAddedEventResponse> responses = new ArrayList<RoleAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAddedEventResponse typedResponse = new RoleAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.role = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleAddedEventResponse> roleAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RoleAddedEventResponse>() {
            @Override
            public RoleAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEADDED_EVENT, log);
                RoleAddedEventResponse typedResponse = new RoleAddedEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.role = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<RoleAddedEventResponse> roleAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADDED_EVENT));
        return roleAddedEventFlowable(filter);
    }

    public List<RoleRemovedEventResponse> getRoleRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEREMOVED_EVENT, transactionReceipt);
        ArrayList<RoleRemovedEventResponse> responses = new ArrayList<RoleRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRemovedEventResponse typedResponse = new RoleRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.role = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleRemovedEventResponse> roleRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RoleRemovedEventResponse>() {
            @Override
            public RoleRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEREMOVED_EVENT, log);
                RoleRemovedEventResponse typedResponse = new RoleRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.role = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<RoleRemovedEventResponse> roleRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREMOVED_EVENT));
        return roleRemovedEventFlowable(filter);
    }

    public List<OwnershipRenouncedEventResponse> getOwnershipRenouncedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, transactionReceipt);
        ArrayList<OwnershipRenouncedEventResponse> responses = new ArrayList<OwnershipRenouncedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipRenouncedEventResponse> ownershipRenouncedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipRenouncedEventResponse>() {
            @Override
            public OwnershipRenouncedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, log);
                OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipRenouncedEventResponse> ownershipRenouncedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPRENOUNCED_EVENT));
        return ownershipRenouncedEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ClusterFormedEventResponse {
        public Log log;

        public Bytes32 clusterID;

        public Bytes32 storageHash;

        public Uint256 genesisTime;

        public DynamicArray<Bytes32> solverIDs;

        public DynamicArray<Bytes24> solverAddrs;

        public DynamicArray<Uint16> solverPorts;
    }

    public static class CodeEnqueuedEventResponse {
        public Log log;

        public Bytes32 storageHash;
    }

    public static class NewNodeEventResponse {
        public Log log;

        public Bytes32 id;
    }

    public static class RoleAddedEventResponse {
        public Log log;

        public Address operator;

        public Utf8String role;
    }

    public static class RoleRemovedEventResponse {
        public Log log;

        public Address operator;

        public Utf8String role;
    }

    public static class OwnershipRenouncedEventResponse {
        public Log log;

        public Address previousOwner;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public Address previousOwner;

        public Address newOwner;
    }
}
