(xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (seq
       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
       (call %init_peer_id% ("getDataSrv" "node_id") [] node_id)
      )
      (call %init_peer_id% ("getDataSrv" "key") [] key)
     )
     (xor
      (call %init_peer_id% ("callbackSrv" "log") ["started script"])
      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
     )
    )
    (call -relay- ("op" "noop") [])
   )
   (xor
    (seq
     (seq
      (seq
       (seq
        (seq
         (seq
          (par
           (seq
            (seq
             (call -relay- ("op" "noop") [])
             (call node_id ("op" "string_to_b58") [key] k)
            )
            (call %init_peer_id% ("op" "noop") [])
           )
           (xor
            (call %init_peer_id% ("callbackSrv" "log") ["converted key to string"])
            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
           )
          )
          (call -relay- ("op" "noop") [])
         )
         (par
          (seq
           (seq
            (call -relay- ("op" "noop") [])
            (call node_id ("kad" "neighborhood") [k false] nodes)
           )
           (call %init_peer_id% ("op" "noop") [])
          )
          (xor
           (call %init_peer_id% ("callbackSrv" "logNodes") ["got neighborhood" nodes])
           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
          )
         )
        )
        (call -relay- ("op" "noop") [])
       )
       (par
        (seq
         (seq
          (call -relay- ("op" "noop") [])
          (fold nodes n
           (par
            (seq
             (seq
              (call -relay- ("op" "noop") [])
              (xor
               (seq
                (seq
                 (call n ("peer" "timestamp_sec") [] t)
                 (par
                  (seq
                   (call n ("aqua-dht" "get_values") [key t] values)
                   (call n ("op" "noop") [])
                  )
                  (seq
                   (call -relay- ("op" "noop") [])
                   (xor
                    (call %init_peer_id% ("callbackSrv" "logDhtResult") [n values])
                    (seq
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                     (call -relay- ("op" "noop") [])
                    )
                   )
                  )
                 )
                )
                (call n ("op" "identity") [values] $res)
               )
               (null)
              )
             )
             (call %init_peer_id% ("op" "noop") [])
            )
            (seq
             (call -relay- ("op" "noop") [])
             (next n)
            )
           )
          )
         )
         (call %init_peer_id% ("op" "noop") [])
        )
        (xor
         (call %init_peer_id% ("callbackSrv" "log") ["outside of the for"])
         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
        )
       )
      )
      (call -relay- ("op" "noop") [])
     )
     (par
      (seq
       (seq
        (call -relay- ("op" "noop") [])
        (call node_id ("aqua-dht" "merge_two") [$res.$.[0].result! $res.$.[1].result!] v)
       )
       (call %init_peer_id% ("op" "noop") [])
      )
      (xor
       (call %init_peer_id% ("callbackSrv" "log") ["merged!"])
       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 6])
      )
     )
    )
    (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 7])
   )
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [v.$.result!])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 8])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 9])
)
