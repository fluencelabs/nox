name: Publish snapshot

on:
  workflow_call:
    inputs:
      ref:
        description: "GitHub ref to checkout to"
        type: string
        default: "master"
      image-name:
        description: "Docker image name"
        type: string
        default: "docker.fluence.dev/rust-peer"
      cargo-dependencies:
        description: "Cargo dependencies map"
        type: string
    outputs:
      rust-peer-image:
        description: "rust-peer snapshot image. Compatibility with E2E. Same as minimal."
        value: ${{ jobs.publish.outputs.minimal }}
      rust-peer-minimal-image:
        description: "rust-peer snapshot miminal image"
        value: ${{ jobs.publish.outputs.minimal }}
      rust-peer-ipfs-image:
        description: "rust-peer snapshot ipfs image"
        value: ${{ jobs.publish.outputs.ipfs }}
      rust-peer-rich-image:
        description: "rust-peer snapshot rich image"
        value: ${{ jobs.publish.outputs.rich }}

jobs:
  build:
    name: "Build"
    runs-on: builder

    outputs:
      sha256: "${{ steps.sha.outputs.sha256 }}"

    steps:
      - name: Checkout rust-peer
        uses: actions/checkout@v3
        with:
          repository: fluencelabs/rust-peer
          ref: ${{ inputs.ref }}

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Set dependencies
        if: inputs.cargo-dependencies != ''
        uses: fluencelabs/github-actions/cargo-set-dependency@main
        with:
          dependencies: ${{ inputs.cargo-dependencies }}

      - name: Generate snapshot version
        id: version
        uses: fluencelabs/github-actions/generate-snapshot-id@main

      - name: Set version
        id: snapshot
        uses: fluencelabs/github-actions/cargo-publish-snapshot@main
        with:
          id: ${{ steps.version.outputs.id }}
          publish: false

      - name: Run cargo build
        run: cargo build --release -p particle-node

      - name: Calculate SHA256
        id: sha
        working-directory: ./target/release
        run: |
          # Calculate sha256
          du -hs particle-node
          sha256sum particle-node
          sha=($(sha256sum particle-node))
          echo "sha256=${sha}" >> $GITHUB_OUTPUT

      - name: Upload rust-peer binary
        uses: actions/upload-artifact@v3
        with:
          name: rust-peer
          path: target/release/particle-node

  publish:
    name: "Publish"
    runs-on: ubuntu-latest

    needs: build

    outputs:
      minimal: "${{ inputs.image-name }}@${{ steps.minimal.outputs.digest }}"
      ipfs: "${{ inputs.image-name }}@${{ steps.ipfs.outputs.digest }}"
      rich: "${{ inputs.image-name }}@${{ steps.rich.outputs.digest }}"

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout node-distro
        uses: actions/checkout@v3
        with:
          repository: fluencelabs/node-distro

      - name: Import secrets
        uses: hashicorp/vault-action@v2.4.3
        with:
          url: https://vault.fluence.dev
          path: jwt/github
          role: ci
          method: jwt
          jwtGithubAudience: "https://github.com/fluencelabs"
          jwtTtl: 300
          secrets: |
            kv/docker-registry/basicauth/ci username | DOCKER_USERNAME ;
            kv/docker-registry/basicauth/ci password | DOCKER_PASSWORD

      - name: Download rust-peer binary
        uses: actions/download-artifact@v3
        with:
          name: rust-peer
          path: fluence

      - name: Generate snapshot version
        id: version
        uses: fluencelabs/github-actions/generate-snapshot-id@main

      - name: Update rust-peer version
        run: |
          cat <<FLUENCE > fluence/fluence.json
          {
            "version": "${{ steps.version.outputs.branch }}",
            "url": "file:///fluence/particle-node",
            "sha256": "${{ needs.build.outputs.sha256 }}"
          }
          FLUENCE

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.fluence.dev
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and push minimal snapshot
        id: minimal
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          target: minimal
          tags: |
            ${{ inputs.image-name }}:minimal_${{ steps.version.outputs.branch }}
            ${{ inputs.image-name }}:minimal_${{ steps.version.outputs.branch }}_${{ github.run_number }}_${{ github.run_attempt }}
          labels: |
            variant=minimal
            branch=${{ steps.version.outputs.branch }}
            sha=${{ steps.version.outputs.sha }}
            run_number=${{ github.run_number }}
            run_attempt=${{ github.run_attempt }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push ipfs snapshot
        id: ipfs
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          target: ipfs
          tags: |
            ${{ inputs.image-name }}:ipfs_${{ steps.version.outputs.branch }}
            ${{ inputs.image-name }}:ipfs_${{ steps.version.outputs.branch }}_${{ github.run_number }}_${{ github.run_attempt }}
          labels: |
            variant=ipfs
            branch=${{ steps.version.outputs.branch }}
            sha=${{ steps.version.outputs.sha }}
            run_number=${{ github.run_number }}
            run_attempt=${{ github.run_attempt }}

      - name: Build and push rich snapshot
        id: rich
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          target: rich
          tags: |
            ${{ inputs.image-name }}:rich_${{ steps.version.outputs.branch }}
            ${{ inputs.image-name }}:rich_${{ steps.version.outputs.branch }}_${{ github.run_number }}_${{ github.run_attempt }}
          labels: |
            variant=rich
            branch=${{ steps.version.outputs.branch }}
            sha=${{ steps.version.outputs.sha }}
            run_number=${{ github.run_number }}
            run_attempt=${{ github.run_attempt }}

      - name: Print results to check summary
        if: always()
        run: |
          cat <<'SNAPSHOT' >> $GITHUB_STEP_SUMMARY
          ## rust-peer

          ### minimal
          digest: `${{ steps.minimal.outputs.digest }}`
          ```
          ${{ inputs.image-name }}:minimal_${{ steps.version.outputs.branch }}
          ${{ inputs.image-name }}:minimal_${{ steps.version.outputs.branch }}_${{ github.run_number }}_${{ github.run_attempt }}
          ```

          ### ipfs
          digest: `${{ steps.ipfs.outputs.digest }}`
          ```
          ${{ inputs.image-name }}:ipfs_${{ steps.version.outputs.branch }}
          ${{ inputs.image-name }}:ipfs_${{ steps.version.outputs.branch }}_${{ github.run_number }}_${{ github.run_attempt }}
          ```

          ### rich
          digest: `${{ steps.rich.outputs.digest }}`
          ```
          ${{ inputs.image-name }}:rich_${{ steps.version.outputs.branch }}
          ${{ inputs.image-name }}:rich_${{ steps.version.outputs.branch }}_${{ github.run_number }}_${{ github.run_attempt }}
          ```

          ### Access to Fluence docker registry
          ```
          vault read kv/basicauth/dev
          docker login docker.fluence.dev
          ```
          SNAPSHOT
