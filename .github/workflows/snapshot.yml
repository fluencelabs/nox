name: "Build nox snapshot"

on:
  workflow_call:
    inputs:
      ref:
        description: "git ref to checkout to"
        type: string
        default: "master"
      cargo-dependencies:
        description: "Cargo dependencies map"
        type: string
        default: "null"
      image-name:
        description: "Docker image name"
        type: string
        default: "docker.fluence.dev/nox"
    outputs:
      nox-image:
        description: "nox snapshot image"
        value: ${{ jobs.publish.outputs.image }}

jobs:
  publish:
    name: "Build nox (${{ matrix.arch }})"
    runs-on: builder
    timeout-minutes: 60

    env: ${{ matrix.env }}

    outputs:
      image: "${{ inputs.image-name }}@${{ steps.docker.outputs.digest }}"

    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86_64
            env:
              RUSTFLAGS: "-D warnings --cfg tokio_unstable -C link-arg=-B/usr/local/bin/mold"
              RUSTC_WRAPPER: "sccache"
          - arch: aarch64
            env:
              RUSTFLAGS: "-D warnings --cfg tokio_unstable -C link-arg=-B/usr/local/bin/mold"
              RUSTC_WRAPPER: "sccache"
              CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
              CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
              CXX_aarch64_unknown_linux_gnu: aarch64-linux-gnu-g++

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: fluencelabs/nox
          ref: ${{ inputs.ref }}

      - name: Get PR labels
        id: labels
        uses: joerick/pr-labels-action@v1.0.9

      - name: Set profile
        id: profile
        run: |
          if [[ -n "$GITHUB_PR_LABEL_PROFILING" ]]; then
            echo "profile=profiling" >> $GITHUB_OUTPUT
            echo "flags=--profile=profiling --features particle-node/dhat-heap" >> $GITHUB_OUTPUT
          else
            echo "profile=release" >> $GITHUB_OUTPUT
            echo "flags=--profile=release" >> $GITHUB_OUTPUT
          fi

      - name: Setup Rust toolchain
        uses: dsherret/rust-toolchain-file@v1

      - name: Setup mold linker
        uses: rui314/setup-mold@v1
        with:
          make-default: false

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-directories: ~/.cache/sccache
          shared-key: nox-${{ matrix.arch }}
          # github allows only 10GB of cache
          # so save cache only on merge to master
          # to use less space and speed up CI
          save-if: ${{ github.event_name == 'push' }}

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Set dependencies
        if: inputs.cargo-dependencies != 'null'
        uses: fluencelabs/github-actions/cargo-set-dependency@main
        with:
          dependencies: ${{ inputs.cargo-dependencies }}

      - name: Generate snapshot version
        id: version
        uses: fluencelabs/github-actions/generate-snapshot-id@main

      - name: Install cargo-edit
        uses: baptiste0928/cargo-install@v2.2.0
        with:
          crate: cargo-edit

      - name: Set nox version
        run: cargo set-version -p nox ${{ steps.version.outputs.version }}

      - name: Run cargo build
        run: cargo build ${{ steps.profile.outputs.flags }} -p nox --target ${{ matrix.arch }}-unknown-linux-gnu

      - name: Upload nox binary
        uses: actions/upload-artifact@v3
        with:
          name: nox-${{ matrix.arch }}
          path: target/${{ matrix.arch }}-unknown-linux-gnu/${{ steps.profile.outputs.profile }}/nox

      - name: Import secrets
        uses: hashicorp/vault-action@v2.7.4
        with:
          url: https://vault.fluence.dev
          path: jwt/github
          role: ci
          method: jwt
          jwtGithubAudience: "https://github.com/fluencelabs"
          jwtTtl: 300
          secrets: |
            kv/docker-registry/basicauth/ci username | DOCKER_USERNAME ;
            kv/docker-registry/basicauth/ci password | DOCKER_PASSWORD

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64,linux/arm64/v8

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: docker.fluence.dev
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and push container image
        id: docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64,linux/arm64/v8
          tags: |
            ${{ inputs.image-name }}:${{ steps.version.outputs.branch }}
            ${{ inputs.image-name }}:${{ steps.version.outputs.branch }}_${{ github.run_number }}_${{ github.run_attempt }}
          labels: |
            branch=${{ steps.version.outputs.branch }}
            sha=${{ steps.version.outputs.sha }}
            run_number=${{ github.run_number }}
            run_attempt=${{ github.run_attempt }}
          cache-from: type=gha
          # github allows only 10GB of cache
          # so save cache only on merge to master
          # to use less space and speed up CI
          cache-to: ${{ github.event == 'push' && 'type=gha,mode=max' || '' }}

      - name: Print results to check summary
        if: always()
        run: |
          cat <<'SNAPSHOT' >> $GITHUB_STEP_SUMMARY
          ## nox
          digest: `${{ steps.docker.outputs.digest }}`
          ```
          ${{ inputs.image-name }}:${{ steps.version.outputs.branch }}
          ${{ inputs.image-name }}:${{ steps.version.outputs.branch }}_${{ github.run_number }}_${{ github.run_attempt }}
          ```

          ### Access to Fluence docker registry
          ```
          vault read kv/basicauth/dev
          docker login docker.fluence.dev
          ```
          SNAPSHOT
