/*
 * Copyright 2018 Fluence Labs Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package fluence.node.workers.tendermint.config
import java.nio.file.{Files, Path, StandardCopyOption}
import StandardCopyOption.REPLACE_EXISTING

import cats.Functor
import cats.effect.{IO, LiftIO}
import fluence.node.config.Configuration
import fluence.node.eth.state.App
import slogging.LazyLogging

import scala.io.Source
import scala.language.higherKinds

class ConfigTemplate(srcPath: Path) extends LazyLogging {

  def copyMasterKeys(destPath: Path): IO[Unit] = {

    val nodeKey = "node_key.json"
    val validator = "priv_validator.json"

    IO {
      logger.info(s"Copying keys to worker: ${srcPath.resolve(nodeKey)} -> ${destPath.resolve(nodeKey)}")
      Files.copy(srcPath.resolve(nodeKey), destPath.resolve(nodeKey), REPLACE_EXISTING)

      logger.info(s"Copying priv_validator to worker: ${srcPath.resolve(validator)} -> ${destPath.resolve(validator)}")
      Files.copy(srcPath.resolve(validator), destPath.resolve(validator), REPLACE_EXISTING)
    }
  }

  def updateConfigTOML(destPath: Path, app: App, abciHost: String, abciPort: Short = 26658): IO[Unit] = IO {
    val configSrc = srcPath.resolve("default_config.toml")
    val configDest = destPath.resolve("config.toml")

    import scala.collection.JavaConverters._
    logger.info("Updating {} -> {}", configSrc, configDest)

    val currentWorker = app.cluster.currentWorker
    val persistentPeers = app.cluster.workers.map(_.peerAddress).mkString(",")

    val lines = Source.fromFile(configSrc.toUri).getLines().map {
      case s if s.contains("external_address") => s"""external_address = "${currentWorker.address}""""
      case s if s.contains("proxy_app") => s"""proxy_app = "tcp://$abciHost:$abciPort""""
      case s if s.contains("persistent_peers") => s"""persistent_peers = "$persistentPeers""""
      case s if s.contains("moniker") =>
        s"""moniker = "${app.id}_${currentWorker.index}""""
      case s => s
    }

    Files.write(configDest, lines.toIterable.asJava)
  }

}

object ConfigTemplate {

  def apply[F[_]: LiftIO](rootPath: Path): F[ConfigTemplate] =
    IO(new ConfigTemplate(rootPath.resolve("tendermint").resolve("config"))).to[F]

  /**
   * Generate, copy and/or update different configs used by tendermint.
   *
   * `rootPath` is usually /master inside Master container
   * `templateConfigDir` contain:
   *    - configs generated by `tendermint --init` (see [[Configuration.tendermintInit]])
   *    - config/default_config.toml, copied on container build (see node's dockerfile in build.sbt)
   *
   * At the end of execution `workerPath` will contain:
   *    - tendermint configuration in `workerConfigDir`:
   *        - node_key.json, containing private P2P key
   *        - priv_validator.json, containing validator's private & public keys and it's address
   *        - genesis.json, generated from [[App.cluster]] and [[App.id]]
   *        - config.toml, copied from `templateConfigDir/default_config.toml` and updated
   */
  def writeConfigs[F[_]: LiftIO: Functor](tpl: ConfigTemplate, app: App, dataPath: Path, abciHost: String): F[Unit] =
    (
      for {
        configPath ← IO(dataPath.resolve("config"))
        _ ← IO(Files.createDirectories(configPath))
        _ ← tpl.copyMasterKeys(configPath)
        _ ← tpl.updateConfigTOML(configPath, app, abciHost)
        _ ← GenesisConfig(app).writeTo(configPath)
      } yield ()
    ).to[F]

}
