/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from "web3/eth/contract";
import { TransactionObject, BlockType } from "web3/eth/types";
import { Callback, EventLog } from "web3/types";
import { EventEmitter } from "events";
import { Provider } from "web3/providers";

export class Network {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions);
  _address: string;
  options: contractOptions;
  methods: {
    getApp(
      appID: number | string
    ): TransactionObject<{
      0: string;
      1: string;
      2: string;
      3: string;
      4: (string)[];
      5: string;
      6: (string)[];
      7: (string)[];
    }>;

    enqueuedApps(arg0: number | string): TransactionObject<string>;

    getNode(
      nodeID: string | number[]
    ): TransactionObject<{
      0: string;
      1: string;
      2: string;
      3: string;
      4: boolean;
      5: (string)[];
    }>;

    appIDs(arg0: number | string): TransactionObject<string>;

    nodesIds(arg0: number | string): TransactionObject<string>;

    getNodeApps(nodeID: string | number[]): TransactionObject<(string)[]>;

    readyNodes(arg0: number | string): TransactionObject<string>;

    getAppWorkers(
      appID: number | string
    ): TransactionObject<{
      0: (string)[];
      1: (string)[];
    }>;

    dequeueApp(appID: number | string): TransactionObject<void>;

    addNode(
      nodeID: string | number[],
      nodeAddress: string | number[],
      startPort: number | string,
      endPort: number | string,
      isPrivate: boolean
    ): TransactionObject<void>;

    addApp(
      storageHash: string | number[],
      storageReceipt: string | number[],
      clusterSize: number | string,
      pinToNodes: (string | number[])[]
    ): TransactionObject<void>;

    deleteApp(appID: number | string): TransactionObject<void>;

    deleteNode(nodeID: string | number[]): TransactionObject<void>;

    getNodesIds(): TransactionObject<(string)[]>;
    isContractOwner(): TransactionObject<boolean>;
    getAppIDs(): TransactionObject<(string)[]>;
  };
  deploy(options: {
    data: string;
    arguments: any[];
  }): TransactionObject<Contract>;
  events: {
    AppDeployed(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    AppEnqueued(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    NewNode(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    NodeDeleted(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    AppDequeued(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    AppDeleted(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    allEvents: (
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
  getPastEvents(
    event: string,
    options?: {
      filter?: object;
      fromBlock?: BlockType;
      toBlock?: BlockType;
      topics?: (null | string)[];
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>;
  setProvider(provider: Provider): void;
  clone(): Network;
}
